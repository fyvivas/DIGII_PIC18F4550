

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Sep 24 16:32:35 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           ; Version 1.41
    67                           ; Generated 25/01/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4550 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	smallconst
   102  000800                     __psmallconst:
   103                           	opt stack 0
   104  000800  00                 	db	0
   105  000801                     _dpowers:
   106                           	opt stack 0
   107  000801  0001               	dw	1
   108  000803  0000               	dw	0
   109  000805  000A               	dw	10
   110  000807  0000               	dw	0
   111  000809  0064               	dw	100
   112  00080B  0000               	dw	0
   113  00080D  03E8               	dw	1000
   114  00080F  0000               	dw	0
   115  000811  2710               	dw	10000
   116  000813  0000               	dw	0
   117  000815  86A0               	dw	34464
   118  000817  0001               	dw	1
   119  000819  4240               	dw	16960
   120  00081B  000F               	dw	15
   121  00081D  9680               	dw	38528
   122  00081F  0098               	dw	152
   123  000821  E100               	dw	57600
   124  000823  05F5               	dw	1525
   125  000825  CA00               	dw	51712
   126  000827  3B9A               	dw	15258
   127  000829                     __end_of_dpowers:
   128                           	opt stack 0
   129  000829                     __powers_:
   130                           	opt stack 0
   131  000829  00                 	db	0
   132  00082A  80                 	db	128
   133  00082B  3F                 	db	63
   134  00082C  00                 	db	0
   135  00082D  20                 	db	32
   136  00082E  41                 	db	65
   137  00082F  00                 	db	0
   138  000830  C8                 	db	200
   139  000831  42                 	db	66
   140  000832  00                 	db	0
   141  000833  7A                 	db	122
   142  000834  44                 	db	68
   143  000835  40                 	db	64
   144  000836  1C                 	db	28
   145  000837  46                 	db	70
   146  000838  50                 	db	80
   147  000839  C3                 	db	195
   148  00083A  47                 	db	71
   149  00083B  24                 	db	36
   150  00083C  74                 	db	116
   151  00083D  49                 	db	73
   152  00083E  97                 	db	151
   153  00083F  18                 	db	24
   154  000840  4B                 	db	75
   155  000841  BC                 	db	188
   156  000842  BE                 	db	190
   157  000843  4C                 	db	76
   158  000844  6B                 	db	107
   159  000845  6E                 	db	110
   160  000846  4E                 	db	78
   161  000847  03                 	db	3
   162  000848  15                 	db	21
   163  000849  50                 	db	80
   164  00084A  79                 	db	121
   165  00084B  AD                 	db	173
   166  00084C  60                 	db	96
   167  00084D  F3                 	db	243
   168  00084E  49                 	db	73
   169  00084F  71                 	db	113
   170  000850                     __end_of__powers_:
   171                           	opt stack 0
   172  000850                     __npowers_:
   173                           	opt stack 0
   174  000850  00                 	db	0
   175  000851  80                 	db	128
   176  000852  3F                 	db	63
   177  000853  CD                 	db	205
   178  000854  CC                 	db	204
   179  000855  3D                 	db	61
   180  000856  D7                 	db	215
   181  000857  23                 	db	35
   182  000858  3C                 	db	60
   183  000859  12                 	db	18
   184  00085A  83                 	db	131
   185  00085B  3A                 	db	58
   186  00085C  B7                 	db	183
   187  00085D  D1                 	db	209
   188  00085E  38                 	db	56
   189  00085F  C6                 	db	198
   190  000860  27                 	db	39
   191  000861  37                 	db	55
   192  000862  38                 	db	56
   193  000863  86                 	db	134
   194  000864  35                 	db	53
   195  000865  C0                 	db	192
   196  000866  D6                 	db	214
   197  000867  33                 	db	51
   198  000868  CC                 	db	204
   199  000869  2B                 	db	43
   200  00086A  32                 	db	50
   201  00086B  70                 	db	112
   202  00086C  89                 	db	137
   203  00086D  30                 	db	48
   204  00086E  E7                 	db	231
   205  00086F  DB                 	db	219
   206  000870  2E                 	db	46
   207  000871  E5                 	db	229
   208  000872  3C                 	db	60
   209  000873  1E                 	db	30
   210  000874  42                 	db	66
   211  000875  A2                 	db	162
   212  000876  0D                 	db	13
   213  000877                     __end_of__npowers_:
   214                           	opt stack 0
   215  0000                     _TXREG	set	4013
   216  0000                     _RCSTA	set	4011
   217  0000                     _TXSTA	set	4012
   218  0000                     _SPBRG	set	4015
   219  0000                     _TRISB	set	3987
   220  0000                     _TRISC	set	3988
   221  0000                     _LATB	set	3978
   222  0000                     _RCSTAbits	set	4011
   223  0000                     _RCREG	set	4014
   224  0000                     _ADCON0bits	set	4034
   225  0000                     _ADCON0	set	4034
   226  0000                     _ADRESL	set	4035
   227  0000                     _ADRESH	set	4036
   228  0000                     _ADCON2	set	4032
   229  0000                     _ADCON1	set	4033
   230  0000                     _TRISA	set	3986
   231  0000                     _PIE1bits	set	3997
   232  0000                     _INTCONbits	set	4082
   233  0000                     _OSCCON	set	4051
   234  0000                     _TXIF	set	31988
   235  0000                     _TRISC7	set	31911
   236  0000                     _TRISC6	set	31910
   237  0000                     _LATC2	set	31834
   238  0000                     _LATC1	set	31833
   239  0000                     _LATC0	set	31832
   240  0000                     _CREN	set	32092
   241  0000                     _GIE	set	32663
   242  0000                     _RCIF	set	31989
   243  0000                     _GO	set	32273
   244  0000                     _ADON	set	32272
   245  000877                     STR_2:
   246  000877  55                 	db	85	;'U'
   247  000878  54                 	db	84	;'T'
   248  000879  43                 	db	67	;'C'
   249  00087A  20                 	db	32
   250  00087B  54                 	db	84	;'T'
   251  00087C  69                 	db	105	;'i'
   252  00087D  6D                 	db	109	;'m'
   253  00087E  65                 	db	101	;'e'
   254  00087F  3A                 	db	58	;':'
   255  000880  20                 	db	32
   256  000881  00                 	db	0
   257  000882                     STR_14:
   258  000882  25                 	db	37
   259  000883  64                 	db	100	;'d'
   260  000884  3A                 	db	58	;':'
   261  000885  25                 	db	37
   262  000886  64                 	db	100	;'d'
   263  000887  3A                 	db	58	;':'
   264  000888  25                 	db	37
   265  000889  64                 	db	100	;'d'
   266  00088A  00                 	db	0
   267  00088B                     STR_1:
   268  00088B  25                 	db	37
   269  00088C  64                 	db	100	;'d'
   270  00088D  25                 	db	37
   271  00088E  63                 	db	99	;'c'
   272  00088F  43                 	db	67	;'C'
   273  000890  20                 	db	32
   274  000891  20                 	db	32
   275  000892  00                 	db	0
   276  000893                     STR_8:
   277  000893  4C                 	db	76	;'L'
   278  000894  6F                 	db	111	;'o'
   279  000895  6E                 	db	110	;'n'
   280  000896  67                 	db	103	;'g'
   281  000897  3A                 	db	58	;':'
   282  000898  20                 	db	32
   283  000899  00                 	db	0
   284  00089A                     STR_5:
   285  00089A  4C                 	db	76	;'L'
   286  00089B  61                 	db	97	;'a'
   287  00089C  74                 	db	116	;'t'
   288  00089D  3A                 	db	58	;':'
   289  00089E  20                 	db	32
   290  00089F  00                 	db	0
   291  0008A0                     STR_11:
   292  0008A0  41                 	db	65	;'A'
   293  0008A1  6C                 	db	108	;'l'
   294  0008A2  74                 	db	116	;'t'
   295  0008A3  3A                 	db	58	;':'
   296  0008A4  20                 	db	32
   297  0008A5  00                 	db	0
   298  0008A6                     STR_6:
   299  0008A6  25                 	db	37
   300  0008A7  2E                 	db	46
   301  0008A8  30                 	db	48	;'0'
   302  0008A9  35                 	db	53	;'5'
   303  0008AA  66                 	db	102	;'f'
   304  0008AB  00                 	db	0
   305  0008AC                     STR_12:
   306  0008AC  25                 	db	37
   307  0008AD  2E                 	db	46
   308  0008AE  32                 	db	50	;'2'
   309  0008AF  66                 	db	102	;'f'
   310  0008B0  00                 	db	0
   311  0008B1                     STR_13:
   312  0008B1  0D                 	db	13
   313  0008B2  0A                 	db	10
   314  0008B3  00                 	db	0
   315  0008B4                     STR_4:
   316  0008B4  2C                 	db	44
   317  0008B5  00                 	db	0
   318  0008B6  00                 	db	0	; dummy byte at the end
   319  0000                     
   320                           ; #config settings
   321                           
   322                           	psect	cinit
   323  003526                     __pcinit:
   324                           	opt stack 0
   325  003526                     start_initialization:
   326                           	opt stack 0
   327  003526                     __initialization:
   328                           	opt stack 0
   329                           
   330                           ; Clear objects allocated to BANK1 (130 bytes)
   331  003526  EE01  F000         	lfsr	0,__pbssBANK1
   332  00352A  0E82               	movlw	130
   333  00352C                     clear_0:
   334  00352C  6AEE               	clrf	postinc0,c
   335  00352E  06E8               	decf	wreg,f,c
   336  003530  E1FD               	bnz	clear_0
   337                           
   338                           ; Clear objects allocated to BANK0 (49 bytes)
   339  003532  EE00  F0C0         	lfsr	0,__pbssBANK0
   340  003536  0E31               	movlw	49
   341  003538                     clear_1:
   342  003538  6AEE               	clrf	postinc0,c
   343  00353A  06E8               	decf	wreg,f,c
   344  00353C  E1FD               	bnz	clear_1
   345                           
   346                           ; Clear objects allocated to COMRAM (10 bytes)
   347  00353E  EE00  F046         	lfsr	0,__pbssCOMRAM
   348  003542  0E0A               	movlw	10
   349  003544                     clear_2:
   350  003544  6AEE               	clrf	postinc0,c
   351  003546  06E8               	decf	wreg,f,c
   352  003548  E1FD               	bnz	clear_2
   353  00354A                     end_of_initialization:
   354                           	opt stack 0
   355  00354A                     __end_of__initialization:
   356                           	opt stack 0
   357  00354A  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   358  00354C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   359  00354E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   360  003550  6EF8               	movwf	tblptru,c
   361  003552  0100               	movlb	0
   362  003554  EF1B  F00D         	goto	_main	;jump to C main() function
   363                           tblptru	equ	0xFF8
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           
   367                           	psect	bssCOMRAM
   368  000046                     __pbssCOMRAM:
   369                           	opt stack 0
   370  000046                     _GGA_CODE:
   371                           	opt stack 0
   372  000046                     	ds	3
   373  000049                     _GGA_Index:
   374                           	opt stack 0
   375  000049                     	ds	2
   376  00004B                     _IsLastEndGGA:
   377                           	opt stack 0
   378  00004B                     	ds	1
   379  00004C                     _IsEndGGA:
   380                           	opt stack 0
   381  00004C                     	ds	1
   382  00004D                     _CommaCounter:
   383                           	opt stack 0
   384  00004D                     	ds	1
   385  00004E                     _E_W:
   386                           	opt stack 0
   387  00004E                     	ds	1
   388  00004F                     _N_S:
   389                           	opt stack 0
   390  00004F                     	ds	1
   391                           tblptru	equ	0xFF8
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           
   395                           	psect	bssBANK0
   396  0000C0                     __pbssBANK0:
   397                           	opt stack 0
   398  0000C0                     _GGA_Pointers:
   399                           	opt stack 0
   400  0000C0                     	ds	20
   401  0000D4                     _celsius:
   402                           	opt stack 0
   403  0000D4                     	ds	3
   404  0000D7                     _IsItGGAString:
   405                           	opt stack 0
   406  0000D7                     	ds	1
   407  0000D8                     _Data_Buffer:
   408                           	opt stack 0
   409  0000D8                     	ds	15
   410  0000E7                     _Temperature:
   411                           	opt stack 0
   412  0000E7                     	ds	10
   413                           tblptru	equ	0xFF8
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           
   417                           	psect	bssBANK1
   418  000100                     __pbssBANK1:
   419                           	opt stack 0
   420  000100                     _GGA_Buffer:
   421                           	opt stack 0
   422  000100                     	ds	80
   423  000150                     _stringBT:
   424                           	opt stack 0
   425  000150                     	ds	50
   426                           tblptru	equ	0xFF8
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           
   430                           	psect	cstackBANK0
   431  000060                     __pcstackBANK0:
   432                           	opt stack 0
   433  000060                     ?_get_latitude:
   434                           	opt stack 0
   435  000060                     ?_get_longitude:
   436                           	opt stack 0
   437  000060                     ?_get_altitude:
   438                           	opt stack 0
   439  000060                     ___ftadd@sign:
   440                           	opt stack 0
   441  000060                     ___fttol@sign1:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x0
   445  000060                     	ds	1
   446  000061                     ___ftadd@exp2:
   447                           	opt stack 0
   448  000061                     ___fttol@lval:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x1
   452  000061                     	ds	1
   453  000062                     ___ftadd@exp1:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x2
   457  000062                     	ds	1
   458  000063                     ?___ftsub:
   459                           	opt stack 0
   460  000063                     ___ftsub@f1:
   461                           	opt stack 0
   462  000063                     get_altitude@Alt_Buffer:
   463                           	opt stack 0
   464  000063                     get_latitude@Lat_Buffer:
   465                           	opt stack 0
   466  000063                     get_longitude@Long_Buffer:
   467                           	opt stack 0
   468                           
   469                           ; 15 bytes @ 0x3
   470  000063                     	ds	2
   471  000065                     ___fttol@exp1:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x5
   475  000065                     	ds	1
   476  000066                     ?_convert_to_degrees:
   477                           	opt stack 0
   478  000066                     convert_to_degrees@NMEA_lat_long:
   479                           	opt stack 0
   480  000066                     ___ftsub@f2:
   481                           	opt stack 0
   482  000066                     USART_Init@baud_rate:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x6
   486  000066                     	ds	3
   487  000069                     ?_sprintf:
   488                           	opt stack 0
   489  000069                     sprintf@sp:
   490                           	opt stack 0
   491  000069                     convert_to_degrees@minutes:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x9
   495  000069                     	ds	1
   496  00006A                     USART_Init@temp:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0xA
   500  00006A                     	ds	1
   501  00006B                     sprintf@f:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0xB
   505  00006B                     	ds	1
   506  00006C                     convert_to_degrees@dec_deg:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0xC
   510  00006C                     	ds	3
   511  00006F                     convert_to_degrees@degrees:
   512                           	opt stack 0
   513  00006F                     get_altitude@_Altitude:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0xF
   517  00006F                     	ds	2
   518  000071                     convert_to_degrees@decimal:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x11
   522  000071                     	ds	1
   523  000072                     get_altitude@alt_pointer:
   524                           	opt stack 0
   525  000072                     get_latitude@_latitude:
   526                           	opt stack 0
   527  000072                     get_longitude@_longitude:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x12
   531  000072                     	ds	1
   532  000073                     ??_sprintf:
   533  000073                     get_altitude@alt_index:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x13
   537  000073                     	ds	1
   538  000074                     get_altitude@index:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x14
   542  000074                     	ds	1
   543  000075                     get_latitude@lat_pointer:
   544                           	opt stack 0
   545  000075                     get_longitude@long_pointer:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x15
   549  000075                     	ds	1
   550  000076                     get_latitude@index:
   551                           	opt stack 0
   552  000076                     get_longitude@index:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x16
   556  000076                     	ds	1
   557  000077                     get_latitude@lat_index:
   558                           	opt stack 0
   559  000077                     get_longitude@long_index:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x17
   563  000077                     	ds	2
   564  000079                     _sprintf$1188:
   565                           	opt stack 0
   566                           
   567                           ; 3 bytes @ 0x19
   568  000079                     	ds	3
   569  00007C                     sprintf@cp:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x1C
   573  00007C                     	ds	2
   574  00007E                     sprintf@len:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x1E
   578  00007E                     	ds	2
   579  000080                     sprintf@ap:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x20
   583  000080                     	ds	2
   584  000082                     sprintf@flag:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x22
   588  000082                     	ds	2
   589  000084                     sprintf@exp:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x24
   593  000084                     	ds	2
   594  000086                     sprintf@tmpval:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x26
   598  000086                     	ds	4
   599  00008A                     sprintf@val:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x2A
   603  00008A                     	ds	4
   604  00008E                     sprintf@fval:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x2E
   608  00008E                     	ds	3
   609  000091                     sprintf@prec:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x31
   613  000091                     	ds	2
   614  000093                     sprintf@c:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x33
   618  000093                     	ds	1
   619  000094                     convert_time_to_UTC@UTC_Time:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x34
   623  000094                     	ds	4
   624  000098                     _convert_time_to_UTC$1184:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x38
   628  000098                     	ds	4
   629  00009C                     convert_time_to_UTC@hour:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x3C
   633  00009C                     	ds	2
   634  00009E                     convert_time_to_UTC@min:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x3E
   638  00009E                     	ds	2
   639  0000A0                     convert_time_to_UTC@sec:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x40
   643  0000A0                     	ds	2
   644  0000A2                     main@GPS_Buffer:
   645                           	opt stack 0
   646                           
   647                           ; 15 bytes @ 0x42
   648  0000A2                     	ds	15
   649  0000B1                     main@Time:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x51
   653  0000B1                     	ds	4
   654  0000B5                     main@Altitude:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x55
   658  0000B5                     	ds	3
   659  0000B8                     _main$1183:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x58
   663  0000B8                     	ds	2
   664  0000BA                     main@Latitude:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x5A
   668  0000BA                     	ds	3
   669  0000BD                     main@Longitude:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x5D
   673  0000BD                     	ds	3
   674                           tblptru	equ	0xFF8
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           
   678                           	psect	cstackCOMRAM
   679  000001                     __pcstackCOMRAM:
   680                           	opt stack 0
   681  000001                     ??_Serial_ISR:
   682  000001                     
   683                           ; 1 bytes @ 0x0
   684  000001                     	ds	14
   685  00000F                     Serial_ISR@received_char:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0xE
   689  00000F                     	ds	1
   690  000010                     ??_isdigit:
   691  000010                     ??_isspace:
   692  000010                     ?_ADC_Read:
   693                           	opt stack 0
   694  000010                     ?___awmod:
   695                           	opt stack 0
   696  000010                     ?___ftpack:
   697                           	opt stack 0
   698  000010                     ?__tdiv_to_l_:
   699                           	opt stack 0
   700  000010                     ?__div_to_l_:
   701                           	opt stack 0
   702  000010                     ?___lmul:
   703                           	opt stack 0
   704  000010                     ?___llmod:
   705                           	opt stack 0
   706  000010                     USART_TxChar@out:
   707                           	opt stack 0
   708  000010                     ADC_Read@channel:
   709                           	opt stack 0
   710  000010                     MSdelay@val:
   711                           	opt stack 0
   712  000010                     ___awmod@dividend:
   713                           	opt stack 0
   714  000010                     memset@p1:
   715                           	opt stack 0
   716  000010                     strcat@to:
   717                           	opt stack 0
   718  000010                     strcpy@to:
   719                           	opt stack 0
   720  000010                     __div_to_l_@f1:
   721                           	opt stack 0
   722  000010                     ___ftpack@arg:
   723                           	opt stack 0
   724  000010                     __tdiv_to_l_@f1:
   725                           	opt stack 0
   726  000010                     ___ftge@ff1:
   727                           	opt stack 0
   728  000010                     ___lmul@multiplier:
   729                           	opt stack 0
   730  000010                     ___llmod@dividend:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0xF
   734  000010                     	ds	1
   735  000011                     _isdigit$833:
   736                           	opt stack 0
   737  000011                     _isspace$836:
   738                           	opt stack 0
   739  000011                     USART_SendString@out:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x10
   743  000011                     	ds	1
   744  000012                     ??_ADC_Read:
   745  000012                     isdigit@c:
   746                           	opt stack 0
   747  000012                     isspace@c:
   748                           	opt stack 0
   749  000012                     MSdelay@i:
   750                           	opt stack 0
   751  000012                     ___awmod@divisor:
   752                           	opt stack 0
   753  000012                     memset@c:
   754                           	opt stack 0
   755  000012                     strcat@from:
   756                           	opt stack 0
   757  000012                     strcpy@from:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x11
   761  000012                     	ds	1
   762  000013                     ___ftpack@exp:
   763                           	opt stack 0
   764  000013                     __div_to_l_@f2:
   765                           	opt stack 0
   766  000013                     __tdiv_to_l_@f2:
   767                           	opt stack 0
   768  000013                     ___ftge@ff2:
   769                           	opt stack 0
   770                           
   771                           ; 3 bytes @ 0x12
   772  000013                     	ds	1
   773  000014                     ___awmod@counter:
   774                           	opt stack 0
   775  000014                     ___ftpack@sign:
   776                           	opt stack 0
   777  000014                     MSdelay@j:
   778                           	opt stack 0
   779  000014                     memset@n:
   780                           	opt stack 0
   781  000014                     strcat@cp:
   782                           	opt stack 0
   783  000014                     strcpy@cp:
   784                           	opt stack 0
   785  000014                     ___lmul@multiplicand:
   786                           	opt stack 0
   787  000014                     ___llmod@divisor:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x13
   791  000014                     	ds	1
   792  000015                     ??___ftpack:
   793  000015                     ___awmod@sign:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x14
   797  000015                     	ds	1
   798  000016                     ??__tdiv_to_l_:
   799  000016                     ??___ftge:
   800  000016                     ?___awdiv:
   801                           	opt stack 0
   802  000016                     LCD_Command@cmd:
   803                           	opt stack 0
   804  000016                     LCD_Char@char_data:
   805                           	opt stack 0
   806  000016                     ADC_Read@digital:
   807                           	opt stack 0
   808  000016                     ___awdiv@dividend:
   809                           	opt stack 0
   810  000016                     memset@p:
   811                           	opt stack 0
   812  000016                     __div_to_l_@quot:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x15
   816  000016                     	ds	1
   817  000017                     LCD_String@str:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x16
   821  000017                     	ds	1
   822  000018                     ?___altoft:
   823                           	opt stack 0
   824  000018                     ?___awtoft:
   825                           	opt stack 0
   826  000018                     ?___lltoft:
   827                           	opt stack 0
   828  000018                     ___llmod@counter:
   829                           	opt stack 0
   830  000018                     ___awdiv@divisor:
   831                           	opt stack 0
   832  000018                     ___awtoft@c:
   833                           	opt stack 0
   834  000018                     ___lmul@product:
   835                           	opt stack 0
   836  000018                     ___altoft@c:
   837                           	opt stack 0
   838  000018                     ___lltoft@c:
   839                           	opt stack 0
   840                           
   841                           ; 4 bytes @ 0x17
   842  000018                     	ds	1
   843  000019                     ?___lldiv:
   844                           	opt stack 0
   845  000019                     LCD_String_xy@pos:
   846                           	opt stack 0
   847  000019                     __tdiv_to_l_@quot:
   848                           	opt stack 0
   849  000019                     ___lldiv@dividend:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x18
   853  000019                     	ds	1
   854  00001A                     ___awdiv@counter:
   855                           	opt stack 0
   856  00001A                     __div_to_l_@cntr:
   857                           	opt stack 0
   858  00001A                     LCD_String_xy@str:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x19
   862  00001A                     	ds	1
   863  00001B                     ___awdiv@sign:
   864                           	opt stack 0
   865  00001B                     ___awtoft@sign:
   866                           	opt stack 0
   867  00001B                     __div_to_l_@exp1:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x1A
   871  00001B                     	ds	1
   872  00001C                     ??___altoft:
   873  00001C                     ??___lltoft:
   874  00001C                     ?_atol:
   875                           	opt stack 0
   876  00001C                     LCD_String_xy@row:
   877                           	opt stack 0
   878  00001C                     atol@s:
   879                           	opt stack 0
   880  00001C                     ___awdiv@quotient:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x1B
   884  00001C                     	ds	1
   885  00001D                     __tdiv_to_l_@cntr:
   886                           	opt stack 0
   887  00001D                     ___lldiv@divisor:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0x1C
   891  00001D                     	ds	1
   892  00001E                     ?___wmul:
   893                           	opt stack 0
   894  00001E                     __tdiv_to_l_@exp1:
   895                           	opt stack 0
   896  00001E                     ___wmul@multiplier:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x1D
   900  00001E                     	ds	2
   901  000020                     ??_atol:
   902  000020                     ___altoft@exp:
   903                           	opt stack 0
   904  000020                     ___lltoft@exp:
   905                           	opt stack 0
   906  000020                     ___wmul@multiplicand:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x1F
   910  000020                     	ds	1
   911  000021                     ___altoft@sign:
   912                           	opt stack 0
   913  000021                     ___lldiv@quotient:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x20
   917  000021                     	ds	1
   918  000022                     ?___ftdiv:
   919                           	opt stack 0
   920  000022                     ___wmul@product:
   921                           	opt stack 0
   922  000022                     ___ftdiv@f1:
   923                           	opt stack 0
   924                           
   925                           ; 3 bytes @ 0x21
   926  000022                     	ds	2
   927  000024                     ?___ftmul:
   928                           	opt stack 0
   929  000024                     atol@sign:
   930                           	opt stack 0
   931  000024                     ___ftmul@f1:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x23
   935  000024                     	ds	1
   936  000025                     ___lldiv@counter:
   937                           	opt stack 0
   938  000025                     ___ftdiv@f2:
   939                           	opt stack 0
   940  000025                     atol@a:
   941                           	opt stack 0
   942                           
   943                           ; 4 bytes @ 0x24
   944  000025                     	ds	2
   945  000027                     ___ftmul@f2:
   946                           	opt stack 0
   947                           
   948                           ; 3 bytes @ 0x26
   949  000027                     	ds	1
   950  000028                     ??___ftdiv:
   951                           
   952                           ; 1 bytes @ 0x27
   953  000028                     	ds	1
   954  000029                     atol@c:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x28
   958  000029                     	ds	1
   959  00002A                     ??___ftmul:
   960  00002A                     ?_get_gpstime:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0x29
   964  00002A                     	ds	1
   965  00002B                     ___ftdiv@cntr:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x2A
   969  00002B                     	ds	1
   970  00002C                     ___ftdiv@f3:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x2B
   974  00002C                     	ds	1
   975  00002D                     ___ftmul@exp:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x2C
   979  00002D                     	ds	1
   980  00002E                     ___ftmul@f3_as_product:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x2D
   984  00002E                     	ds	1
   985  00002F                     ___ftdiv@exp:
   986                           	opt stack 0
   987  00002F                     get_gpstime@Time_Buffer:
   988                           	opt stack 0
   989                           
   990                           ; 15 bytes @ 0x2E
   991  00002F                     	ds	1
   992  000030                     ___ftdiv@sign:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x2F
   996  000030                     	ds	1
   997  000031                     ___ftmul@cntr:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x30
  1001  000031                     	ds	1
  1002  000032                     ___ftmul@sign:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x31
  1006  000032                     	ds	1
  1007  000033                     ?_fround:
  1008                           	opt stack 0
  1009  000033                     ?_scale:
  1010                           	opt stack 0
  1011  000033                     ?___ftneg:
  1012                           	opt stack 0
  1013  000033                     ___ftneg@f1:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x32
  1017  000033                     	ds	3
  1018  000036                     ?_strtod:
  1019                           	opt stack 0
  1020  000036                     strtod@s:
  1021                           	opt stack 0
  1022  000036                     _fround$1186:
  1023                           	opt stack 0
  1024  000036                     _scale$1187:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x35
  1028  000036                     	ds	2
  1029  000038                     strtod@res:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x37
  1033  000038                     	ds	1
  1034  000039                     scale@scl:
  1035                           	opt stack 0
  1036  000039                     _fround$1185:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x38
  1040  000039                     	ds	1
  1041  00003A                     ??_strtod:
  1042  00003A                     ?___fttol:
  1043                           	opt stack 0
  1044  00003A                     ___fttol@f1:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x39
  1048  00003A                     	ds	1
  1049  00003B                     strtod@eexp:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x3A
  1053  00003B                     	ds	1
  1054  00003C                     fround@prec:
  1055                           	opt stack 0
  1056  00003C                     strtod@flags:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x3B
  1060  00003C                     	ds	1
  1061  00003D                     ?___ftadd:
  1062                           	opt stack 0
  1063  00003D                     strtod@expon:
  1064                           	opt stack 0
  1065  00003D                     ___ftadd@f1:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x3C
  1069  00003D                     	ds	1
  1070  00003E                     ??___fttol:
  1071  00003E                     get_gpstime@_Time:
  1072                           	opt stack 0
  1073  00003E                     strtod@_u:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x3D
  1077  00003E                     	ds	2
  1078  000040                     ___ftadd@f2:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x3F
  1082  000040                     	ds	2
  1083  000042                     ?_atof:
  1084                           	opt stack 0
  1085  000042                     get_gpstime@index:
  1086                           	opt stack 0
  1087  000042                     atof@s:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x41
  1091  000042                     	ds	1
  1092  000043                     ??___ftadd:
  1093                           
  1094                           ; 1 bytes @ 0x42
  1095  000043                     	ds	2
  1096  000045                     
  1097                           ; 1 bytes @ 0x44
  1098  000045                     	ds	1
  1099  000046                     tblptru	equ	0xFF8
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           
  1103                           ; 1 bytes @ 0x45
  1104 ;;
  1105 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1106 ;;
  1107 ;; *************** function _main *****************
  1108 ;; Defined at:
  1109 ;;		line 43 in file "GPS.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  GPS_Buffer     15   66[BANK0 ] unsigned char [15]
  1114 ;;  Time            4   81[BANK0 ] unsigned long 
  1115 ;;  Longitude       3   93[BANK0 ] float 
  1116 ;;  Latitude        3   90[BANK0 ] float 
  1117 ;;  Altitude        3   85[BANK0 ] float 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1127 ;;      Params:         0       0       0       0       0       0       0       0       0
  1128 ;;      Locals:         0      30       0       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1130 ;;      Totals:         0      30       0       0       0       0       0       0       0
  1131 ;;Total ram usage:       30 bytes
  1132 ;; Hardware stack levels required when called:    6
  1133 ;; This function calls:
  1134 ;;		_ADC_Init
  1135 ;;		_ADC_Read
  1136 ;;		_LCD_Init
  1137 ;;		_LCD_String
  1138 ;;		_LCD_String_xy
  1139 ;;		_USART_Init
  1140 ;;		_USART_SendString
  1141 ;;		___awtoft
  1142 ;;		___ftdiv
  1143 ;;		___ftmul
  1144 ;;		___fttol
  1145 ;;		_convert_time_to_UTC
  1146 ;;		_convert_to_degrees
  1147 ;;		_get_altitude
  1148 ;;		_get_gpstime
  1149 ;;		_get_latitude
  1150 ;;		_get_longitude
  1151 ;;		_memset
  1152 ;;		_sprintf
  1153 ;;		_strcat
  1154 ;;		_strcpy
  1155 ;; This function is called by:
  1156 ;;		Startup code after reset
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text0
  1161  001A36                     __ptext0:
  1162                           	opt stack 0
  1163  001A36                     _main:
  1164                           	opt stack 25
  1165                           
  1166                           ;GPS.c: 44: unsigned long int Time;
  1167                           ;GPS.c: 45: float Latitude,Longitude,Altitude;
  1168                           ;GPS.c: 46: char GPS_Buffer[15];
  1169                           ;GPS.c: 48: OSCCON = 0x72;
  1170                           
  1171                           ;incstack = 0
  1172  001A36  0E72               	movlw	114
  1173  001A38  6ED3               	movwf	4051,c	;volatile
  1174                           
  1175                           ;GPS.c: 49: LCD_Init();
  1176  001A3A  EC3C  F01A         	call	_LCD_Init	;wreg free
  1177                           
  1178                           ;GPS.c: 50: INTCONbits.GIE=1;
  1179  001A3E  8EF2               	bsf	intcon,7,c	;volatile
  1180                           
  1181                           ;GPS.c: 51: INTCONbits.PEIE=1;
  1182  001A40  8CF2               	bsf	intcon,6,c	;volatile
  1183                           
  1184                           ;GPS.c: 52: PIE1bits.RCIE=1;
  1185  001A42  8A9D               	bsf	3997,5,c	;volatile
  1186                           
  1187                           ;GPS.c: 53: USART_Init(9600);
  1188  001A44  0E80               	movlw	128
  1189  001A46  0100               	movlb	0	; () banked
  1190  001A48  6F66               	movwf	USART_Init@baud_rate& (0+255),b
  1191  001A4A  0E25               	movlw	37
  1192  001A4C  6F67               	movwf	(USART_Init@baud_rate+1)& (0+255),b
  1193  001A4E  0E00               	movlw	0
  1194  001A50  6F68               	movwf	(USART_Init@baud_rate+2)& (0+255),b
  1195  001A52  0E00               	movlw	0
  1196  001A54  6F69               	movwf	(USART_Init@baud_rate+3)& (0+255),b
  1197  001A56  ECE0  F017         	call	_USART_Init	;wreg free
  1198                           
  1199                           ;GPS.c: 54: ADC_Init();
  1200  001A5A  EC61  F01B         	call	_ADC_Init	;wreg free
  1201  001A5E                     l5009:
  1202                           
  1203                           ;GPS.c: 105: celsius = (ADC_Read(0)*4.88);
  1204  001A5E  0E00               	movlw	0
  1205  001A60  6E11               	movwf	ADC_Read@channel+1,c
  1206  001A62  0E00               	movlw	0
  1207  001A64  6E10               	movwf	ADC_Read@channel,c
  1208  001A66  EC1D  F018         	call	_ADC_Read	;wreg free
  1209  001A6A  C010  F018         	movff	?_ADC_Read,___awtoft@c
  1210  001A6E  C011  F019         	movff	?_ADC_Read+1,___awtoft@c+1
  1211  001A72  EC5C  F01A         	call	___awtoft	;wreg free
  1212  001A76  C018  F024         	movff	?___awtoft,___ftmul@f1
  1213  001A7A  C019  F025         	movff	?___awtoft+1,___ftmul@f1+1
  1214  001A7E  C01A  F026         	movff	?___awtoft+2,___ftmul@f1+2
  1215  001A82  0E29               	movlw	41
  1216  001A84  6E27               	movwf	___ftmul@f2,c
  1217  001A86  0E9C               	movlw	156
  1218  001A88  6E28               	movwf	___ftmul@f2+1,c
  1219  001A8A  0E40               	movlw	64
  1220  001A8C  6E29               	movwf	___ftmul@f2+2,c
  1221  001A8E  ECF1  F014         	call	___ftmul	;wreg free
  1222  001A92  C024  F0D4         	movff	?___ftmul,_celsius
  1223  001A96  C025  F0D5         	movff	?___ftmul+1,_celsius+1
  1224  001A9A  C026  F0D6         	movff	?___ftmul+2,_celsius+2
  1225                           
  1226                           ;GPS.c: 106: celsius = (celsius/10.00);
  1227  001A9E  C0D4  F022         	movff	_celsius,___ftdiv@f1
  1228  001AA2  C0D5  F023         	movff	_celsius+1,___ftdiv@f1+1
  1229  001AA6  C0D6  F024         	movff	_celsius+2,___ftdiv@f1+2
  1230  001AAA  0E00               	movlw	0
  1231  001AAC  6E25               	movwf	___ftdiv@f2,c
  1232  001AAE  0E20               	movlw	32
  1233  001AB0  6E26               	movwf	___ftdiv@f2+1,c
  1234  001AB2  0E41               	movlw	65
  1235  001AB4  6E27               	movwf	___ftdiv@f2+2,c
  1236  001AB6  EC6B  F015         	call	___ftdiv	;wreg free
  1237  001ABA  C022  F0D4         	movff	?___ftdiv,_celsius
  1238  001ABE  C023  F0D5         	movff	?___ftdiv+1,_celsius+1
  1239  001AC2  C024  F0D6         	movff	?___ftdiv+2,_celsius+2
  1240                           
  1241                           ;GPS.c: 108: sprintf(Temperature,"%d%cC  ",(int)celsius,0xdf);
  1242  001AC6  C0D4  F03A         	movff	_celsius,___fttol@f1
  1243  001ACA  C0D5  F03B         	movff	_celsius+1,___fttol@f1+1
  1244  001ACE  C0D6  F03C         	movff	_celsius+2,___fttol@f1+2
  1245  001AD2  EC5E  F013         	call	___fttol	;wreg free
  1246  001AD6  C03A  F0B8         	movff	?___fttol,_main$1183
  1247  001ADA  C03B  F0B9         	movff	?___fttol+1,_main$1183+1
  1248                           
  1249                           ;GPS.c: 108: sprintf(Temperature,"%d%cC  ",(int)celsius,0xdf);
  1250  001ADE  0EE7               	movlw	low _Temperature
  1251  001AE0  0100               	movlb	0	; () banked
  1252  001AE2  6F69               	movwf	sprintf@sp& (0+255),b
  1253  001AE4  0E00               	movlw	high _Temperature
  1254  001AE6  0100               	movlb	0	; () banked
  1255  001AE8  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1256  001AEA  0E8B               	movlw	low STR_1
  1257  001AEC  0100               	movlb	0	; () banked
  1258  001AEE  6F6B               	movwf	sprintf@f& (0+255),b
  1259  001AF0  0E08               	movlw	high STR_1
  1260  001AF2  0100               	movlb	0	; () banked
  1261  001AF4  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1262  001AF6  C0B8  F06D         	movff	_main$1183,?_sprintf+4
  1263  001AFA  C0B9  F06E         	movff	_main$1183+1,?_sprintf+5
  1264  001AFE  0E00               	movlw	0
  1265  001B00  0100               	movlb	0	; () banked
  1266  001B02  6F70               	movwf	(?_sprintf+7)& (0+255),b
  1267  001B04  0EDF               	movlw	223
  1268  001B06  6F6F               	movwf	(?_sprintf+6)& (0+255),b
  1269  001B08  EC5C  F004         	call	_sprintf	;wreg free
  1270                           
  1271                           ;GPS.c: 110: if(IsItGGAString == 0){
  1272  001B0C  0100               	movlb	0	; () banked
  1273  001B0E  51D7               	movf	_IsItGGAString& (0+255),w,b	;volatile
  1274  001B10  B4D8               	btfsc	status,2,c
  1275  001B12  D7A5               	goto	l5009
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;GPS.c: 115: else{
  1279                           ;GPS.c: 117: memset(GPS_Buffer,0,15);
  1280                           
  1281                           ; BSR set to: 0
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;GPS.c: 114: }
  1285  001B14  0EA2               	movlw	low main@GPS_Buffer
  1286  001B16  6E10               	movwf	memset@p1,c
  1287  001B18  0E00               	movlw	high main@GPS_Buffer
  1288  001B1A  6E11               	movwf	memset@p1+1,c
  1289  001B1C  0E00               	movlw	0
  1290  001B1E  6E13               	movwf	memset@c+1,c
  1291  001B20  0E00               	movlw	0
  1292  001B22  6E12               	movwf	memset@c,c
  1293  001B24  0E00               	movlw	0
  1294  001B26  6E15               	movwf	memset@n+1,c
  1295  001B28  0E0F               	movlw	15
  1296  001B2A  6E14               	movwf	memset@n,c
  1297  001B2C  ECC3  F01A         	call	_memset	;wreg free
  1298                           
  1299                           ;GPS.c: 118: LCD_String_xy(1,0,"UTC Time: ");
  1300  001B30  0E00               	movlw	0
  1301  001B32  6E19               	movwf	LCD_String_xy@pos,c
  1302  001B34  0E77               	movlw	low STR_2
  1303  001B36  6E1A               	movwf	LCD_String_xy@str,c
  1304  001B38  0E08               	movlw	high STR_2
  1305  001B3A  6E1B               	movwf	LCD_String_xy@str+1,c
  1306  001B3C  0E01               	movlw	1
  1307  001B3E  EC68  F019         	call	_LCD_String_xy
  1308                           
  1309                           ;GPS.c: 119: Time = get_gpstime();
  1310  001B42  EC96  F018         	call	_get_gpstime	;wreg free
  1311  001B46  C02A  F0B1         	movff	?_get_gpstime,main@Time
  1312  001B4A  C02B  F0B2         	movff	?_get_gpstime+1,main@Time+1
  1313  001B4E  C02C  F0B3         	movff	?_get_gpstime+2,main@Time+2
  1314  001B52  C02D  F0B4         	movff	?_get_gpstime+3,main@Time+3
  1315                           
  1316                           ;GPS.c: 120: convert_time_to_UTC(Time);
  1317  001B56  C0B1  F094         	movff	main@Time,convert_time_to_UTC@UTC_Time
  1318  001B5A  C0B2  F095         	movff	main@Time+1,convert_time_to_UTC@UTC_Time+1
  1319  001B5E  C0B3  F096         	movff	main@Time+2,convert_time_to_UTC@UTC_Time+2
  1320  001B62  C0B4  F097         	movff	main@Time+3,convert_time_to_UTC@UTC_Time+3
  1321  001B66  ECEC  F013         	call	_convert_time_to_UTC	;wreg free
  1322                           
  1323                           ;GPS.c: 121: LCD_String(Data_Buffer);
  1324  001B6A  0ED8               	movlw	low _Data_Buffer
  1325  001B6C  6E17               	movwf	LCD_String@str,c
  1326  001B6E  0E00               	movlw	high _Data_Buffer
  1327  001B70  6E18               	movwf	LCD_String@str+1,c
  1328  001B72  ECED  F019         	call	_LCD_String	;wreg free
  1329                           
  1330                           ;GPS.c: 122: LCD_String("  ");
  1331  001B76  0E90               	movlw	low (STR_1+5)
  1332  001B78  6E17               	movwf	LCD_String@str,c
  1333  001B7A  0E08               	movlw	high (STR_1+5)
  1334  001B7C  6E18               	movwf	LCD_String@str+1,c
  1335  001B7E  ECED  F019         	call	_LCD_String	;wreg free
  1336                           
  1337                           ;GPS.c: 124: strcpy(stringBT, Data_Buffer);
  1338  001B82  0E50               	movlw	low _stringBT
  1339  001B84  6E10               	movwf	strcpy@to,c
  1340  001B86  0E01               	movlw	high _stringBT
  1341  001B88  6E11               	movwf	strcpy@to+1,c
  1342  001B8A  0ED8               	movlw	low _Data_Buffer
  1343  001B8C  6E12               	movwf	strcpy@from,c
  1344  001B8E  0E00               	movlw	high _Data_Buffer
  1345  001B90  6E13               	movwf	strcpy@from+1,c
  1346  001B92  ECAC  F01A         	call	_strcpy	;wreg free
  1347                           
  1348                           ;GPS.c: 125: strcat(stringBT, ",");
  1349  001B96  0E50               	movlw	low _stringBT
  1350  001B98  6E10               	movwf	strcat@to,c
  1351  001B9A  0E01               	movlw	high _stringBT
  1352  001B9C  6E11               	movwf	strcat@to+1,c
  1353  001B9E  0EB4               	movlw	low STR_4
  1354  001BA0  6E12               	movwf	strcat@from,c
  1355  001BA2  0E08               	movlw	high STR_4
  1356  001BA4  6E13               	movwf	strcat@from+1,c
  1357  001BA6  EC96  F019         	call	_strcat	;wreg free
  1358                           
  1359                           ;GPS.c: 127: LCD_String_xy(2,0,"Lat: ");
  1360  001BAA  0E00               	movlw	0
  1361  001BAC  6E19               	movwf	LCD_String_xy@pos,c
  1362  001BAE  0E9A               	movlw	low STR_5
  1363  001BB0  6E1A               	movwf	LCD_String_xy@str,c
  1364  001BB2  0E08               	movlw	high STR_5
  1365  001BB4  6E1B               	movwf	LCD_String_xy@str+1,c
  1366  001BB6  0E02               	movlw	2
  1367  001BB8  EC68  F019         	call	_LCD_String_xy
  1368                           
  1369                           ;GPS.c: 128: Latitude = get_latitude(GGA_Pointers[0]);
  1370  001BBC  0100               	movlb	0	; () banked
  1371  001BBE  51C0               	movf	_GGA_Pointers& (0+255),w,b
  1372  001BC0  EC84  F016         	call	_get_latitude
  1373  001BC4  C060  F0BA         	movff	?_get_latitude,main@Latitude
  1374  001BC8  C061  F0BB         	movff	?_get_latitude+1,main@Latitude+1
  1375  001BCC  C062  F0BC         	movff	?_get_latitude+2,main@Latitude+2
  1376                           
  1377                           ;GPS.c: 129: Latitude = convert_to_degrees(Latitude);
  1378  001BD0  C0BA  F066         	movff	main@Latitude,convert_to_degrees@NMEA_lat_long
  1379  001BD4  C0BB  F067         	movff	main@Latitude+1,convert_to_degrees@NMEA_lat_long+1
  1380  001BD8  C0BC  F068         	movff	main@Latitude+2,convert_to_degrees@NMEA_lat_long+2
  1381  001BDC  EC96  F011         	call	_convert_to_degrees	;wreg free
  1382  001BE0  C066  F0BA         	movff	?_convert_to_degrees,main@Latitude
  1383  001BE4  C067  F0BB         	movff	?_convert_to_degrees+1,main@Latitude+1
  1384  001BE8  C068  F0BC         	movff	?_convert_to_degrees+2,main@Latitude+2
  1385                           
  1386                           ;GPS.c: 130: sprintf(GPS_Buffer,"%.05f",Latitude);
  1387  001BEC  0EA2               	movlw	low main@GPS_Buffer
  1388  001BEE  0100               	movlb	0	; () banked
  1389  001BF0  6F69               	movwf	sprintf@sp& (0+255),b
  1390  001BF2  0E00               	movlw	high main@GPS_Buffer
  1391  001BF4  0100               	movlb	0	; () banked
  1392  001BF6  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1393  001BF8  0EA6               	movlw	low STR_6
  1394  001BFA  0100               	movlb	0	; () banked
  1395  001BFC  6F6B               	movwf	sprintf@f& (0+255),b
  1396  001BFE  0E08               	movlw	high STR_6
  1397  001C00  0100               	movlb	0	; () banked
  1398  001C02  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1399  001C04  C0BA  F06D         	movff	main@Latitude,?_sprintf+4
  1400  001C08  C0BB  F06E         	movff	main@Latitude+1,?_sprintf+5
  1401  001C0C  C0BC  F06F         	movff	main@Latitude+2,?_sprintf+6
  1402  001C10  EC5C  F004         	call	_sprintf	;wreg free
  1403                           
  1404                           ;GPS.c: 131: LCD_String(GPS_Buffer);
  1405  001C14  0EA2               	movlw	low main@GPS_Buffer
  1406  001C16  6E17               	movwf	LCD_String@str,c
  1407  001C18  0E00               	movlw	high main@GPS_Buffer
  1408  001C1A  6E18               	movwf	LCD_String@str+1,c
  1409  001C1C  ECED  F019         	call	_LCD_String	;wreg free
  1410                           
  1411                           ;GPS.c: 132: strcat(stringBT, GPS_Buffer);
  1412  001C20  0E50               	movlw	low _stringBT
  1413  001C22  6E10               	movwf	strcat@to,c
  1414  001C24  0E01               	movlw	high _stringBT
  1415  001C26  6E11               	movwf	strcat@to+1,c
  1416  001C28  0EA2               	movlw	low main@GPS_Buffer
  1417  001C2A  6E12               	movwf	strcat@from,c
  1418  001C2C  0E00               	movlw	high main@GPS_Buffer
  1419  001C2E  6E13               	movwf	strcat@from+1,c
  1420  001C30  EC96  F019         	call	_strcat	;wreg free
  1421                           
  1422                           ;GPS.c: 133: strcat(stringBT, ",");
  1423  001C34  0E50               	movlw	low _stringBT
  1424  001C36  6E10               	movwf	strcat@to,c
  1425  001C38  0E01               	movlw	high _stringBT
  1426  001C3A  6E11               	movwf	strcat@to+1,c
  1427  001C3C  0EB4               	movlw	low STR_4
  1428  001C3E  6E12               	movwf	strcat@from,c
  1429  001C40  0E08               	movlw	high STR_4
  1430  001C42  6E13               	movwf	strcat@from+1,c
  1431  001C44  EC96  F019         	call	_strcat	;wreg free
  1432                           
  1433                           ;GPS.c: 135: memset(GPS_Buffer,0,15);
  1434  001C48  0EA2               	movlw	low main@GPS_Buffer
  1435  001C4A  6E10               	movwf	memset@p1,c
  1436  001C4C  0E00               	movlw	high main@GPS_Buffer
  1437  001C4E  6E11               	movwf	memset@p1+1,c
  1438  001C50  0E00               	movlw	0
  1439  001C52  6E13               	movwf	memset@c+1,c
  1440  001C54  0E00               	movlw	0
  1441  001C56  6E12               	movwf	memset@c,c
  1442  001C58  0E00               	movlw	0
  1443  001C5A  6E15               	movwf	memset@n+1,c
  1444  001C5C  0E0F               	movlw	15
  1445  001C5E  6E14               	movwf	memset@n,c
  1446  001C60  ECC3  F01A         	call	_memset	;wreg free
  1447                           
  1448                           ;GPS.c: 136: LCD_String_xy(3,0,"Long: ");
  1449  001C64  0E00               	movlw	0
  1450  001C66  6E19               	movwf	LCD_String_xy@pos,c
  1451  001C68  0E93               	movlw	low STR_8
  1452  001C6A  6E1A               	movwf	LCD_String_xy@str,c
  1453  001C6C  0E08               	movlw	high STR_8
  1454  001C6E  6E1B               	movwf	LCD_String_xy@str+1,c
  1455  001C70  0E03               	movlw	3
  1456  001C72  EC68  F019         	call	_LCD_String_xy
  1457                           
  1458                           ;GPS.c: 137: Longitude = get_longitude(GGA_Pointers[2]);
  1459  001C76  0100               	movlb	0	; () banked
  1460  001C78  51C2               	movf	(_GGA_Pointers+2)& (0+255),w,b
  1461  001C7A  EC35  F016         	call	_get_longitude
  1462  001C7E  C060  F0BD         	movff	?_get_longitude,main@Longitude
  1463  001C82  C061  F0BE         	movff	?_get_longitude+1,main@Longitude+1
  1464  001C86  C062  F0BF         	movff	?_get_longitude+2,main@Longitude+2
  1465                           
  1466                           ;GPS.c: 138: Longitude = convert_to_degrees(Longitude);
  1467  001C8A  C0BD  F066         	movff	main@Longitude,convert_to_degrees@NMEA_lat_long
  1468  001C8E  C0BE  F067         	movff	main@Longitude+1,convert_to_degrees@NMEA_lat_long+1
  1469  001C92  C0BF  F068         	movff	main@Longitude+2,convert_to_degrees@NMEA_lat_long+2
  1470  001C96  EC96  F011         	call	_convert_to_degrees	;wreg free
  1471  001C9A  C066  F0BD         	movff	?_convert_to_degrees,main@Longitude
  1472  001C9E  C067  F0BE         	movff	?_convert_to_degrees+1,main@Longitude+1
  1473  001CA2  C068  F0BF         	movff	?_convert_to_degrees+2,main@Longitude+2
  1474                           
  1475                           ;GPS.c: 139: sprintf(GPS_Buffer,"%.05f",Longitude);
  1476  001CA6  0EA2               	movlw	low main@GPS_Buffer
  1477  001CA8  0100               	movlb	0	; () banked
  1478  001CAA  6F69               	movwf	sprintf@sp& (0+255),b
  1479  001CAC  0E00               	movlw	high main@GPS_Buffer
  1480  001CAE  0100               	movlb	0	; () banked
  1481  001CB0  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1482  001CB2  0EA6               	movlw	low STR_6
  1483  001CB4  0100               	movlb	0	; () banked
  1484  001CB6  6F6B               	movwf	sprintf@f& (0+255),b
  1485  001CB8  0E08               	movlw	high STR_6
  1486  001CBA  0100               	movlb	0	; () banked
  1487  001CBC  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1488  001CBE  C0BD  F06D         	movff	main@Longitude,?_sprintf+4
  1489  001CC2  C0BE  F06E         	movff	main@Longitude+1,?_sprintf+5
  1490  001CC6  C0BF  F06F         	movff	main@Longitude+2,?_sprintf+6
  1491  001CCA  EC5C  F004         	call	_sprintf	;wreg free
  1492                           
  1493                           ;GPS.c: 140: LCD_String(GPS_Buffer);
  1494  001CCE  0EA2               	movlw	low main@GPS_Buffer
  1495  001CD0  6E17               	movwf	LCD_String@str,c
  1496  001CD2  0E00               	movlw	high main@GPS_Buffer
  1497  001CD4  6E18               	movwf	LCD_String@str+1,c
  1498  001CD6  ECED  F019         	call	_LCD_String	;wreg free
  1499                           
  1500                           ;GPS.c: 141: strcat(stringBT, GPS_Buffer);
  1501  001CDA  0E50               	movlw	low _stringBT
  1502  001CDC  6E10               	movwf	strcat@to,c
  1503  001CDE  0E01               	movlw	high _stringBT
  1504  001CE0  6E11               	movwf	strcat@to+1,c
  1505  001CE2  0EA2               	movlw	low main@GPS_Buffer
  1506  001CE4  6E12               	movwf	strcat@from,c
  1507  001CE6  0E00               	movlw	high main@GPS_Buffer
  1508  001CE8  6E13               	movwf	strcat@from+1,c
  1509  001CEA  EC96  F019         	call	_strcat	;wreg free
  1510                           
  1511                           ;GPS.c: 142: strcat(stringBT, ",");
  1512  001CEE  0E50               	movlw	low _stringBT
  1513  001CF0  6E10               	movwf	strcat@to,c
  1514  001CF2  0E01               	movlw	high _stringBT
  1515  001CF4  6E11               	movwf	strcat@to+1,c
  1516  001CF6  0EB4               	movlw	low STR_4
  1517  001CF8  6E12               	movwf	strcat@from,c
  1518  001CFA  0E08               	movlw	high STR_4
  1519  001CFC  6E13               	movwf	strcat@from+1,c
  1520  001CFE  EC96  F019         	call	_strcat	;wreg free
  1521                           
  1522                           ;GPS.c: 144: memset(GPS_Buffer,0,15);
  1523  001D02  0EA2               	movlw	low main@GPS_Buffer
  1524  001D04  6E10               	movwf	memset@p1,c
  1525  001D06  0E00               	movlw	high main@GPS_Buffer
  1526  001D08  6E11               	movwf	memset@p1+1,c
  1527  001D0A  0E00               	movlw	0
  1528  001D0C  6E13               	movwf	memset@c+1,c
  1529  001D0E  0E00               	movlw	0
  1530  001D10  6E12               	movwf	memset@c,c
  1531  001D12  0E00               	movlw	0
  1532  001D14  6E15               	movwf	memset@n+1,c
  1533  001D16  0E0F               	movlw	15
  1534  001D18  6E14               	movwf	memset@n,c
  1535  001D1A  ECC3  F01A         	call	_memset	;wreg free
  1536                           
  1537                           ;GPS.c: 145: LCD_String_xy(4,0,"Alt: ");
  1538  001D1E  0E00               	movlw	0
  1539  001D20  6E19               	movwf	LCD_String_xy@pos,c
  1540  001D22  0EA0               	movlw	low STR_11
  1541  001D24  6E1A               	movwf	LCD_String_xy@str,c
  1542  001D26  0E08               	movlw	high STR_11
  1543  001D28  6E1B               	movwf	LCD_String_xy@str+1,c
  1544  001D2A  0E04               	movlw	4
  1545  001D2C  EC68  F019         	call	_LCD_String_xy
  1546                           
  1547                           ;GPS.c: 146: Altitude = get_altitude(GGA_Pointers[7]);
  1548  001D30  0100               	movlb	0	; () banked
  1549  001D32  51C7               	movf	(_GGA_Pointers+7)& (0+255),w,b
  1550  001D34  EC1B  F017         	call	_get_altitude
  1551  001D38  C060  F0B5         	movff	?_get_altitude,main@Altitude
  1552  001D3C  C061  F0B6         	movff	?_get_altitude+1,main@Altitude+1
  1553  001D40  C062  F0B7         	movff	?_get_altitude+2,main@Altitude+2
  1554                           
  1555                           ;GPS.c: 147: sprintf(GPS_Buffer,"%.2f",Altitude);
  1556  001D44  0EA2               	movlw	low main@GPS_Buffer
  1557  001D46  0100               	movlb	0	; () banked
  1558  001D48  6F69               	movwf	sprintf@sp& (0+255),b
  1559  001D4A  0E00               	movlw	high main@GPS_Buffer
  1560  001D4C  0100               	movlb	0	; () banked
  1561  001D4E  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  1562  001D50  0EAC               	movlw	low STR_12
  1563  001D52  0100               	movlb	0	; () banked
  1564  001D54  6F6B               	movwf	sprintf@f& (0+255),b
  1565  001D56  0E08               	movlw	high STR_12
  1566  001D58  0100               	movlb	0	; () banked
  1567  001D5A  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  1568  001D5C  C0B5  F06D         	movff	main@Altitude,?_sprintf+4
  1569  001D60  C0B6  F06E         	movff	main@Altitude+1,?_sprintf+5
  1570  001D64  C0B7  F06F         	movff	main@Altitude+2,?_sprintf+6
  1571  001D68  EC5C  F004         	call	_sprintf	;wreg free
  1572                           
  1573                           ;GPS.c: 148: LCD_String(GPS_Buffer);
  1574  001D6C  0EA2               	movlw	low main@GPS_Buffer
  1575  001D6E  6E17               	movwf	LCD_String@str,c
  1576  001D70  0E00               	movlw	high main@GPS_Buffer
  1577  001D72  6E18               	movwf	LCD_String@str+1,c
  1578  001D74  ECED  F019         	call	_LCD_String	;wreg free
  1579                           
  1580                           ;GPS.c: 150: strcat(stringBT, Temperature);
  1581  001D78  0E50               	movlw	low _stringBT
  1582  001D7A  6E10               	movwf	strcat@to,c
  1583  001D7C  0E01               	movlw	high _stringBT
  1584  001D7E  6E11               	movwf	strcat@to+1,c
  1585  001D80  0EE7               	movlw	low _Temperature
  1586  001D82  6E12               	movwf	strcat@from,c
  1587  001D84  0E00               	movlw	high _Temperature
  1588  001D86  6E13               	movwf	strcat@from+1,c
  1589  001D88  EC96  F019         	call	_strcat	;wreg free
  1590                           
  1591                           ;GPS.c: 151: strcat(stringBT, "\r\n");
  1592  001D8C  0E50               	movlw	low _stringBT
  1593  001D8E  6E10               	movwf	strcat@to,c
  1594  001D90  0E01               	movlw	high _stringBT
  1595  001D92  6E11               	movwf	strcat@to+1,c
  1596  001D94  0EB1               	movlw	low STR_13
  1597  001D96  6E12               	movwf	strcat@from,c
  1598  001D98  0E08               	movlw	high STR_13
  1599  001D9A  6E13               	movwf	strcat@from+1,c
  1600  001D9C  EC96  F019         	call	_strcat	;wreg free
  1601                           
  1602                           ;GPS.c: 152: USART_SendString(stringBT);
  1603  001DA0  0E50               	movlw	low _stringBT
  1604  001DA2  6E11               	movwf	USART_SendString@out,c
  1605  001DA4  0E01               	movlw	high _stringBT
  1606  001DA6  6E12               	movwf	USART_SendString@out+1,c
  1607  001DA8  EC11  F01B         	call	_USART_SendString	;wreg free
  1608  001DAC  D658               	goto	l5009
  1609  001DAE                     __end_of_main:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           intcon	equ	0xFF2
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _strcpy *****************
  1618 ;; Defined at:
  1619 ;;		line 8 in file "D:\mplab\sources\common\strcpy.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  to              2   15[COMRAM] PTR unsigned char 
  1622 ;;		 -> stringBT(50), 
  1623 ;;  from            2   17[COMRAM] PTR const unsigned char 
  1624 ;;		 -> Data_Buffer(15), 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  cp              2   19[COMRAM] PTR unsigned char 
  1627 ;;		 -> stringBT(50), 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  2   15[COMRAM] PTR unsigned char 
  1630 ;; Registers used:
  1631 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1637 ;;      Params:         4       0       0       0       0       0       0       0       0
  1638 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1639 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1640 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1641 ;;Total ram usage:        6 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    1
  1644 ;; This function calls:
  1645 ;;		Nothing
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text1
  1652  003558                     __ptext1:
  1653                           	opt stack 0
  1654  003558                     _strcpy:
  1655                           	opt stack 29
  1656                           
  1657                           ;incstack = 0
  1658  003558  C010  F014         	movff	strcpy@to,strcpy@cp
  1659  00355C  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
  1660  003560  D004               	goto	l3909
  1661  003562                     l3907:
  1662  003562  4A14               	infsnz	strcpy@cp,f,c
  1663  003564  2A15               	incf	strcpy@cp+1,f,c
  1664  003566  4A12               	infsnz	strcpy@from,f,c
  1665  003568  2A13               	incf	strcpy@from+1,f,c
  1666  00356A                     l3909:
  1667  00356A  C012  FFD9         	movff	strcpy@from,fsr2l
  1668  00356E  C013  FFDA         	movff	strcpy@from+1,fsr2h
  1669  003572  C014  FFE1         	movff	strcpy@cp,fsr1l
  1670  003576  C015  FFE2         	movff	strcpy@cp+1,fsr1h
  1671  00357A  CFDF FFE7          	movff	indf2,indf1
  1672  00357E  50E7               	movf	indf1,w,c
  1673  003580  B4D8               	btfsc	status,2,c
  1674  003582  0012               	return	
  1675  003584  D7EE               	goto	l3907
  1676  003586                     __end_of_strcpy:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           intcon	equ	0xFF2
  1680                           postinc0	equ	0xFEE
  1681                           wreg	equ	0xFE8
  1682                           indf1	equ	0xFE7
  1683                           fsr1h	equ	0xFE2
  1684                           fsr1l	equ	0xFE1
  1685                           indf2	equ	0xFDF
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _strcat *****************
  1691 ;; Defined at:
  1692 ;;		line 8 in file "D:\mplab\sources\common\strcat.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  to              2   15[COMRAM] PTR unsigned char 
  1695 ;;		 -> stringBT(50), 
  1696 ;;  from            2   17[COMRAM] PTR const unsigned char 
  1697 ;;		 -> STR_13(3), STR_10(2), STR_7(2), STR_4(2), 
  1698 ;;		 -> main@GPS_Buffer(15), Temperature(10), 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  cp              2   19[COMRAM] PTR unsigned char 
  1701 ;;		 -> stringBT(50), 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  2   15[COMRAM] PTR unsigned char 
  1704 ;; Registers used:
  1705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1711 ;;      Params:         4       0       0       0       0       0       0       0       0
  1712 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1714 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1715 ;;Total ram usage:        6 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_main
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text2
  1726  00332C                     __ptext2:
  1727                           	opt stack 0
  1728  00332C                     _strcat:
  1729                           	opt stack 29
  1730                           
  1731                           ;incstack = 0
  1732  00332C  C010  F014         	movff	strcat@to,strcat@cp
  1733  003330  C011  F015         	movff	strcat@to+1,strcat@cp+1
  1734  003334  D002               	goto	l3915
  1735  003336                     l3913:
  1736  003336  4A14               	infsnz	strcat@cp,f,c
  1737  003338  2A15               	incf	strcat@cp+1,f,c
  1738  00333A                     l3915:
  1739  00333A  C014  FFD9         	movff	strcat@cp,fsr2l
  1740  00333E  C015  FFDA         	movff	strcat@cp+1,fsr2h
  1741  003342  50DF               	movf	indf2,w,c
  1742  003344  B4D8               	btfsc	status,2,c
  1743  003346  D005               	goto	l3919
  1744  003348  D7F6               	goto	l3913
  1745  00334A                     l3917:
  1746  00334A  4A14               	infsnz	strcat@cp,f,c
  1747  00334C  2A15               	incf	strcat@cp+1,f,c
  1748  00334E  4A12               	infsnz	strcat@from,f,c
  1749  003350  2A13               	incf	strcat@from+1,f,c
  1750  003352                     l3919:
  1751  003352  C012  FFF6         	movff	strcat@from,tblptrl
  1752  003356  C013  FFF7         	movff	strcat@from+1,tblptrh
  1753  00335A  6AF8               	clrf	tblptru,c
  1754  00335C  C014  FFD9         	movff	strcat@cp,fsr2l
  1755  003360  C015  FFDA         	movff	strcat@cp+1,fsr2h
  1756  003364  0E07               	movlw	(high __ramtop+-1)
  1757  003366  64F7               	cpfsgt	tblptrh,c
  1758  003368  D003               	bra	u4367
  1759  00336A  0008               	tblrd		*
  1760  00336C  50F5               	movf	tablat,w,c
  1761  00336E  D005               	bra	u4360
  1762  003370                     u4367:
  1763  003370  CFF6 FFE1          	movff	tblptrl,fsr1l
  1764  003374  CFF7 FFE2          	movff	tblptrh,fsr1h
  1765  003378  50E7               	movf	indf1,w,c
  1766  00337A                     u4360:
  1767  00337A  6EDF               	movwf	indf2,c
  1768  00337C  50DF               	movf	indf2,w,c
  1769  00337E  B4D8               	btfsc	status,2,c
  1770  003380  0012               	return	
  1771  003382  D7E3               	goto	l3917
  1772  003384                     __end_of_strcat:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           intcon	equ	0xFF2
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           indf1	equ	0xFE7
  1782                           fsr1h	equ	0xFE2
  1783                           fsr1l	equ	0xFE1
  1784                           indf2	equ	0xFDF
  1785                           fsr2h	equ	0xFDA
  1786                           fsr2l	equ	0xFD9
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _memset *****************
  1790 ;; Defined at:
  1791 ;;		line 8 in file "D:\mplab\sources\common\memset.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  p1              2   15[COMRAM] PTR void 
  1794 ;;		 -> main@GPS_Buffer(15), 
  1795 ;;  c               2   17[COMRAM] int 
  1796 ;;  n               2   19[COMRAM] unsigned int 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  p               2   21[COMRAM] PTR unsigned char 
  1799 ;;		 -> main@GPS_Buffer(15), 
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  2   15[COMRAM] PTR void 
  1802 ;; Registers used:
  1803 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1809 ;;      Params:         6       0       0       0       0       0       0       0       0
  1810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1812 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1813 ;;Total ram usage:        8 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    1
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text3
  1824  003586                     __ptext3:
  1825                           	opt stack 0
  1826  003586                     _memset:
  1827                           	opt stack 29
  1828                           
  1829                           ;incstack = 0
  1830  003586  C010  F016         	movff	memset@p1,memset@p
  1831  00358A  C011  F017         	movff	memset@p1+1,memset@p+1
  1832  00358E  D008               	goto	l3867
  1833  003590                     l3863:
  1834  003590  C016  FFD9         	movff	memset@p,fsr2l
  1835  003594  C017  FFDA         	movff	memset@p+1,fsr2h
  1836  003598  C012  FFDF         	movff	memset@c,indf2
  1837  00359C  4A16               	infsnz	memset@p,f,c
  1838  00359E  2A17               	incf	memset@p+1,f,c
  1839  0035A0                     l3867:
  1840  0035A0  0614               	decf	memset@n,f,c
  1841  0035A2  A0D8               	btfss	status,0,c
  1842  0035A4  0615               	decf	memset@n+1,f,c
  1843  0035A6  2814               	incf	memset@n,w,c
  1844  0035A8  E1F3               	bnz	l3863
  1845  0035AA  2815               	incf	memset@n+1,w,c
  1846  0035AC  B4D8               	btfsc	status,2,c
  1847  0035AE  0012               	return	
  1848  0035B0  D7EF               	goto	l3863
  1849  0035B2                     __end_of_memset:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           indf1	equ	0xFE7
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           indf2	equ	0xFDF
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _get_longitude *****************
  1867 ;; Defined at:
  1868 ;;		line 216 in file "GPS.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  long_pointer    1    wreg     unsigned char 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  long_pointer    1   21[BANK0 ] unsigned char 
  1873 ;;  Long_Buffer    15    3[BANK0 ] unsigned char [15]
  1874 ;;  _longitude      3   18[BANK0 ] float 
  1875 ;;  long_index      1   23[BANK0 ] unsigned char 
  1876 ;;  index           1   22[BANK0 ] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  3    0[BANK0 ] float 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         0       3       0       0       0       0       0       0       0
  1887 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1888 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         1      24       0       0       0       0       0       0       0
  1890 ;;Total ram usage:       25 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    5
  1893 ;; This function calls:
  1894 ;;		_atof
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text4
  1901  002C6A                     __ptext4:
  1902                           	opt stack 0
  1903  002C6A                     _get_longitude:
  1904                           	opt stack 25
  1905                           
  1906                           ;incstack = 0
  1907                           ;get_longitude@long_pointer stored from wreg
  1908  002C6A  0100               	movlb	0	; () banked
  1909  002C6C  6F75               	movwf	get_longitude@long_pointer& (0+255),b
  1910                           
  1911                           ;GPS.c: 217: unsigned char long_index;
  1912                           ;GPS.c: 218: unsigned char index = long_pointer+1;
  1913  002C6E  0100               	movlb	0	; () banked
  1914  002C70  2975               	incf	get_longitude@long_pointer& (0+255),w,b
  1915  002C72  0100               	movlb	0	; () banked
  1916  002C74  6F76               	movwf	get_longitude@index& (0+255),b
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;GPS.c: 219: char Long_Buffer[15];
  1920                           ;GPS.c: 220: float _longitude;
  1921                           ;GPS.c: 221: long_index=0;
  1922  002C76  0E00               	movlw	0
  1923  002C78  0100               	movlb	0	; () banked
  1924  002C7A  6F77               	movwf	get_longitude@long_index& (0+255),b
  1925                           
  1926                           ;GPS.c: 224: for( ; GGA_Buffer[index]!=','; index++){
  1927  002C7C  D018               	goto	l4965
  1928  002C7E                     l4959:
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;GPS.c: 225: Long_Buffer[long_index]= GGA_Buffer[index];
  1932  002C7E  0100               	movlb	0	; () banked
  1933  002C80  5176               	movf	get_longitude@index& (0+255),w,b
  1934  002C82  0D01               	mullw	1
  1935  002C84  0E00               	movlw	low _GGA_Buffer
  1936  002C86  24F3               	addwf	prodl,w,c
  1937  002C88  6ED9               	movwf	fsr2l,c
  1938  002C8A  0E01               	movlw	high _GGA_Buffer
  1939  002C8C  20F4               	addwfc	prodh,w,c
  1940  002C8E  6EDA               	movwf	fsr2h,c
  1941  002C90  0100               	movlb	0	; () banked
  1942  002C92  5177               	movf	get_longitude@long_index& (0+255),w,b
  1943  002C94  0D01               	mullw	1
  1944  002C96  0E63               	movlw	low get_longitude@Long_Buffer
  1945  002C98  24F3               	addwf	prodl,w,c
  1946  002C9A  6EE1               	movwf	fsr1l,c
  1947  002C9C  0E00               	movlw	high get_longitude@Long_Buffer
  1948  002C9E  20F4               	addwfc	prodh,w,c
  1949  002CA0  6EE2               	movwf	fsr1h,c
  1950  002CA2  CFDF FFE7          	movff	indf2,indf1
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;GPS.c: 226: long_index++;
  1954  002CA6  0100               	movlb	0	; () banked
  1955  002CA8  2B77               	incf	get_longitude@long_index& (0+255),f,b
  1956                           
  1957                           ; BSR set to: 0
  1958  002CAA  0100               	movlb	0	; () banked
  1959  002CAC  2B76               	incf	get_longitude@index& (0+255),f,b
  1960  002CAE                     l4965:
  1961                           
  1962                           ; BSR set to: 0
  1963  002CAE  0100               	movlb	0	; () banked
  1964  002CB0  5176               	movf	get_longitude@index& (0+255),w,b
  1965  002CB2  0D01               	mullw	1
  1966  002CB4  0E00               	movlw	low _GGA_Buffer
  1967  002CB6  24F3               	addwf	prodl,w,c
  1968  002CB8  6ED9               	movwf	fsr2l,c
  1969  002CBA  0E01               	movlw	high _GGA_Buffer
  1970  002CBC  20F4               	addwfc	prodh,w,c
  1971  002CBE  6EDA               	movwf	fsr2h,c
  1972  002CC0  0E2C               	movlw	44
  1973  002CC2  18DE               	xorwf	postinc2,w,c
  1974  002CC4  A4D8               	btfss	status,2,c
  1975  002CC6  D7DB               	goto	l4959
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;GPS.c: 227: }
  1979                           ;GPS.c: 228: long_index++;
  1980                           
  1981                           ; BSR set to: 0
  1982  002CC8  0100               	movlb	0	; () banked
  1983  002CCA  2B77               	incf	get_longitude@long_index& (0+255),f,b
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;GPS.c: 229: E_W = GGA_Buffer[long_index];
  1987  002CCC  0100               	movlb	0	; () banked
  1988  002CCE  5177               	movf	get_longitude@long_index& (0+255),w,b
  1989  002CD0  0D01               	mullw	1
  1990  002CD2  0E00               	movlw	low _GGA_Buffer
  1991  002CD4  24F3               	addwf	prodl,w,c
  1992  002CD6  6ED9               	movwf	fsr2l,c
  1993  002CD8  0E01               	movlw	high _GGA_Buffer
  1994  002CDA  20F4               	addwfc	prodh,w,c
  1995  002CDC  6EDA               	movwf	fsr2h,c
  1996  002CDE  50DF               	movf	indf2,w,c
  1997  002CE0  6E4E               	movwf	_E_W,c
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;GPS.c: 230: _longitude = atof(Long_Buffer);
  2001  002CE2  0E63               	movlw	low get_longitude@Long_Buffer
  2002  002CE4  6E42               	movwf	atof@s,c
  2003  002CE6  0E00               	movlw	high get_longitude@Long_Buffer
  2004  002CE8  6E43               	movwf	atof@s+1,c
  2005  002CEA  EC23  F01B         	call	_atof	;wreg free
  2006  002CEE  C042  F072         	movff	?_atof,get_longitude@_longitude
  2007  002CF2  C043  F073         	movff	?_atof+1,get_longitude@_longitude+1
  2008  002CF6  C044  F074         	movff	?_atof+2,get_longitude@_longitude+2
  2009                           
  2010                           ;GPS.c: 231: return _longitude;
  2011  002CFA  C072  F060         	movff	get_longitude@_longitude,?_get_longitude
  2012  002CFE  C073  F061         	movff	get_longitude@_longitude+1,?_get_longitude+1
  2013  002D02  C074  F062         	movff	get_longitude@_longitude+2,?_get_longitude+2
  2014  002D06  0012               	return	
  2015  002D08                     __end_of_get_longitude:
  2016                           	opt stack 0
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           prodh	equ	0xFF4
  2022                           prodl	equ	0xFF3
  2023                           intcon	equ	0xFF2
  2024                           postinc0	equ	0xFEE
  2025                           wreg	equ	0xFE8
  2026                           indf1	equ	0xFE7
  2027                           fsr1h	equ	0xFE2
  2028                           fsr1l	equ	0xFE1
  2029                           indf2	equ	0xFDF
  2030                           postinc2	equ	0xFDE
  2031                           fsr2h	equ	0xFDA
  2032                           fsr2l	equ	0xFD9
  2033                           status	equ	0xFD8
  2034                           
  2035 ;; *************** function _get_latitude *****************
  2036 ;; Defined at:
  2037 ;;		line 199 in file "GPS.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  lat_pointer     1    wreg     unsigned char 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  lat_pointer     1   21[BANK0 ] unsigned char 
  2042 ;;  Lat_Buffer     15    3[BANK0 ] unsigned char [15]
  2043 ;;  _latitude       3   18[BANK0 ] float 
  2044 ;;  lat_index       1   23[BANK0 ] unsigned char 
  2045 ;;  index           1   22[BANK0 ] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  3    0[BANK0 ] float 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2055 ;;      Params:         0       3       0       0       0       0       0       0       0
  2056 ;;      Locals:         0      21       0       0       0       0       0       0       0
  2057 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2058 ;;      Totals:         1      24       0       0       0       0       0       0       0
  2059 ;;Total ram usage:       25 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    5
  2062 ;; This function calls:
  2063 ;;		_atof
  2064 ;; This function is called by:
  2065 ;;		_main
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           	psect	text5
  2070  002D08                     __ptext5:
  2071                           	opt stack 0
  2072  002D08                     _get_latitude:
  2073                           	opt stack 25
  2074                           
  2075                           ;incstack = 0
  2076                           ;get_latitude@lat_pointer stored from wreg
  2077  002D08  0100               	movlb	0	; () banked
  2078  002D0A  6F75               	movwf	get_latitude@lat_pointer& (0+255),b
  2079                           
  2080                           ;GPS.c: 200: unsigned char lat_index = lat_pointer+1;
  2081  002D0C  0100               	movlb	0	; () banked
  2082  002D0E  2975               	incf	get_latitude@lat_pointer& (0+255),w,b
  2083  002D10  0100               	movlb	0	; () banked
  2084  002D12  6F77               	movwf	get_latitude@lat_index& (0+255),b
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;GPS.c: 201: unsigned char index = 0;
  2088  002D14  0E00               	movlw	0
  2089  002D16  0100               	movlb	0	; () banked
  2090  002D18  6F76               	movwf	get_latitude@index& (0+255),b
  2091                           
  2092                           ;GPS.c: 202: char Lat_Buffer[15];
  2093                           ;GPS.c: 203: float _latitude;
  2094                           ;GPS.c: 206: for(;GGA_Buffer[lat_index]!=',';lat_index++){
  2095  002D1A  D018               	goto	l4931
  2096  002D1C                     l4925:
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;GPS.c: 207: Lat_Buffer[index]= GGA_Buffer[lat_index];
  2100  002D1C  0100               	movlb	0	; () banked
  2101  002D1E  5177               	movf	get_latitude@lat_index& (0+255),w,b
  2102  002D20  0D01               	mullw	1
  2103  002D22  0E00               	movlw	low _GGA_Buffer
  2104  002D24  24F3               	addwf	prodl,w,c
  2105  002D26  6ED9               	movwf	fsr2l,c
  2106  002D28  0E01               	movlw	high _GGA_Buffer
  2107  002D2A  20F4               	addwfc	prodh,w,c
  2108  002D2C  6EDA               	movwf	fsr2h,c
  2109  002D2E  0100               	movlb	0	; () banked
  2110  002D30  5176               	movf	get_latitude@index& (0+255),w,b
  2111  002D32  0D01               	mullw	1
  2112  002D34  0E63               	movlw	low get_latitude@Lat_Buffer
  2113  002D36  24F3               	addwf	prodl,w,c
  2114  002D38  6EE1               	movwf	fsr1l,c
  2115  002D3A  0E00               	movlw	high get_latitude@Lat_Buffer
  2116  002D3C  20F4               	addwfc	prodh,w,c
  2117  002D3E  6EE2               	movwf	fsr1h,c
  2118  002D40  CFDF FFE7          	movff	indf2,indf1
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;GPS.c: 208: index++;
  2122  002D44  0100               	movlb	0	; () banked
  2123  002D46  2B76               	incf	get_latitude@index& (0+255),f,b
  2124                           
  2125                           ; BSR set to: 0
  2126  002D48  0100               	movlb	0	; () banked
  2127  002D4A  2B77               	incf	get_latitude@lat_index& (0+255),f,b
  2128  002D4C                     l4931:
  2129                           
  2130                           ; BSR set to: 0
  2131  002D4C  0100               	movlb	0	; () banked
  2132  002D4E  5177               	movf	get_latitude@lat_index& (0+255),w,b
  2133  002D50  0D01               	mullw	1
  2134  002D52  0E00               	movlw	low _GGA_Buffer
  2135  002D54  24F3               	addwf	prodl,w,c
  2136  002D56  6ED9               	movwf	fsr2l,c
  2137  002D58  0E01               	movlw	high _GGA_Buffer
  2138  002D5A  20F4               	addwfc	prodh,w,c
  2139  002D5C  6EDA               	movwf	fsr2h,c
  2140  002D5E  0E2C               	movlw	44
  2141  002D60  18DE               	xorwf	postinc2,w,c
  2142  002D62  A4D8               	btfss	status,2,c
  2143  002D64  D7DB               	goto	l4925
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;GPS.c: 209: }
  2147                           ;GPS.c: 210: lat_index++;
  2148                           
  2149                           ; BSR set to: 0
  2150  002D66  0100               	movlb	0	; () banked
  2151  002D68  2B77               	incf	get_latitude@lat_index& (0+255),f,b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;GPS.c: 211: N_S = GGA_Buffer[lat_index];
  2155  002D6A  0100               	movlb	0	; () banked
  2156  002D6C  5177               	movf	get_latitude@lat_index& (0+255),w,b
  2157  002D6E  0D01               	mullw	1
  2158  002D70  0E00               	movlw	low _GGA_Buffer
  2159  002D72  24F3               	addwf	prodl,w,c
  2160  002D74  6ED9               	movwf	fsr2l,c
  2161  002D76  0E01               	movlw	high _GGA_Buffer
  2162  002D78  20F4               	addwfc	prodh,w,c
  2163  002D7A  6EDA               	movwf	fsr2h,c
  2164  002D7C  50DF               	movf	indf2,w,c
  2165  002D7E  6E4F               	movwf	_N_S,c
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;GPS.c: 212: _latitude = atof(Lat_Buffer);
  2169  002D80  0E63               	movlw	low get_latitude@Lat_Buffer
  2170  002D82  6E42               	movwf	atof@s,c
  2171  002D84  0E00               	movlw	high get_latitude@Lat_Buffer
  2172  002D86  6E43               	movwf	atof@s+1,c
  2173  002D88  EC23  F01B         	call	_atof	;wreg free
  2174  002D8C  C042  F072         	movff	?_atof,get_latitude@_latitude
  2175  002D90  C043  F073         	movff	?_atof+1,get_latitude@_latitude+1
  2176  002D94  C044  F074         	movff	?_atof+2,get_latitude@_latitude+2
  2177                           
  2178                           ;GPS.c: 213: return _latitude;
  2179  002D98  C072  F060         	movff	get_latitude@_latitude,?_get_latitude
  2180  002D9C  C073  F061         	movff	get_latitude@_latitude+1,?_get_latitude+1
  2181  002DA0  C074  F062         	movff	get_latitude@_latitude+2,?_get_latitude+2
  2182  002DA4  0012               	return	
  2183  002DA6                     __end_of_get_latitude:
  2184                           	opt stack 0
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           intcon	equ	0xFF2
  2192                           postinc0	equ	0xFEE
  2193                           wreg	equ	0xFE8
  2194                           indf1	equ	0xFE7
  2195                           fsr1h	equ	0xFE2
  2196                           fsr1l	equ	0xFE1
  2197                           indf2	equ	0xFDF
  2198                           postinc2	equ	0xFDE
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _get_gpstime *****************
  2204 ;; Defined at:
  2205 ;;		line 184 in file "GPS.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  Time_Buffer    15   46[COMRAM] unsigned char [15]
  2210 ;;  _Time           4   61[COMRAM] unsigned long 
  2211 ;;  index           1   65[COMRAM] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  4   41[COMRAM] unsigned long 
  2214 ;; Registers used:
  2215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2221 ;;      Params:         4       0       0       0       0       0       0       0       0
  2222 ;;      Locals:        20       0       0       0       0       0       0       0       0
  2223 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2224 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2225 ;;Total ram usage:       25 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    3
  2228 ;; This function calls:
  2229 ;;		_atol
  2230 ;; This function is called by:
  2231 ;;		_main
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text6
  2236  00312C                     __ptext6:
  2237                           	opt stack 0
  2238  00312C                     _get_gpstime:
  2239                           	opt stack 27
  2240                           
  2241                           ;GPS.c: 185: unsigned char index;
  2242                           ;GPS.c: 186: unsigned char Time_Buffer[15];
  2243                           ;GPS.c: 187: unsigned long int _Time;
  2244                           ;GPS.c: 190: for(index = 0;GGA_Buffer[index]!=','; index++){
  2245                           
  2246                           ;incstack = 0
  2247  00312C  0E00               	movlw	0
  2248  00312E  6E42               	movwf	get_gpstime@index,c
  2249  003130  D013               	goto	l3893
  2250  003132                     l3889:
  2251                           
  2252                           ;GPS.c: 191: Time_Buffer[index] = GGA_Buffer[index];
  2253  003132  5042               	movf	get_gpstime@index,w,c
  2254  003134  0D01               	mullw	1
  2255  003136  0E00               	movlw	low _GGA_Buffer
  2256  003138  24F3               	addwf	prodl,w,c
  2257  00313A  6ED9               	movwf	fsr2l,c
  2258  00313C  0E01               	movlw	high _GGA_Buffer
  2259  00313E  20F4               	addwfc	prodh,w,c
  2260  003140  6EDA               	movwf	fsr2h,c
  2261  003142  5042               	movf	get_gpstime@index,w,c
  2262  003144  0D01               	mullw	1
  2263  003146  0E2F               	movlw	low get_gpstime@Time_Buffer
  2264  003148  24F3               	addwf	prodl,w,c
  2265  00314A  6EE1               	movwf	fsr1l,c
  2266  00314C  0E00               	movlw	high get_gpstime@Time_Buffer
  2267  00314E  20F4               	addwfc	prodh,w,c
  2268  003150  6EE2               	movwf	fsr1h,c
  2269  003152  CFDF FFE7          	movff	indf2,indf1
  2270  003156  2A42               	incf	get_gpstime@index,f,c
  2271  003158                     l3893:
  2272  003158  5042               	movf	get_gpstime@index,w,c
  2273  00315A  0D01               	mullw	1
  2274  00315C  0E00               	movlw	low _GGA_Buffer
  2275  00315E  24F3               	addwf	prodl,w,c
  2276  003160  6ED9               	movwf	fsr2l,c
  2277  003162  0E01               	movlw	high _GGA_Buffer
  2278  003164  20F4               	addwfc	prodh,w,c
  2279  003166  6EDA               	movwf	fsr2h,c
  2280  003168  0E2C               	movlw	44
  2281  00316A  18DE               	xorwf	postinc2,w,c
  2282  00316C  A4D8               	btfss	status,2,c
  2283  00316E  D7E1               	goto	l3889
  2284                           
  2285                           ;GPS.c: 192: }
  2286                           ;GPS.c: 193: _Time= atol(Time_Buffer);
  2287  003170  0E2F               	movlw	low get_gpstime@Time_Buffer
  2288  003172  6E1C               	movwf	atol@s,c
  2289  003174  0E00               	movlw	high get_gpstime@Time_Buffer
  2290  003176  6E1D               	movwf	atol@s+1,c
  2291  003178  EC75  F014         	call	_atol	;wreg free
  2292  00317C  C01C  F03E         	movff	?_atol,get_gpstime@_Time
  2293  003180  C01D  F03F         	movff	?_atol+1,get_gpstime@_Time+1
  2294  003184  C01E  F040         	movff	?_atol+2,get_gpstime@_Time+2
  2295  003188  C01F  F041         	movff	?_atol+3,get_gpstime@_Time+3
  2296                           
  2297                           ;GPS.c: 194: return _Time;
  2298  00318C  C03E  F02A         	movff	get_gpstime@_Time,?_get_gpstime
  2299  003190  C03F  F02B         	movff	get_gpstime@_Time+1,?_get_gpstime+1
  2300  003194  C040  F02C         	movff	get_gpstime@_Time+2,?_get_gpstime+2
  2301  003198  C041  F02D         	movff	get_gpstime@_Time+3,?_get_gpstime+3
  2302  00319C  0012               	return	
  2303  00319E                     __end_of_get_gpstime:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           intcon	equ	0xFF2
  2312                           postinc0	equ	0xFEE
  2313                           wreg	equ	0xFE8
  2314                           indf1	equ	0xFE7
  2315                           fsr1h	equ	0xFE2
  2316                           fsr1l	equ	0xFE1
  2317                           indf2	equ	0xFDF
  2318                           postinc2	equ	0xFDE
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _atol *****************
  2324 ;; Defined at:
  2325 ;;		line 5 in file "D:\mplab\sources\common\atol.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  s               2   27[COMRAM] PTR const unsigned char 
  2328 ;;		 -> get_gpstime@Time_Buffer(15), 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  a               4   36[COMRAM] long 
  2331 ;;  c               1   40[COMRAM] unsigned char 
  2332 ;;  sign            1   35[COMRAM] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  4   27[COMRAM] long 
  2335 ;; Registers used:
  2336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2342 ;;      Params:         4       0       0       0       0       0       0       0       0
  2343 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2344 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2345 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2346 ;;Total ram usage:       14 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    2
  2349 ;; This function calls:
  2350 ;;		___lmul
  2351 ;;		_isdigit
  2352 ;; This function is called by:
  2353 ;;		_get_gpstime
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text7
  2358  0028EA                     __ptext7:
  2359                           	opt stack 0
  2360  0028EA                     _atol:
  2361                           	opt stack 27
  2362  0028EA  C01C  FFD9         	movff	atol@s,fsr2l
  2363  0028EE  C01D  FFDA         	movff	atol@s+1,fsr2h
  2364  0028F2  50DF               	movf	indf2,w,c
  2365  0028F4  6E29               	movwf	atol@c,c
  2366  0028F6  4A1C               	infsnz	atol@s,f,c
  2367  0028F8  2A1D               	incf	atol@s+1,f,c
  2368  0028FA  0E20               	movlw	32
  2369  0028FC  1829               	xorwf	atol@c,w,c
  2370  0028FE  B4D8               	btfsc	status,2,c
  2371  002900  D7F4               	goto	l3753
  2372  002902  0E09               	movlw	9
  2373  002904  1829               	xorwf	atol@c,w,c
  2374  002906  B4D8               	btfsc	status,2,c
  2375  002908  D7F0               	goto	l3753
  2376  00290A  0E00               	movlw	0
  2377  00290C  6E25               	movwf	atol@a,c
  2378  00290E  0E00               	movlw	0
  2379  002910  6E26               	movwf	atol@a+1,c
  2380  002912  0E00               	movlw	0
  2381  002914  6E27               	movwf	atol@a+2,c
  2382  002916  0E00               	movlw	0
  2383  002918  6E28               	movwf	atol@a+3,c
  2384  00291A  0E00               	movlw	0
  2385  00291C  6E24               	movwf	atol@sign,c
  2386  00291E  0E2D               	movlw	45
  2387  002920  1829               	xorwf	atol@c,w,c
  2388  002922  A4D8               	btfss	status,2,c
  2389  002924  D005               	goto	l3771
  2390  002926  2A24               	incf	atol@sign,f,c
  2391  002928  D02A               	goto	l3779
  2392  00292A                     l3769:
  2393  00292A  4A1C               	infsnz	atol@s,f,c
  2394  00292C  2A1D               	incf	atol@s+1,f,c
  2395  00292E  D02E               	goto	l3783
  2396  002930                     l3771:
  2397  002930  0E2B               	movlw	43
  2398  002932  1829               	xorwf	atol@c,w,c
  2399  002934  A4D8               	btfss	status,2,c
  2400  002936  D02A               	goto	l3783
  2401  002938  D022               	goto	l3779
  2402  00293A                     l3777:
  2403  00293A  C025  F010         	movff	atol@a,___lmul@multiplier
  2404  00293E  C026  F011         	movff	atol@a+1,___lmul@multiplier+1
  2405  002942  C027  F012         	movff	atol@a+2,___lmul@multiplier+2
  2406  002946  C028  F013         	movff	atol@a+3,___lmul@multiplier+3
  2407  00294A  0E0A               	movlw	10
  2408  00294C  6E14               	movwf	___lmul@multiplicand,c
  2409  00294E  0E00               	movlw	0
  2410  002950  6E15               	movwf	___lmul@multiplicand+1,c
  2411  002952  0E00               	movlw	0
  2412  002954  6E16               	movwf	___lmul@multiplicand+2,c
  2413  002956  0E00               	movlw	0
  2414  002958  6E17               	movwf	___lmul@multiplicand+3,c
  2415  00295A  ECC2  F019         	call	___lmul	;wreg free
  2416  00295E  C029  F020         	movff	atol@c,??_atol
  2417  002962  0ED0               	movlw	208
  2418  002964  2620               	addwf	??_atol,f,c
  2419  002966  5020               	movf	??_atol,w,c
  2420  002968  2410               	addwf	?___lmul,w,c
  2421  00296A  6E25               	movwf	atol@a,c
  2422  00296C  0E00               	movlw	0
  2423  00296E  2011               	addwfc	?___lmul+1,w,c
  2424  002970  6E26               	movwf	atol@a+1,c
  2425  002972  0E00               	movlw	0
  2426  002974  2012               	addwfc	?___lmul+2,w,c
  2427  002976  6E27               	movwf	atol@a+2,c
  2428  002978  0E00               	movlw	0
  2429  00297A  2013               	addwfc	?___lmul+3,w,c
  2430  00297C  6E28               	movwf	atol@a+3,c
  2431  00297E                     l3779:
  2432  00297E  C01C  FFD9         	movff	atol@s,fsr2l
  2433  002982  C01D  FFDA         	movff	atol@s+1,fsr2h
  2434  002986  50DF               	movf	indf2,w,c
  2435  002988  6E29               	movwf	atol@c,c
  2436  00298A  D7CF               	goto	l3769
  2437  00298C                     l3783:
  2438  00298C  5029               	movf	atol@c,w,c
  2439  00298E  EC34  F01B         	call	_isdigit
  2440  002992  B0D8               	btfsc	status,0,c
  2441  002994  D7D2               	goto	l3777
  2442  002996  5024               	movf	atol@sign,w,c
  2443  002998  B4D8               	btfsc	status,2,c
  2444  00299A  D01A               	goto	l606
  2445  00299C  C025  F020         	movff	atol@a,??_atol
  2446  0029A0  C026  F021         	movff	atol@a+1,??_atol+1
  2447  0029A4  C027  F022         	movff	atol@a+2,??_atol+2
  2448  0029A8  C028  F023         	movff	atol@a+3,??_atol+3
  2449  0029AC  1E20               	comf	??_atol,f,c
  2450  0029AE  1E21               	comf	??_atol+1,f,c
  2451  0029B0  1E22               	comf	??_atol+2,f,c
  2452  0029B2  1E23               	comf	??_atol+3,f,c
  2453  0029B4  2A20               	incf	??_atol,f,c
  2454  0029B6  0E00               	movlw	0
  2455  0029B8  2221               	addwfc	??_atol+1,f,c
  2456  0029BA  2222               	addwfc	??_atol+2,f,c
  2457  0029BC  2223               	addwfc	??_atol+3,f,c
  2458  0029BE  C020  F01C         	movff	??_atol,?_atol
  2459  0029C2  C021  F01D         	movff	??_atol+1,?_atol+1
  2460  0029C6  C022  F01E         	movff	??_atol+2,?_atol+2
  2461  0029CA  C023  F01F         	movff	??_atol+3,?_atol+3
  2462  0029CE  0012               	return	
  2463  0029D0                     l606:
  2464  0029D0  C025  F01C         	movff	atol@a,?_atol
  2465  0029D4  C026  F01D         	movff	atol@a+1,?_atol+1
  2466  0029D8  C027  F01E         	movff	atol@a+2,?_atol+2
  2467  0029DC  C028  F01F         	movff	atol@a+3,?_atol+3
  2468  0029E0  0012               	return		;funcret
  2469  0029E2                     __end_of_atol:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           prodh	equ	0xFF4
  2476                           prodl	equ	0xFF3
  2477                           intcon	equ	0xFF2
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           indf1	equ	0xFE7
  2481                           fsr1h	equ	0xFE2
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _get_altitude *****************
  2490 ;; Defined at:
  2491 ;;		line 234 in file "GPS.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  alt_pointer     1    wreg     unsigned char 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  alt_pointer     1   18[BANK0 ] unsigned char 
  2496 ;;  Alt_Buffer     12    3[BANK0 ] unsigned char [12]
  2497 ;;  _Altitude       3   15[BANK0 ] float 
  2498 ;;  index           1   20[BANK0 ] unsigned char 
  2499 ;;  alt_index       1   19[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  3    0[BANK0 ] float 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2509 ;;      Params:         0       3       0       0       0       0       0       0       0
  2510 ;;      Locals:         0      18       0       0       0       0       0       0       0
  2511 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2512 ;;      Totals:         1      21       0       0       0       0       0       0       0
  2513 ;;Total ram usage:       22 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    5
  2516 ;; This function calls:
  2517 ;;		_atof
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text8
  2524  002E36                     __ptext8:
  2525                           	opt stack 0
  2526  002E36                     _get_altitude:
  2527                           	opt stack 25
  2528                           
  2529                           ;incstack = 0
  2530                           ;get_altitude@alt_pointer stored from wreg
  2531  002E36  0100               	movlb	0	; () banked
  2532  002E38  6F72               	movwf	get_altitude@alt_pointer& (0+255),b
  2533                           
  2534                           ;GPS.c: 235: unsigned char alt_index;
  2535                           ;GPS.c: 236: unsigned char index = alt_pointer+1;
  2536  002E3A  0100               	movlb	0	; () banked
  2537  002E3C  2972               	incf	get_altitude@alt_pointer& (0+255),w,b
  2538  002E3E  0100               	movlb	0	; () banked
  2539  002E40  6F74               	movwf	get_altitude@index& (0+255),b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;GPS.c: 237: char Alt_Buffer[12];
  2543                           ;GPS.c: 238: float _Altitude;
  2544                           ;GPS.c: 239: alt_index=0;
  2545  002E42  0E00               	movlw	0
  2546  002E44  0100               	movlb	0	; () banked
  2547  002E46  6F73               	movwf	get_altitude@alt_index& (0+255),b
  2548                           
  2549                           ;GPS.c: 242: for( ; GGA_Buffer[index]!=','; index++){
  2550  002E48  D018               	goto	l4987
  2551  002E4A                     l4981:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;GPS.c: 243: Alt_Buffer[alt_index]= GGA_Buffer[index];
  2555  002E4A  0100               	movlb	0	; () banked
  2556  002E4C  5174               	movf	get_altitude@index& (0+255),w,b
  2557  002E4E  0D01               	mullw	1
  2558  002E50  0E00               	movlw	low _GGA_Buffer
  2559  002E52  24F3               	addwf	prodl,w,c
  2560  002E54  6ED9               	movwf	fsr2l,c
  2561  002E56  0E01               	movlw	high _GGA_Buffer
  2562  002E58  20F4               	addwfc	prodh,w,c
  2563  002E5A  6EDA               	movwf	fsr2h,c
  2564  002E5C  0100               	movlb	0	; () banked
  2565  002E5E  5173               	movf	get_altitude@alt_index& (0+255),w,b
  2566  002E60  0D01               	mullw	1
  2567  002E62  0E63               	movlw	low get_altitude@Alt_Buffer
  2568  002E64  24F3               	addwf	prodl,w,c
  2569  002E66  6EE1               	movwf	fsr1l,c
  2570  002E68  0E00               	movlw	high get_altitude@Alt_Buffer
  2571  002E6A  20F4               	addwfc	prodh,w,c
  2572  002E6C  6EE2               	movwf	fsr1h,c
  2573  002E6E  CFDF FFE7          	movff	indf2,indf1
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;GPS.c: 244: alt_index++;
  2577  002E72  0100               	movlb	0	; () banked
  2578  002E74  2B73               	incf	get_altitude@alt_index& (0+255),f,b
  2579                           
  2580                           ; BSR set to: 0
  2581  002E76  0100               	movlb	0	; () banked
  2582  002E78  2B74               	incf	get_altitude@index& (0+255),f,b
  2583  002E7A                     l4987:
  2584                           
  2585                           ; BSR set to: 0
  2586  002E7A  0100               	movlb	0	; () banked
  2587  002E7C  5174               	movf	get_altitude@index& (0+255),w,b
  2588  002E7E  0D01               	mullw	1
  2589  002E80  0E00               	movlw	low _GGA_Buffer
  2590  002E82  24F3               	addwf	prodl,w,c
  2591  002E84  6ED9               	movwf	fsr2l,c
  2592  002E86  0E01               	movlw	high _GGA_Buffer
  2593  002E88  20F4               	addwfc	prodh,w,c
  2594  002E8A  6EDA               	movwf	fsr2h,c
  2595  002E8C  0E2C               	movlw	44
  2596  002E8E  18DE               	xorwf	postinc2,w,c
  2597  002E90  A4D8               	btfss	status,2,c
  2598  002E92  D7DB               	goto	l4981
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;GPS.c: 245: }
  2602                           ;GPS.c: 246: _Altitude = atof(Alt_Buffer);
  2603                           
  2604                           ; BSR set to: 0
  2605  002E94  0E63               	movlw	low get_altitude@Alt_Buffer
  2606  002E96  6E42               	movwf	atof@s,c
  2607  002E98  0E00               	movlw	high get_altitude@Alt_Buffer
  2608  002E9A  6E43               	movwf	atof@s+1,c
  2609  002E9C  EC23  F01B         	call	_atof	;wreg free
  2610  002EA0  C042  F06F         	movff	?_atof,get_altitude@_Altitude
  2611  002EA4  C043  F070         	movff	?_atof+1,get_altitude@_Altitude+1
  2612  002EA8  C044  F071         	movff	?_atof+2,get_altitude@_Altitude+2
  2613                           
  2614                           ;GPS.c: 247: return _Altitude;
  2615  002EAC  C06F  F060         	movff	get_altitude@_Altitude,?_get_altitude
  2616  002EB0  C070  F061         	movff	get_altitude@_Altitude+1,?_get_altitude+1
  2617  002EB4  C071  F062         	movff	get_altitude@_Altitude+2,?_get_altitude+2
  2618  002EB8  0012               	return	
  2619  002EBA                     __end_of_get_altitude:
  2620                           	opt stack 0
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           intcon	equ	0xFF2
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           indf1	equ	0xFE7
  2631                           fsr1h	equ	0xFE2
  2632                           fsr1l	equ	0xFE1
  2633                           indf2	equ	0xFDF
  2634                           postinc2	equ	0xFDE
  2635                           fsr2h	equ	0xFDA
  2636                           fsr2l	equ	0xFD9
  2637                           status	equ	0xFD8
  2638                           
  2639 ;; *************** function _atof *****************
  2640 ;; Defined at:
  2641 ;;		line 200 in file "D:\mplab\sources\common\atof.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  s               2   65[COMRAM] PTR const unsigned char 
  2644 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  3   65[COMRAM] PTR const unsigned char 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2656 ;;      Params:         3       0       0       0       0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2659 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2660 ;;Total ram usage:        3 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    4
  2663 ;; This function calls:
  2664 ;;		_strtod
  2665 ;; This function is called by:
  2666 ;;		_get_latitude
  2667 ;;		_get_longitude
  2668 ;;		_get_altitude
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text9
  2673  003646                     __ptext9:
  2674                           	opt stack 0
  2675  003646                     _atof:
  2676                           	opt stack 25
  2677                           
  2678                           ;incstack = 0
  2679  003646  C042  F036         	movff	atof@s,strtod@s
  2680  00364A  C043  F037         	movff	atof@s+1,strtod@s+1
  2681  00364E  0E00               	movlw	0
  2682  003650  6E38               	movwf	strtod@res,c
  2683  003652  0E00               	movlw	0
  2684  003654  6E39               	movwf	strtod@res+1,c
  2685  003656  EC40  F00B         	call	_strtod	;wreg free
  2686  00365A  C036  F042         	movff	?_strtod,?_atof
  2687  00365E  C037  F043         	movff	?_strtod+1,?_atof+1
  2688  003662  C038  F044         	movff	?_strtod+2,?_atof+2
  2689  003666  0012               	return	
  2690  003668                     __end_of_atof:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           indf1	equ	0xFE7
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           postinc2	equ	0xFDE
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _strtod *****************
  2711 ;; Defined at:
  2712 ;;		line 35 in file "D:\mplab\sources\common\atof.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  s               2   53[COMRAM] PTR const unsigned char 
  2715 ;;		 -> get_altitude@Alt_Buffer(12), get_longitude@Long_Buffer(15), get_latitude@Lat_Buffer(15), 
  2716 ;;  res             2   55[COMRAM] PTR PTR const unsigned c
  2717 ;;		 -> NULL(0), 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  _u              4   61[COMRAM] struct .
  2720 ;;  expon           1   60[COMRAM] char 
  2721 ;;  flags           1   59[COMRAM] unsigned char 
  2722 ;;  eexp            1   58[COMRAM] char 
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  3   53[COMRAM] char 
  2725 ;; Registers used:
  2726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2732 ;;      Params:         4       0       0       0       0       0       0       0       0
  2733 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2734 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2735 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2736 ;;Total ram usage:       12 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    3
  2739 ;; This function calls:
  2740 ;;		___altoft
  2741 ;;		___ftdiv
  2742 ;;		___ftge
  2743 ;;		___ftmul
  2744 ;;		___ftneg
  2745 ;;		___lmul
  2746 ;;		_isdigit
  2747 ;;		_isspace
  2748 ;; This function is called by:
  2749 ;;		_atof
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text10
  2754  001680                     __ptext10:
  2755                           	opt stack 0
  2756  001680                     _strtod:
  2757                           	opt stack 25
  2758                           
  2759                           ;incstack = 0
  2760  001680  5038               	movf	strtod@res,w,c
  2761  001682  1039               	iorwf	strtod@res+1,w,c
  2762  001684  B4D8               	btfsc	status,2,c
  2763  001686  D00B               	goto	l4417
  2764  001688  C038  FFD9         	movff	strtod@res,fsr2l
  2765  00168C  C039  FFDA         	movff	strtod@res+1,fsr2h
  2766  001690  C036  FFDE         	movff	strtod@s,postinc2
  2767  001694  C037  FFDD         	movff	strtod@s+1,postdec2
  2768  001698  D002               	goto	l4417
  2769  00169A                     l4415:
  2770  00169A  4A36               	infsnz	strtod@s,f,c
  2771  00169C  2A37               	incf	strtod@s+1,f,c
  2772  00169E                     l4417:
  2773  00169E  C036  FFD9         	movff	strtod@s,fsr2l
  2774  0016A2  C037  FFDA         	movff	strtod@s+1,fsr2h
  2775  0016A6  50DF               	movf	indf2,w,c
  2776  0016A8  6E3B               	movwf	strtod@eexp,c
  2777  0016AA  503B               	movf	strtod@eexp,w,c
  2778  0016AC  ECD9  F01A         	call	_isspace
  2779  0016B0  B0D8               	btfsc	status,0,c
  2780  0016B2  D7F3               	goto	l4415
  2781  0016B4  0E00               	movlw	0
  2782  0016B6  6E3C               	movwf	strtod@flags,c
  2783  0016B8  0E2D               	movlw	45
  2784  0016BA  183B               	xorwf	strtod@eexp,w,c
  2785  0016BC  A4D8               	btfss	status,2,c
  2786  0016BE  D003               	goto	l4427
  2787  0016C0  0E01               	movlw	1
  2788  0016C2  6E3C               	movwf	strtod@flags,c
  2789  0016C4  D004               	goto	l4429
  2790  0016C6                     l4427:
  2791  0016C6  0E2B               	movlw	43
  2792  0016C8  183B               	xorwf	strtod@eexp,w,c
  2793  0016CA  A4D8               	btfss	status,2,c
  2794  0016CC  D002               	goto	l4431
  2795  0016CE                     l4429:
  2796  0016CE  4A36               	infsnz	strtod@s,f,c
  2797  0016D0  2A37               	incf	strtod@s+1,f,c
  2798  0016D2                     l4431:
  2799  0016D2  0E00               	movlw	0
  2800  0016D4  6E3B               	movwf	strtod@eexp,c
  2801  0016D6  0E00               	movlw	0
  2802  0016D8  6E3E               	movwf	strtod@_u,c
  2803  0016DA  0E00               	movlw	0
  2804  0016DC  6E3F               	movwf	strtod@_u+1,c
  2805  0016DE  0E00               	movlw	0
  2806  0016E0  6E40               	movwf	strtod@_u+2,c
  2807  0016E2  0E00               	movlw	0
  2808  0016E4  6E41               	movwf	strtod@_u+3,c
  2809  0016E6  0E00               	movlw	0
  2810  0016E8  6E3D               	movwf	strtod@expon,c
  2811  0016EA                     l4437:
  2812  0016EA  B83C               	btfsc	strtod@flags,4,c
  2813  0016EC  D00A               	goto	l4443
  2814  0016EE  C036  FFD9         	movff	strtod@s,fsr2l
  2815  0016F2  C037  FFDA         	movff	strtod@s+1,fsr2h
  2816  0016F6  0E2E               	movlw	46
  2817  0016F8  18DE               	xorwf	postinc2,w,c
  2818  0016FA  A4D8               	btfss	status,2,c
  2819  0016FC  D002               	goto	l4443
  2820  0016FE  883C               	bsf	strtod@flags,4,c
  2821  001700  D03C               	goto	l553
  2822  001702                     l4443:
  2823  001702  C036  FFD9         	movff	strtod@s,fsr2l
  2824  001706  C037  FFDA         	movff	strtod@s+1,fsr2h
  2825  00170A  50DF               	movf	indf2,w,c
  2826  00170C  EC34  F01B         	call	_isdigit
  2827  001710  A0D8               	btfss	status,0,c
  2828  001712  D036               	goto	l4461
  2829  001714  823C               	bsf	strtod@flags,1,c
  2830  001716  0E08               	movlw	8
  2831  001718  183B               	xorwf	strtod@eexp,w,c
  2832  00171A  B4D8               	btfsc	status,2,c
  2833  00171C  D02C               	goto	l551
  2834  00171E  B83C               	btfsc	strtod@flags,4,c
  2835  001720  063D               	decf	strtod@expon,f,c
  2836  001722  2A3B               	incf	strtod@eexp,f,c
  2837  001724  C03E  F010         	movff	strtod@_u,___lmul@multiplier
  2838  001728  C03F  F011         	movff	strtod@_u+1,___lmul@multiplier+1
  2839  00172C  C040  F012         	movff	strtod@_u+2,___lmul@multiplier+2
  2840  001730  C041  F013         	movff	strtod@_u+3,___lmul@multiplier+3
  2841  001734  0E0A               	movlw	10
  2842  001736  6E14               	movwf	___lmul@multiplicand,c
  2843  001738  0E00               	movlw	0
  2844  00173A  6E15               	movwf	___lmul@multiplicand+1,c
  2845  00173C  0E00               	movlw	0
  2846  00173E  6E16               	movwf	___lmul@multiplicand+2,c
  2847  001740  0E00               	movlw	0
  2848  001742  6E17               	movwf	___lmul@multiplicand+3,c
  2849  001744  ECC2  F019         	call	___lmul	;wreg free
  2850  001748  C010  F03E         	movff	?___lmul,strtod@_u
  2851  00174C  C011  F03F         	movff	?___lmul+1,strtod@_u+1
  2852  001750  C012  F040         	movff	?___lmul+2,strtod@_u+2
  2853  001754  C013  F041         	movff	?___lmul+3,strtod@_u+3
  2854  001758  C036  FFD9         	movff	strtod@s,fsr2l
  2855  00175C  C037  FFDA         	movff	strtod@s+1,fsr2h
  2856  001760  50DF               	movf	indf2,w,c
  2857  001762  6E3A               	movwf	??_strtod& (0+255),c
  2858  001764  0ED0               	movlw	208
  2859  001766  263A               	addwf	??_strtod,f,c
  2860  001768  503A               	movf	??_strtod,w,c
  2861  00176A  263E               	addwf	strtod@_u,f,c
  2862  00176C  0E00               	movlw	0
  2863  00176E  223F               	addwfc	strtod@_u+1,f,c
  2864  001770  2240               	addwfc	strtod@_u+2,f,c
  2865  001772  2241               	addwfc	strtod@_u+3,f,c
  2866  001774  D002               	goto	l553
  2867  001776                     l551:
  2868  001776  A83C               	btfss	strtod@flags,4,c
  2869  001778  2A3D               	incf	strtod@expon,f,c
  2870  00177A                     l553:
  2871  00177A  4A36               	infsnz	strtod@s,f,c
  2872  00177C  2A37               	incf	strtod@s+1,f,c
  2873  00177E  D7B5               	goto	l4437
  2874  001780                     l4461:
  2875  001780  0E00               	movlw	0
  2876  001782  6E3B               	movwf	strtod@eexp,c
  2877  001784  C036  FFD9         	movff	strtod@s,fsr2l
  2878  001788  C037  FFDA         	movff	strtod@s+1,fsr2h
  2879  00178C  0E65               	movlw	101
  2880  00178E  18DE               	xorwf	postinc2,w,c
  2881  001790  B4D8               	btfsc	status,2,c
  2882  001792  D008               	goto	l4467
  2883  001794  C036  FFD9         	movff	strtod@s,fsr2l
  2884  001798  C037  FFDA         	movff	strtod@s+1,fsr2h
  2885  00179C  0E45               	movlw	69
  2886  00179E  18DE               	xorwf	postinc2,w,c
  2887  0017A0  A4D8               	btfss	status,2,c
  2888  0017A2  D05E               	goto	l4499
  2889  0017A4                     l4467:
  2890  0017A4  4A36               	infsnz	strtod@s,f,c
  2891  0017A6  2A37               	incf	strtod@s+1,f,c
  2892  0017A8  C036  FFD9         	movff	strtod@s,fsr2l
  2893  0017AC  C037  FFDA         	movff	strtod@s+1,fsr2h
  2894  0017B0  0E2D               	movlw	45
  2895  0017B2  18DE               	xorwf	postinc2,w,c
  2896  0017B4  A4D8               	btfss	status,2,c
  2897  0017B6  D002               	goto	l4471
  2898  0017B8  863C               	bsf	strtod@flags,3,c
  2899  0017BA  D008               	goto	l4475
  2900  0017BC                     l4471:
  2901  0017BC  C036  FFD9         	movff	strtod@s,fsr2l
  2902  0017C0  C037  FFDA         	movff	strtod@s+1,fsr2h
  2903  0017C4  0E2B               	movlw	43
  2904  0017C6  18DE               	xorwf	postinc2,w,c
  2905  0017C8  A4D8               	btfss	status,2,c
  2906  0017CA  D002               	goto	l4477
  2907  0017CC                     l4475:
  2908  0017CC  4A36               	infsnz	strtod@s,f,c
  2909  0017CE  2A37               	incf	strtod@s+1,f,c
  2910  0017D0                     l4477:
  2911  0017D0  C036  FFD9         	movff	strtod@s,fsr2l
  2912  0017D4  C037  FFDA         	movff	strtod@s+1,fsr2h
  2913  0017D8  0E30               	movlw	48
  2914  0017DA  18DE               	xorwf	postinc2,w,c
  2915  0017DC  B4D8               	btfsc	status,2,c
  2916  0017DE  D7F6               	goto	l4475
  2917  0017E0  C036  FFD9         	movff	strtod@s,fsr2l
  2918  0017E4  C037  FFDA         	movff	strtod@s+1,fsr2h
  2919  0017E8  50DF               	movf	indf2,w,c
  2920  0017EA  EC34  F01B         	call	_isdigit
  2921  0017EE  A0D8               	btfss	status,0,c
  2922  0017F0  D035               	goto	l4495
  2923  0017F2  C036  FFD9         	movff	strtod@s,fsr2l
  2924  0017F6  C037  FFDA         	movff	strtod@s+1,fsr2h
  2925  0017FA  50DF               	movf	indf2,w,c
  2926  0017FC  0FD0               	addlw	208
  2927  0017FE  6E3B               	movwf	strtod@eexp,c
  2928  001800  4A36               	infsnz	strtod@s,f,c
  2929  001802  2A37               	incf	strtod@s+1,f,c
  2930  001804  C036  FFD9         	movff	strtod@s,fsr2l
  2931  001808  C037  FFDA         	movff	strtod@s+1,fsr2h
  2932  00180C  50DF               	movf	indf2,w,c
  2933  00180E  EC34  F01B         	call	_isdigit
  2934  001812  A0D8               	btfss	status,0,c
  2935  001814  D023               	goto	l4495
  2936  001816  C036  FFD9         	movff	strtod@s,fsr2l
  2937  00181A  C037  FFDA         	movff	strtod@s+1,fsr2h
  2938  00181E  50DF               	movf	indf2,w,c
  2939  001820  6E3A               	movwf	??_strtod& (0+255),c
  2940  001822  503B               	movf	strtod@eexp,w,c
  2941  001824  0D0A               	mullw	10
  2942  001826  50F3               	movf	prodl,w,c
  2943  001828  243A               	addwf	??_strtod,w,c
  2944  00182A  0FD0               	addlw	208
  2945  00182C  6E3B               	movwf	strtod@eexp,c
  2946  00182E  4A36               	infsnz	strtod@s,f,c
  2947  001830  2A37               	incf	strtod@s+1,f,c
  2948  001832  C036  FFD9         	movff	strtod@s,fsr2l
  2949  001836  C037  FFDA         	movff	strtod@s+1,fsr2h
  2950  00183A  50DF               	movf	indf2,w,c
  2951  00183C  EC34  F01B         	call	_isdigit
  2952  001840  A0D8               	btfss	status,0,c
  2953  001842  D00C               	goto	l4495
  2954  001844  C036  FFD9         	movff	strtod@s,fsr2l
  2955  001848  C037  FFDA         	movff	strtod@s+1,fsr2h
  2956  00184C  50DF               	movf	indf2,w,c
  2957  00184E  6E3A               	movwf	??_strtod& (0+255),c
  2958  001850  503B               	movf	strtod@eexp,w,c
  2959  001852  0D0A               	mullw	10
  2960  001854  50F3               	movf	prodl,w,c
  2961  001856  243A               	addwf	??_strtod,w,c
  2962  001858  0FD0               	addlw	208
  2963  00185A  6E3B               	movwf	strtod@eexp,c
  2964  00185C                     l4495:
  2965  00185C  B63C               	btfsc	strtod@flags,3,c
  2966  00185E  6C3B               	negf	strtod@eexp,c
  2967  001860                     l4499:
  2968  001860  503B               	movf	strtod@eexp,w,c
  2969  001862  263D               	addwf	strtod@expon,f,c
  2970  001864  5038               	movf	strtod@res,w,c
  2971  001866  1039               	iorwf	strtod@res+1,w,c
  2972  001868  A4D8               	btfss	status,2,c
  2973  00186A  A23C               	btfss	strtod@flags,1,c
  2974  00186C  D008               	goto	l4507
  2975  00186E  C038  FFD9         	movff	strtod@res,fsr2l
  2976  001872  C039  FFDA         	movff	strtod@res+1,fsr2h
  2977  001876  C036  FFDE         	movff	strtod@s,postinc2
  2978  00187A  C037  FFDD         	movff	strtod@s+1,postdec2
  2979  00187E                     l4507:
  2980  00187E  C03E  F018         	movff	strtod@_u,___altoft@c
  2981  001882  C03F  F019         	movff	strtod@_u+1,___altoft@c+1
  2982  001886  C040  F01A         	movff	strtod@_u+2,___altoft@c+2
  2983  00188A  C041  F01B         	movff	strtod@_u+3,___altoft@c+3
  2984  00188E  EC5A  F018         	call	___altoft	;wreg free
  2985  001892  C018  F03E         	movff	?___altoft,strtod@_u
  2986  001896  C019  F03F         	movff	?___altoft+1,strtod@_u+1
  2987  00189A  C01A  F040         	movff	?___altoft+2,strtod@_u+2
  2988  00189E  503E               	movf	strtod@_u,w,c
  2989  0018A0  103F               	iorwf	strtod@_u+1,w,c
  2990  0018A2  1040               	iorwf	strtod@_u+2,w,c
  2991  0018A4  A4D8               	btfss	status,2,c
  2992  0018A6  D007               	goto	l4515
  2993  0018A8  0E00               	movlw	0
  2994  0018AA  6E36               	movwf	?_strtod,c
  2995  0018AC  0E00               	movlw	0
  2996  0018AE  6E37               	movwf	?_strtod+1,c
  2997  0018B0  0E00               	movlw	0
  2998  0018B2  6E38               	movwf	?_strtod+2,c
  2999  0018B4  0012               	return	
  3000  0018B6                     l4515:
  3001  0018B6  AE3D               	btfss	strtod@expon,7,c
  3002  0018B8  D056               	goto	l4543
  3003  0018BA  6C3D               	negf	strtod@expon,c
  3004  0018BC  D016               	goto	l4523
  3005  0018BE                     l4519:
  3006  0018BE  C03E  F022         	movff	strtod@_u,___ftdiv@f1
  3007  0018C2  C03F  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  3008  0018C6  C040  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  3009  0018CA  0E03               	movlw	3
  3010  0018CC  6E25               	movwf	___ftdiv@f2,c
  3011  0018CE  0E15               	movlw	21
  3012  0018D0  6E26               	movwf	___ftdiv@f2+1,c
  3013  0018D2  0E50               	movlw	80
  3014  0018D4  6E27               	movwf	___ftdiv@f2+2,c
  3015  0018D6  EC6B  F015         	call	___ftdiv	;wreg free
  3016  0018DA  C022  F03E         	movff	?___ftdiv,strtod@_u
  3017  0018DE  C023  F03F         	movff	?___ftdiv+1,strtod@_u+1
  3018  0018E2  C024  F040         	movff	?___ftdiv+2,strtod@_u+2
  3019  0018E6  0EF6               	movlw	246
  3020  0018E8  263D               	addwf	strtod@expon,f,c
  3021  0018EA                     l4523:
  3022  0018EA  503D               	movf	strtod@expon,w,c
  3023  0018EC  0A80               	xorlw	128
  3024  0018EE  0F76               	addlw	-138
  3025  0018F0  A0D8               	btfss	status,0,c
  3026  0018F2  D016               	goto	l4529
  3027  0018F4  D7E4               	goto	l4519
  3028  0018F6                     l4525:
  3029  0018F6  C03E  F022         	movff	strtod@_u,___ftdiv@f1
  3030  0018FA  C03F  F023         	movff	strtod@_u+1,___ftdiv@f1+1
  3031  0018FE  C040  F024         	movff	strtod@_u+2,___ftdiv@f1+2
  3032  001902  0E00               	movlw	0
  3033  001904  6E25               	movwf	___ftdiv@f2,c
  3034  001906  0E20               	movlw	32
  3035  001908  6E26               	movwf	___ftdiv@f2+1,c
  3036  00190A  0E41               	movlw	65
  3037  00190C  6E27               	movwf	___ftdiv@f2+2,c
  3038  00190E  EC6B  F015         	call	___ftdiv	;wreg free
  3039  001912  C022  F03E         	movff	?___ftdiv,strtod@_u
  3040  001916  C023  F03F         	movff	?___ftdiv+1,strtod@_u+1
  3041  00191A  C024  F040         	movff	?___ftdiv+2,strtod@_u+2
  3042  00191E  063D               	decf	strtod@expon,f,c
  3043  001920                     l4529:
  3044  001920  503D               	movf	strtod@expon,w,c
  3045  001922  A4D8               	btfss	status,2,c
  3046  001924  D7E8               	goto	l4525
  3047  001926  C03E  F010         	movff	strtod@_u,___ftge@ff1
  3048  00192A  C03F  F011         	movff	strtod@_u+1,___ftge@ff1+1
  3049  00192E  C040  F012         	movff	strtod@_u+2,___ftge@ff1+2
  3050  001932  0E00               	movlw	0
  3051  001934  6E13               	movwf	___ftge@ff2,c
  3052  001936  0E80               	movlw	128
  3053  001938  6E14               	movwf	___ftge@ff2+1,c
  3054  00193A  0E00               	movlw	0
  3055  00193C  6E15               	movwf	___ftge@ff2+2,c
  3056  00193E  ECD3  F016         	call	___ftge	;wreg free
  3057  001942  B0D8               	btfsc	status,0,c
  3058  001944  D061               	goto	l580
  3059  001946  A03C               	btfss	strtod@flags,0,c
  3060  001948  D007               	goto	l4539
  3061  00194A                     l4535:
  3062  00194A  0E00               	movlw	0
  3063  00194C  6E36               	movwf	?_strtod,c
  3064  00194E  0E80               	movlw	128
  3065  001950  6E37               	movwf	?_strtod+1,c
  3066  001952  0E80               	movlw	128
  3067  001954  6E38               	movwf	?_strtod+2,c
  3068  001956  0012               	return	
  3069  001958                     l4539:
  3070  001958  0E00               	movlw	0
  3071  00195A  6E36               	movwf	?_strtod,c
  3072  00195C  0E80               	movlw	128
  3073  00195E  6E37               	movwf	?_strtod+1,c
  3074  001960  0E00               	movlw	0
  3075  001962  6E38               	movwf	?_strtod+2,c
  3076  001964  0012               	return	
  3077  001966                     l4543:
  3078  001966  503D               	movf	strtod@expon,w,c
  3079  001968  0A80               	xorlw	128
  3080  00196A  0F7F               	addlw	-129
  3081  00196C  B0D8               	btfsc	status,0,c
  3082  00196E  D017               	goto	l4551
  3083  001970  D04B               	goto	l580
  3084  001972                     l4547:
  3085  001972  C03E  F024         	movff	strtod@_u,___ftmul@f1
  3086  001976  C03F  F025         	movff	strtod@_u+1,___ftmul@f1+1
  3087  00197A  C040  F026         	movff	strtod@_u+2,___ftmul@f1+2
  3088  00197E  0E03               	movlw	3
  3089  001980  6E27               	movwf	___ftmul@f2,c
  3090  001982  0E15               	movlw	21
  3091  001984  6E28               	movwf	___ftmul@f2+1,c
  3092  001986  0E50               	movlw	80
  3093  001988  6E29               	movwf	___ftmul@f2+2,c
  3094  00198A  ECF1  F014         	call	___ftmul	;wreg free
  3095  00198E  C024  F03E         	movff	?___ftmul,strtod@_u
  3096  001992  C025  F03F         	movff	?___ftmul+1,strtod@_u+1
  3097  001996  C026  F040         	movff	?___ftmul+2,strtod@_u+2
  3098  00199A  0EF6               	movlw	246
  3099  00199C  263D               	addwf	strtod@expon,f,c
  3100  00199E                     l4551:
  3101  00199E  0E0A               	movlw	10
  3102  0019A0  603D               	cpfslt	strtod@expon,c
  3103  0019A2  D7E7               	goto	l4547
  3104  0019A4  D015               	goto	l4557
  3105  0019A6                     l4553:
  3106  0019A6  C03E  F024         	movff	strtod@_u,___ftmul@f1
  3107  0019AA  C03F  F025         	movff	strtod@_u+1,___ftmul@f1+1
  3108  0019AE  C040  F026         	movff	strtod@_u+2,___ftmul@f1+2
  3109  0019B2  0E00               	movlw	0
  3110  0019B4  6E27               	movwf	___ftmul@f2,c
  3111  0019B6  0E20               	movlw	32
  3112  0019B8  6E28               	movwf	___ftmul@f2+1,c
  3113  0019BA  0E41               	movlw	65
  3114  0019BC  6E29               	movwf	___ftmul@f2+2,c
  3115  0019BE  ECF1  F014         	call	___ftmul	;wreg free
  3116  0019C2  C024  F03E         	movff	?___ftmul,strtod@_u
  3117  0019C6  C025  F03F         	movff	?___ftmul+1,strtod@_u+1
  3118  0019CA  C026  F040         	movff	?___ftmul+2,strtod@_u+2
  3119  0019CE  063D               	decf	strtod@expon,f,c
  3120  0019D0                     l4557:
  3121  0019D0  503D               	movf	strtod@expon,w,c
  3122  0019D2  A4D8               	btfss	status,2,c
  3123  0019D4  D7E8               	goto	l4553
  3124  0019D6  0EFF               	movlw	255
  3125  0019D8  6E10               	movwf	___ftge@ff1,c
  3126  0019DA  0E7F               	movlw	127
  3127  0019DC  6E11               	movwf	___ftge@ff1+1,c
  3128  0019DE  0E7F               	movlw	127
  3129  0019E0  6E12               	movwf	___ftge@ff1+2,c
  3130  0019E2  C03E  F013         	movff	strtod@_u,___ftge@ff2
  3131  0019E6  C03F  F014         	movff	strtod@_u+1,___ftge@ff2+1
  3132  0019EA  C040  F015         	movff	strtod@_u+2,___ftge@ff2+2
  3133  0019EE  ECD3  F016         	call	___ftge	;wreg free
  3134  0019F2  B0D8               	btfsc	status,0,c
  3135  0019F4  D009               	goto	l580
  3136  0019F6  B03C               	btfsc	strtod@flags,0,c
  3137  0019F8  D7A8               	goto	l4535
  3138  0019FA  0E00               	movlw	0
  3139  0019FC  6E36               	movwf	?_strtod,c
  3140  0019FE  0E80               	movlw	128
  3141  001A00  6E37               	movwf	?_strtod+1,c
  3142  001A02  0E00               	movlw	0
  3143  001A04  6E38               	movwf	?_strtod+2,c
  3144  001A06  0012               	return	
  3145  001A08                     l580:
  3146  001A08  A03C               	btfss	strtod@flags,0,c
  3147  001A0A  D00E               	goto	l4573
  3148  001A0C  C03E  F033         	movff	strtod@_u,___ftneg@f1
  3149  001A10  C03F  F034         	movff	strtod@_u+1,___ftneg@f1+1
  3150  001A14  C040  F035         	movff	strtod@_u+2,___ftneg@f1+2
  3151  001A18  ECFF  F01A         	call	___ftneg	;wreg free
  3152  001A1C  C033  F03E         	movff	?___ftneg,strtod@_u
  3153  001A20  C034  F03F         	movff	?___ftneg+1,strtod@_u+1
  3154  001A24  C035  F040         	movff	?___ftneg+2,strtod@_u+2
  3155  001A28                     l4573:
  3156  001A28  C03E  F036         	movff	strtod@_u,?_strtod
  3157  001A2C  C03F  F037         	movff	strtod@_u+1,?_strtod+1
  3158  001A30  C040  F038         	movff	strtod@_u+2,?_strtod+2
  3159  001A34  0012               	return	
  3160  001A36                     __end_of_strtod:
  3161                           	opt stack 0
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           prodh	equ	0xFF4
  3167                           prodl	equ	0xFF3
  3168                           intcon	equ	0xFF2
  3169                           postinc0	equ	0xFEE
  3170                           wreg	equ	0xFE8
  3171                           indf1	equ	0xFE7
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _isspace *****************
  3182 ;; Defined at:
  3183 ;;		line 8 in file "D:\mplab\sources\common\isspace.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  c               1    wreg     unsigned char 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  c               1   17[COMRAM] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;		None               void
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3197 ;;      Params:         0       0       0       0       0       0       0       0       0
  3198 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3199 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3200 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3201 ;;Total ram usage:        3 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    1
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_strtod
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text11
  3212  0035B2                     __ptext11:
  3213                           	opt stack 0
  3214  0035B2                     _isspace:
  3215                           	opt stack 26
  3216                           
  3217                           ;incstack = 0
  3218                           ;isspace@c stored from wreg
  3219  0035B2  6E12               	movwf	isspace@c,c
  3220  0035B4  0E01               	movlw	1
  3221  0035B6  6E11               	movwf	_isspace$836,c
  3222  0035B8  0E20               	movlw	32
  3223  0035BA  1812               	xorwf	isspace@c,w,c
  3224  0035BC  B4D8               	btfsc	status,2,c
  3225  0035BE  D008               	goto	l2921
  3226  0035C0  0E0E               	movlw	14
  3227  0035C2  6012               	cpfslt	isspace@c,c
  3228  0035C4  D003               	goto	l2919
  3229  0035C6  0E09               	movlw	9
  3230  0035C8  6012               	cpfslt	isspace@c,c
  3231  0035CA  D002               	goto	l2921
  3232  0035CC                     l2919:
  3233  0035CC  0E00               	movlw	0
  3234  0035CE  6E11               	movwf	_isspace$836,c
  3235  0035D0                     l2921:
  3236  0035D0  C011  F010         	movff	_isspace$836,??_isspace
  3237  0035D4  3010               	rrcf	??_isspace,w,c
  3238  0035D6  0012               	return	
  3239  0035D8                     __end_of_isspace:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           indf1	equ	0xFE7
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function ___lmul *****************
  3261 ;; Defined at:
  3262 ;;		line 15 in file "D:\mplab\sources\common\Umul32.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  multiplier      4   15[COMRAM] unsigned long 
  3265 ;;  multiplicand    4   19[COMRAM] unsigned long 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;  product         4   23[COMRAM] unsigned long 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  4   15[COMRAM] unsigned long 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3277 ;;      Params:         8       0       0       0       0       0       0       0       0
  3278 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3280 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3281 ;;Total ram usage:       12 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    1
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_strtod
  3288 ;;		_atol
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text12
  3293  003384                     __ptext12:
  3294                           	opt stack 0
  3295  003384                     ___lmul:
  3296                           	opt stack 26
  3297                           
  3298                           ;incstack = 0
  3299  003384  0E00               	movlw	0
  3300  003386  6E18               	movwf	___lmul@product,c
  3301  003388  0E00               	movlw	0
  3302  00338A  6E19               	movwf	___lmul@product+1,c
  3303  00338C  0E00               	movlw	0
  3304  00338E  6E1A               	movwf	___lmul@product+2,c
  3305  003390  0E00               	movlw	0
  3306  003392  6E1B               	movwf	___lmul@product+3,c
  3307  003394                     l2723:
  3308  003394  A010               	btfss	___lmul@multiplier,0,c
  3309  003396  D008               	goto	l2727
  3310  003398  5014               	movf	___lmul@multiplicand,w,c
  3311  00339A  2618               	addwf	___lmul@product,f,c
  3312  00339C  5015               	movf	___lmul@multiplicand+1,w,c
  3313  00339E  2219               	addwfc	___lmul@product+1,f,c
  3314  0033A0  5016               	movf	___lmul@multiplicand+2,w,c
  3315  0033A2  221A               	addwfc	___lmul@product+2,f,c
  3316  0033A4  5017               	movf	___lmul@multiplicand+3,w,c
  3317  0033A6  221B               	addwfc	___lmul@product+3,f,c
  3318  0033A8                     l2727:
  3319  0033A8  90D8               	bcf	status,0,c
  3320  0033AA  3614               	rlcf	___lmul@multiplicand,f,c
  3321  0033AC  3615               	rlcf	___lmul@multiplicand+1,f,c
  3322  0033AE  3616               	rlcf	___lmul@multiplicand+2,f,c
  3323  0033B0  3617               	rlcf	___lmul@multiplicand+3,f,c
  3324  0033B2  90D8               	bcf	status,0,c
  3325  0033B4  3213               	rrcf	___lmul@multiplier+3,f,c
  3326  0033B6  3212               	rrcf	___lmul@multiplier+2,f,c
  3327  0033B8  3211               	rrcf	___lmul@multiplier+1,f,c
  3328  0033BA  3210               	rrcf	___lmul@multiplier,f,c
  3329  0033BC  5010               	movf	___lmul@multiplier,w,c
  3330  0033BE  1011               	iorwf	___lmul@multiplier+1,w,c
  3331  0033C0  1012               	iorwf	___lmul@multiplier+2,w,c
  3332  0033C2  1013               	iorwf	___lmul@multiplier+3,w,c
  3333  0033C4  A4D8               	btfss	status,2,c
  3334  0033C6  D7E6               	goto	l2723
  3335  0033C8  C018  F010         	movff	___lmul@product,?___lmul
  3336  0033CC  C019  F011         	movff	___lmul@product+1,?___lmul+1
  3337  0033D0  C01A  F012         	movff	___lmul@product+2,?___lmul+2
  3338  0033D4  C01B  F013         	movff	___lmul@product+3,?___lmul+3
  3339  0033D8  0012               	return		;funcret
  3340  0033DA                     __end_of___lmul:
  3341                           	opt stack 0
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           prodh	equ	0xFF4
  3347                           prodl	equ	0xFF3
  3348                           intcon	equ	0xFF2
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           indf1	equ	0xFE7
  3352                           fsr1h	equ	0xFE2
  3353                           fsr1l	equ	0xFE1
  3354                           indf2	equ	0xFDF
  3355                           postinc2	equ	0xFDE
  3356                           postdec2	equ	0xFDD
  3357                           fsr2h	equ	0xFDA
  3358                           fsr2l	equ	0xFD9
  3359                           status	equ	0xFD8
  3360                           
  3361 ;; *************** function _convert_to_degrees *****************
  3362 ;; Defined at:
  3363 ;;		line 262 in file "GPS.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;  NMEA_lat_lon    3    6[BANK0 ] float 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;  decimal         3   17[BANK0 ] float 
  3368 ;;  dec_deg         3   12[BANK0 ] float 
  3369 ;;  minutes         3    9[BANK0 ] float 
  3370 ;;  position        3    0        float 
  3371 ;;  degrees         2   15[BANK0 ] int 
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  3    6[BANK0 ] float 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3381 ;;      Params:         0       3       0       0       0       0       0       0       0
  3382 ;;      Locals:         0      11       0       0       0       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3384 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3385 ;;Total ram usage:       14 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:    3
  3388 ;; This function calls:
  3389 ;;		___awtoft
  3390 ;;		___ftadd
  3391 ;;		___ftdiv
  3392 ;;		___ftmul
  3393 ;;		___ftneg
  3394 ;;		___fttol
  3395 ;; This function is called by:
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text13
  3401  00232C                     __ptext13:
  3402                           	opt stack 0
  3403  00232C                     _convert_to_degrees:
  3404                           	opt stack 27
  3405                           
  3406                           ;GPS.c: 265: float minutes, dec_deg, decimal;
  3407                           ;GPS.c: 267: int degrees;
  3408                           ;GPS.c: 269: float position;
  3409                           ;GPS.c: 271: degrees = (int)(NMEA_lat_long/100.00);
  3410                           
  3411                           ;incstack = 0
  3412  00232C  0E00               	movlw	0
  3413  00232E  6E25               	movwf	___ftdiv@f2,c
  3414  002330  0EC8               	movlw	200
  3415  002332  6E26               	movwf	___ftdiv@f2+1,c
  3416  002334  0E42               	movlw	66
  3417  002336  6E27               	movwf	___ftdiv@f2+2,c
  3418  002338  C066  F022         	movff	convert_to_degrees@NMEA_lat_long,___ftdiv@f1
  3419  00233C  C067  F023         	movff	convert_to_degrees@NMEA_lat_long+1,___ftdiv@f1+1
  3420  002340  C068  F024         	movff	convert_to_degrees@NMEA_lat_long+2,___ftdiv@f1+2
  3421  002344  EC6B  F015         	call	___ftdiv	;wreg free
  3422  002348  C022  F03A         	movff	?___ftdiv,___fttol@f1
  3423  00234C  C023  F03B         	movff	?___ftdiv+1,___fttol@f1+1
  3424  002350  C024  F03C         	movff	?___ftdiv+2,___fttol@f1+2
  3425  002354  EC5E  F013         	call	___fttol	;wreg free
  3426  002358  C03A  F06F         	movff	?___fttol,convert_to_degrees@degrees
  3427  00235C  C03B  F070         	movff	?___fttol+1,convert_to_degrees@degrees+1
  3428                           
  3429                           ;GPS.c: 272: minutes = NMEA_lat_long - degrees*100.00;
  3430  002360  0E00               	movlw	0
  3431  002362  6E27               	movwf	___ftmul@f2,c
  3432  002364  0EC8               	movlw	200
  3433  002366  6E28               	movwf	___ftmul@f2+1,c
  3434  002368  0E42               	movlw	66
  3435  00236A  6E29               	movwf	___ftmul@f2+2,c
  3436  00236C  C06F  F018         	movff	convert_to_degrees@degrees,___awtoft@c
  3437  002370  C070  F019         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  3438  002374  EC5C  F01A         	call	___awtoft	;wreg free
  3439  002378  C018  F024         	movff	?___awtoft,___ftmul@f1
  3440  00237C  C019  F025         	movff	?___awtoft+1,___ftmul@f1+1
  3441  002380  C01A  F026         	movff	?___awtoft+2,___ftmul@f1+2
  3442  002384  ECF1  F014         	call	___ftmul	;wreg free
  3443  002388  C024  F033         	movff	?___ftmul,___ftneg@f1
  3444  00238C  C025  F034         	movff	?___ftmul+1,___ftneg@f1+1
  3445  002390  C026  F035         	movff	?___ftmul+2,___ftneg@f1+2
  3446  002394  ECFF  F01A         	call	___ftneg	;wreg free
  3447  002398  C033  F03D         	movff	?___ftneg,___ftadd@f1
  3448  00239C  C034  F03E         	movff	?___ftneg+1,___ftadd@f1+1
  3449  0023A0  C035  F03F         	movff	?___ftneg+2,___ftadd@f1+2
  3450  0023A4  C066  F040         	movff	convert_to_degrees@NMEA_lat_long,___ftadd@f2
  3451  0023A8  C067  F041         	movff	convert_to_degrees@NMEA_lat_long+1,___ftadd@f2+1
  3452  0023AC  C068  F042         	movff	convert_to_degrees@NMEA_lat_long+2,___ftadd@f2+2
  3453  0023B0  ECFA  F00F         	call	___ftadd	;wreg free
  3454  0023B4  C03D  F069         	movff	?___ftadd,convert_to_degrees@minutes
  3455  0023B8  C03E  F06A         	movff	?___ftadd+1,convert_to_degrees@minutes+1
  3456  0023BC  C03F  F06B         	movff	?___ftadd+2,convert_to_degrees@minutes+2
  3457                           
  3458                           ;GPS.c: 273: dec_deg = minutes / 60.00;
  3459  0023C0  C069  F022         	movff	convert_to_degrees@minutes,___ftdiv@f1
  3460  0023C4  C06A  F023         	movff	convert_to_degrees@minutes+1,___ftdiv@f1+1
  3461  0023C8  C06B  F024         	movff	convert_to_degrees@minutes+2,___ftdiv@f1+2
  3462  0023CC  0E00               	movlw	0
  3463  0023CE  6E25               	movwf	___ftdiv@f2,c
  3464  0023D0  0E70               	movlw	112
  3465  0023D2  6E26               	movwf	___ftdiv@f2+1,c
  3466  0023D4  0E42               	movlw	66
  3467  0023D6  6E27               	movwf	___ftdiv@f2+2,c
  3468  0023D8  EC6B  F015         	call	___ftdiv	;wreg free
  3469  0023DC  C022  F06C         	movff	?___ftdiv,convert_to_degrees@dec_deg
  3470  0023E0  C023  F06D         	movff	?___ftdiv+1,convert_to_degrees@dec_deg+1
  3471  0023E4  C024  F06E         	movff	?___ftdiv+2,convert_to_degrees@dec_deg+2
  3472                           
  3473                           ;GPS.c: 274: decimal = degrees + dec_deg;
  3474  0023E8  C06F  F018         	movff	convert_to_degrees@degrees,___awtoft@c
  3475  0023EC  C070  F019         	movff	convert_to_degrees@degrees+1,___awtoft@c+1
  3476  0023F0  EC5C  F01A         	call	___awtoft	;wreg free
  3477  0023F4  C018  F03D         	movff	?___awtoft,___ftadd@f1
  3478  0023F8  C019  F03E         	movff	?___awtoft+1,___ftadd@f1+1
  3479  0023FC  C01A  F03F         	movff	?___awtoft+2,___ftadd@f1+2
  3480  002400  C06C  F040         	movff	convert_to_degrees@dec_deg,___ftadd@f2
  3481  002404  C06D  F041         	movff	convert_to_degrees@dec_deg+1,___ftadd@f2+1
  3482  002408  C06E  F042         	movff	convert_to_degrees@dec_deg+2,___ftadd@f2+2
  3483  00240C  ECFA  F00F         	call	___ftadd	;wreg free
  3484  002410  C03D  F071         	movff	?___ftadd,convert_to_degrees@decimal
  3485  002414  C03E  F072         	movff	?___ftadd+1,convert_to_degrees@decimal+1
  3486  002418  C03F  F073         	movff	?___ftadd+2,convert_to_degrees@decimal+2
  3487                           
  3488                           ;GPS.c: 275: if (N_S == 'S' || E_W == 'W') {
  3489  00241C  0E53               	movlw	83
  3490  00241E  184F               	xorwf	_N_S,w,c
  3491  002420  B4D8               	btfsc	status,2,c
  3492  002422  D004               	goto	l4949
  3493  002424  0E57               	movlw	87
  3494  002426  184E               	xorwf	_E_W,w,c
  3495  002428  A4D8               	btfss	status,2,c
  3496  00242A  D014               	goto	l4951
  3497  00242C                     l4949:
  3498                           
  3499                           ;GPS.c: 276: decimal *= -1;
  3500  00242C  C071  F024         	movff	convert_to_degrees@decimal,___ftmul@f1
  3501  002430  C072  F025         	movff	convert_to_degrees@decimal+1,___ftmul@f1+1
  3502  002434  C073  F026         	movff	convert_to_degrees@decimal+2,___ftmul@f1+2
  3503  002438  0E00               	movlw	0
  3504  00243A  6E27               	movwf	___ftmul@f2,c
  3505  00243C  0E80               	movlw	128
  3506  00243E  6E28               	movwf	___ftmul@f2+1,c
  3507  002440  0EBF               	movlw	191
  3508  002442  6E29               	movwf	___ftmul@f2+2,c
  3509  002444  ECF1  F014         	call	___ftmul	;wreg free
  3510  002448  C024  F071         	movff	?___ftmul,convert_to_degrees@decimal
  3511  00244C  C025  F072         	movff	?___ftmul+1,convert_to_degrees@decimal+1
  3512  002450  C026  F073         	movff	?___ftmul+2,convert_to_degrees@decimal+2
  3513  002454                     l4951:
  3514                           
  3515                           ;GPS.c: 277: }
  3516                           ;GPS.c: 279: return decimal;
  3517  002454  C071  F066         	movff	convert_to_degrees@decimal,?_convert_to_degrees
  3518  002458  C072  F067         	movff	convert_to_degrees@decimal+1,?_convert_to_degrees+1
  3519  00245C  C073  F068         	movff	convert_to_degrees@decimal+2,?_convert_to_degrees+2
  3520  002460  0012               	return	
  3521  002462                     __end_of_convert_to_degrees:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           intcon	equ	0xFF2
  3530                           postinc0	equ	0xFEE
  3531                           wreg	equ	0xFE8
  3532                           indf1	equ	0xFE7
  3533                           fsr1h	equ	0xFE2
  3534                           fsr1l	equ	0xFE1
  3535                           indf2	equ	0xFDF
  3536                           postinc2	equ	0xFDE
  3537                           postdec2	equ	0xFDD
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function ___awtoft *****************
  3543 ;; Defined at:
  3544 ;;		line 32 in file "D:\mplab\sources\common\awtoft.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  c               2   23[COMRAM] int 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  sign            1   26[COMRAM] unsigned char 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  3   23[COMRAM] float 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3558 ;;      Params:         3       0       0       0       0       0       0       0       0
  3559 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3561 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3562 ;;Total ram usage:        4 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    2
  3565 ;; This function calls:
  3566 ;;		___ftpack
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;;		_convert_to_degrees
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text14
  3574  0034B8                     __ptext14:
  3575                           	opt stack 0
  3576  0034B8                     ___awtoft:
  3577                           	opt stack 27
  3578                           
  3579                           ;incstack = 0
  3580  0034B8  0E00               	movlw	0
  3581  0034BA  6E1B               	movwf	___awtoft@sign,c
  3582  0034BC  AE19               	btfss	___awtoft@c+1,7,c
  3583  0034BE  D006               	goto	l4905
  3584  0034C0  6C18               	negf	___awtoft@c,c
  3585  0034C2  1E19               	comf	___awtoft@c+1,f,c
  3586  0034C4  B0D8               	btfsc	status,0,c
  3587  0034C6  2A19               	incf	___awtoft@c+1,f,c
  3588  0034C8  0E01               	movlw	1
  3589  0034CA  6E1B               	movwf	___awtoft@sign,c
  3590  0034CC                     l4905:
  3591  0034CC  C018  F010         	movff	___awtoft@c,___ftpack@arg
  3592  0034D0  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  3593  0034D4  6A12               	clrf	___ftpack@arg+2,c
  3594  0034D6  0E8E               	movlw	142
  3595  0034D8  6E13               	movwf	___ftpack@exp,c
  3596  0034DA  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  3597  0034DE  ECDE  F015         	call	___ftpack	;wreg free
  3598  0034E2  C010  F018         	movff	?___ftpack,?___awtoft
  3599  0034E6  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  3600  0034EA  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  3601  0034EE  0012               	return	
  3602  0034F0                     __end_of___awtoft:
  3603                           	opt stack 0
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           intcon	equ	0xFF2
  3611                           postinc0	equ	0xFEE
  3612                           wreg	equ	0xFE8
  3613                           indf1	equ	0xFE7
  3614                           fsr1h	equ	0xFE2
  3615                           fsr1l	equ	0xFE1
  3616                           indf2	equ	0xFDF
  3617                           postinc2	equ	0xFDE
  3618                           postdec2	equ	0xFDD
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function _convert_time_to_UTC *****************
  3624 ;; Defined at:
  3625 ;;		line 250 in file "GPS.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  UTC_Time        4   52[BANK0 ] unsigned long 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  sec             2   64[BANK0 ] unsigned int 
  3630 ;;  min             2   62[BANK0 ] unsigned int 
  3631 ;;  hour            2   60[BANK0 ] unsigned int 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3641 ;;      Params:         0       4       0       0       0       0       0       0       0
  3642 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3643 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3644 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3645 ;;Total ram usage:       14 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    5
  3648 ;; This function calls:
  3649 ;;		___lldiv
  3650 ;;		___llmod
  3651 ;;		_sprintf
  3652 ;; This function is called by:
  3653 ;;		_main
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text15
  3658  0027D8                     __ptext15:
  3659                           	opt stack 0
  3660  0027D8                     _convert_time_to_UTC:
  3661                           	opt stack 25
  3662                           
  3663                           ;GPS.c: 252: unsigned int hour, min, sec;
  3664                           ;GPS.c: 254: hour = (UTC_Time / 10000);
  3665                           
  3666                           ;incstack = 0
  3667  0027D8  C094  F019         	movff	convert_time_to_UTC@UTC_Time,___lldiv@dividend
  3668  0027DC  C095  F01A         	movff	convert_time_to_UTC@UTC_Time+1,___lldiv@dividend+1
  3669  0027E0  C096  F01B         	movff	convert_time_to_UTC@UTC_Time+2,___lldiv@dividend+2
  3670  0027E4  C097  F01C         	movff	convert_time_to_UTC@UTC_Time+3,___lldiv@dividend+3
  3671  0027E8  0E10               	movlw	16
  3672  0027EA  6E1D               	movwf	___lldiv@divisor,c
  3673  0027EC  0E27               	movlw	39
  3674  0027EE  6E1E               	movwf	___lldiv@divisor+1,c
  3675  0027F0  0E00               	movlw	0
  3676  0027F2  6E1F               	movwf	___lldiv@divisor+2,c
  3677  0027F4  0E00               	movlw	0
  3678  0027F6  6E20               	movwf	___lldiv@divisor+3,c
  3679  0027F8  EC9F  F017         	call	___lldiv	;wreg free
  3680  0027FC  C019  F09C         	movff	?___lldiv,convert_time_to_UTC@hour
  3681  002800  C01A  F09D         	movff	?___lldiv+1,convert_time_to_UTC@hour+1
  3682                           
  3683                           ;GPS.c: 255: min = (UTC_Time % 10000) / 100;
  3684  002804  0E10               	movlw	16
  3685  002806  6E14               	movwf	___llmod@divisor,c
  3686  002808  0E27               	movlw	39
  3687  00280A  6E15               	movwf	___llmod@divisor+1,c
  3688  00280C  0E00               	movlw	0
  3689  00280E  6E16               	movwf	___llmod@divisor+2,c
  3690  002810  0E00               	movlw	0
  3691  002812  6E17               	movwf	___llmod@divisor+3,c
  3692  002814  C094  F010         	movff	convert_time_to_UTC@UTC_Time,___llmod@dividend
  3693  002818  C095  F011         	movff	convert_time_to_UTC@UTC_Time+1,___llmod@dividend+1
  3694  00281C  C096  F012         	movff	convert_time_to_UTC@UTC_Time+2,___llmod@dividend+2
  3695  002820  C097  F013         	movff	convert_time_to_UTC@UTC_Time+3,___llmod@dividend+3
  3696  002824  EC07  F019         	call	___llmod	;wreg free
  3697  002828  C010  F019         	movff	?___llmod,___lldiv@dividend
  3698  00282C  C011  F01A         	movff	?___llmod+1,___lldiv@dividend+1
  3699  002830  C012  F01B         	movff	?___llmod+2,___lldiv@dividend+2
  3700  002834  C013  F01C         	movff	?___llmod+3,___lldiv@dividend+3
  3701  002838  0E64               	movlw	100
  3702  00283A  6E1D               	movwf	___lldiv@divisor,c
  3703  00283C  0E00               	movlw	0
  3704  00283E  6E1E               	movwf	___lldiv@divisor+1,c
  3705  002840  0E00               	movlw	0
  3706  002842  6E1F               	movwf	___lldiv@divisor+2,c
  3707  002844  0E00               	movlw	0
  3708  002846  6E20               	movwf	___lldiv@divisor+3,c
  3709  002848  EC9F  F017         	call	___lldiv	;wreg free
  3710  00284C  C019  F09E         	movff	?___lldiv,convert_time_to_UTC@min
  3711  002850  C01A  F09F         	movff	?___lldiv+1,convert_time_to_UTC@min+1
  3712                           
  3713                           ;GPS.c: 256: sec = (UTC_Time % 10000) % 100;
  3714  002854  0E10               	movlw	16
  3715  002856  6E14               	movwf	___llmod@divisor,c
  3716  002858  0E27               	movlw	39
  3717  00285A  6E15               	movwf	___llmod@divisor+1,c
  3718  00285C  0E00               	movlw	0
  3719  00285E  6E16               	movwf	___llmod@divisor+2,c
  3720  002860  0E00               	movlw	0
  3721  002862  6E17               	movwf	___llmod@divisor+3,c
  3722  002864  C094  F010         	movff	convert_time_to_UTC@UTC_Time,___llmod@dividend
  3723  002868  C095  F011         	movff	convert_time_to_UTC@UTC_Time+1,___llmod@dividend+1
  3724  00286C  C096  F012         	movff	convert_time_to_UTC@UTC_Time+2,___llmod@dividend+2
  3725  002870  C097  F013         	movff	convert_time_to_UTC@UTC_Time+3,___llmod@dividend+3
  3726  002874  EC07  F019         	call	___llmod	;wreg free
  3727  002878  C010  F098         	movff	?___llmod,_convert_time_to_UTC$1184
  3728  00287C  C011  F099         	movff	?___llmod+1,_convert_time_to_UTC$1184+1
  3729  002880  C012  F09A         	movff	?___llmod+2,_convert_time_to_UTC$1184+2
  3730  002884  C013  F09B         	movff	?___llmod+3,_convert_time_to_UTC$1184+3
  3731                           
  3732                           ;GPS.c: 256: sec = (UTC_Time % 10000) % 100;
  3733  002888  C098  F010         	movff	_convert_time_to_UTC$1184,___llmod@dividend
  3734  00288C  C099  F011         	movff	_convert_time_to_UTC$1184+1,___llmod@dividend+1
  3735  002890  C09A  F012         	movff	_convert_time_to_UTC$1184+2,___llmod@dividend+2
  3736  002894  C09B  F013         	movff	_convert_time_to_UTC$1184+3,___llmod@dividend+3
  3737  002898  0E64               	movlw	100
  3738  00289A  6E14               	movwf	___llmod@divisor,c
  3739  00289C  0E00               	movlw	0
  3740  00289E  6E15               	movwf	___llmod@divisor+1,c
  3741  0028A0  0E00               	movlw	0
  3742  0028A2  6E16               	movwf	___llmod@divisor+2,c
  3743  0028A4  0E00               	movlw	0
  3744  0028A6  6E17               	movwf	___llmod@divisor+3,c
  3745  0028A8  EC07  F019         	call	___llmod	;wreg free
  3746  0028AC  C010  F0A0         	movff	?___llmod,convert_time_to_UTC@sec
  3747  0028B0  C011  F0A1         	movff	?___llmod+1,convert_time_to_UTC@sec+1
  3748                           
  3749                           ;GPS.c: 258: sprintf(Data_Buffer, "%d:%d:%d", hour,min,sec);
  3750  0028B4  0ED8               	movlw	low _Data_Buffer
  3751  0028B6  0100               	movlb	0	; () banked
  3752  0028B8  6F69               	movwf	sprintf@sp& (0+255),b
  3753  0028BA  0E00               	movlw	high _Data_Buffer
  3754  0028BC  0100               	movlb	0	; () banked
  3755  0028BE  6F6A               	movwf	(sprintf@sp+1)& (0+255),b
  3756  0028C0  0E82               	movlw	low STR_14
  3757  0028C2  0100               	movlb	0	; () banked
  3758  0028C4  6F6B               	movwf	sprintf@f& (0+255),b
  3759  0028C6  0E08               	movlw	high STR_14
  3760  0028C8  0100               	movlb	0	; () banked
  3761  0028CA  6F6C               	movwf	(sprintf@f+1)& (0+255),b
  3762  0028CC  C09C  F06D         	movff	convert_time_to_UTC@hour,?_sprintf+4
  3763  0028D0  C09D  F06E         	movff	convert_time_to_UTC@hour+1,?_sprintf+5
  3764  0028D4  C09E  F06F         	movff	convert_time_to_UTC@min,?_sprintf+6
  3765  0028D8  C09F  F070         	movff	convert_time_to_UTC@min+1,?_sprintf+7
  3766  0028DC  C0A0  F071         	movff	convert_time_to_UTC@sec,?_sprintf+8
  3767  0028E0  C0A1  F072         	movff	convert_time_to_UTC@sec+1,?_sprintf+9
  3768  0028E4  EC5C  F004         	call	_sprintf	;wreg free
  3769  0028E8  0012               	return		;funcret
  3770  0028EA                     __end_of_convert_time_to_UTC:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           postinc0	equ	0xFEE
  3780                           wreg	equ	0xFE8
  3781                           indf1	equ	0xFE7
  3782                           fsr1h	equ	0xFE2
  3783                           fsr1l	equ	0xFE1
  3784                           indf2	equ	0xFDF
  3785                           postinc2	equ	0xFDE
  3786                           postdec2	equ	0xFDD
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _sprintf *****************
  3792 ;; Defined at:
  3793 ;;		line 492 in file "D:\mplab\sources\common\doprnt.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  sp              2    9[BANK0 ] PTR unsigned char 
  3796 ;;		 -> Data_Buffer(15), main@GPS_Buffer(15), Temperature(10), 
  3797 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3798 ;;		 -> STR_14(9), STR_12(5), STR_9(6), STR_6(6), 
  3799 ;;		 -> STR_1(8), 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  val             4   42[BANK0 ] unsigned long 
  3802 ;;  tmpval          4   38[BANK0 ] struct .
  3803 ;;  fval            3   46[BANK0 ] struct .
  3804 ;;  prec            2   49[BANK0 ] int 
  3805 ;;  exp             2   36[BANK0 ] int 
  3806 ;;  flag            2   34[BANK0 ] unsigned short 
  3807 ;;  ap              2   32[BANK0 ] PTR void [1]
  3808 ;;		 -> ?_sprintf(2), 
  3809 ;;  len             2   30[BANK0 ] unsigned int 
  3810 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
  3811 ;;		 -> sprintf@c(1), 
  3812 ;;  width           2    0        int 
  3813 ;;  c               1   51[BANK0 ] char 
  3814 ;;  d               1    0        unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  2    9[BANK0 ] int 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3824 ;;      Params:         0      10       0       0       0       0       0       0       0
  3825 ;;      Locals:         0      27       0       0       0       0       0       0       0
  3826 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3827 ;;      Totals:         0      43       0       0       0       0       0       0       0
  3828 ;;Total ram usage:       43 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    4
  3831 ;; This function calls:
  3832 ;;		___awdiv
  3833 ;;		___ftadd
  3834 ;;		___ftge
  3835 ;;		___ftmul
  3836 ;;		___ftneg
  3837 ;;		___ftsub
  3838 ;;		___fttol
  3839 ;;		___lldiv
  3840 ;;		___llmod
  3841 ;;		___lltoft
  3842 ;;		___wmul
  3843 ;;		__div_to_l_
  3844 ;;		__tdiv_to_l_
  3845 ;;		_fround
  3846 ;;		_isdigit
  3847 ;;		_scale
  3848 ;; This function is called by:
  3849 ;;		_main
  3850 ;;		_convert_time_to_UTC
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text16
  3855  0008B8                     __ptext16:
  3856                           	opt stack 0
  3857  0008B8                     _sprintf:
  3858                           	opt stack 26
  3859                           
  3860                           ;doprnt.c: 494: va_list ap;
  3861                           ;doprnt.c: 499: signed char c;
  3862                           ;doprnt.c: 501: int width;
  3863                           ;doprnt.c: 504: int prec;
  3864                           ;doprnt.c: 508: unsigned short flag;
  3865                           ;doprnt.c: 515: char d;
  3866                           ;doprnt.c: 516: double fval;
  3867                           ;doprnt.c: 517: int exp;
  3868                           ;doprnt.c: 523: union {
  3869                           ;doprnt.c: 524: unsigned long vd;
  3870                           ;doprnt.c: 525: double integ;
  3871                           ;doprnt.c: 526: } tmpval;
  3872                           ;doprnt.c: 528: unsigned long val;
  3873                           ;doprnt.c: 529: unsigned len;
  3874                           ;doprnt.c: 530: const char * cp;
  3875                           ;doprnt.c: 533: *ap = __va_start();
  3876                           
  3877                           ;incstack = 0
  3878  0008B8  0E6D               	movlw	low (?_sprintf+4)
  3879  0008BA  0100               	movlb	0	; () banked
  3880  0008BC  6F80               	movwf	sprintf@ap& (0+255),b
  3881  0008BE  0E00               	movlw	high (?_sprintf+4)
  3882  0008C0  0100               	movlb	0	; () banked
  3883  0008C2  6F81               	movwf	(sprintf@ap+1)& (0+255),b
  3884                           
  3885                           ;doprnt.c: 536: while(c = *f++) {
  3886  0008C4  EF32  F009         	goto	l4887
  3887  0008C8                     l4635:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;doprnt.c: 538: if(c != '%')
  3891  0008C8  0E25               	movlw	37
  3892  0008CA  0100               	movlb	0	; () banked
  3893  0008CC  1993               	xorwf	sprintf@c& (0+255),w,b
  3894  0008CE  B4D8               	btfsc	status,2,c
  3895  0008D0  D00B               	goto	l4641
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;doprnt.c: 540: {
  3899                           ;doprnt.c: 541: ((*sp++ = (c)));
  3900  0008D2  C069  FFD9         	movff	sprintf@sp,fsr2l
  3901  0008D6  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  3902  0008DA  C093  FFDF         	movff	sprintf@c,indf2
  3903                           
  3904                           ; BSR set to: 0
  3905  0008DE  0100               	movlb	0	; () banked
  3906  0008E0  4B69               	infsnz	sprintf@sp& (0+255),f,b
  3907  0008E2  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  3908                           
  3909                           ;doprnt.c: 542: continue;
  3910  0008E4  EF32  F009         	goto	l4887
  3911  0008E8                     l4641:
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;doprnt.c: 543: }
  3915                           ;doprnt.c: 548: flag = 0;
  3916  0008E8  0E00               	movlw	0
  3917  0008EA  0100               	movlb	0	; () banked
  3918  0008EC  6F83               	movwf	(sprintf@flag+1)& (0+255),b
  3919  0008EE  0E00               	movlw	0
  3920  0008F0  6F82               	movwf	sprintf@flag& (0+255),b
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;doprnt.c: 611: if(*f == '.') {
  3924  0008F2  C06B  FFF6         	movff	sprintf@f,tblptrl
  3925  0008F6  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3926  0008FA                     	if	0	;tblptru may be non-zero
  3927  0008FA                     	endif
  3928  0008FA                     	if	0	;tblptru may be non-zero
  3929  0008FA                     	endif
  3930  0008FA  0008               	tblrd		*
  3931  0008FC  50F5               	movf	tablat,w,c
  3932  0008FE  0A2E               	xorlw	46
  3933  000900  A4D8               	btfss	status,2,c
  3934  000902  D034               	goto	l4655
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 612: flag |= 0x4000;
  3938  000904  0100               	movlb	0	; () banked
  3939  000906  8D83               	bsf	(sprintf@flag+1)& (0+255),6,b
  3940                           
  3941                           ;doprnt.c: 613: f++;
  3942  000908  0100               	movlb	0	; () banked
  3943  00090A  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3944  00090C  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;doprnt.c: 620: {
  3948                           ;doprnt.c: 621: prec = 0;
  3949  00090E  0E00               	movlw	0
  3950  000910  0100               	movlb	0	; () banked
  3951  000912  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  3952  000914  0E00               	movlw	0
  3953  000916  6F91               	movwf	sprintf@prec& (0+255),b
  3954                           
  3955                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3956  000918  D01E               	goto	l4653
  3957  00091A                     l4649:
  3958                           
  3959                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3960  00091A  C091  F01E         	movff	sprintf@prec,___wmul@multiplier
  3961  00091E  C092  F01F         	movff	sprintf@prec+1,___wmul@multiplier+1
  3962  000922  0E00               	movlw	0
  3963  000924  6E21               	movwf	___wmul@multiplicand+1,c
  3964  000926  0E0A               	movlw	10
  3965  000928  6E20               	movwf	___wmul@multiplicand,c
  3966  00092A  ECEC  F01A         	call	___wmul	;wreg free
  3967  00092E  C06B  FFF6         	movff	sprintf@f,tblptrl
  3968  000932  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3969  000936                     	if	0	;tblptru may be non-zero
  3970  000936                     	endif
  3971  000936                     	if	0	;tblptru may be non-zero
  3972  000936                     	endif
  3973  000936  0008               	tblrd		*
  3974  000938  50F5               	movf	tablat,w,c
  3975  00093A  261E               	addwf	?___wmul,f,c
  3976  00093C  0E00               	movlw	0
  3977  00093E  221F               	addwfc	?___wmul+1,f,c
  3978  000940  0ED0               	movlw	208
  3979  000942  241E               	addwf	?___wmul,w,c
  3980  000944  0100               	movlb	0	; () banked
  3981  000946  6F91               	movwf	sprintf@prec& (0+255),b
  3982  000948  0EFF               	movlw	255
  3983  00094A  201F               	addwfc	?___wmul+1,w,c
  3984  00094C  0100               	movlb	0	; () banked
  3985  00094E  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  3986                           
  3987                           ; BSR set to: 0
  3988  000950  0100               	movlb	0	; () banked
  3989  000952  4B6B               	infsnz	sprintf@f& (0+255),f,b
  3990  000954  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  3991  000956                     l4653:
  3992                           
  3993                           ; BSR set to: 0
  3994  000956  C06B  FFF6         	movff	sprintf@f,tblptrl
  3995  00095A  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  3996  00095E                     	if	0	;tblptru may be non-zero
  3997  00095E                     	endif
  3998  00095E                     	if	0	;tblptru may be non-zero
  3999  00095E                     	endif
  4000  00095E  0008               	tblrd		*
  4001  000960  50F5               	movf	tablat,w,c
  4002  000962  EC34  F01B         	call	_isdigit
  4003  000966  A0D8               	btfss	status,0,c
  4004  000968  D056               	goto	l4685
  4005  00096A  D7D7               	goto	l4649
  4006  00096C                     l4655:
  4007                           
  4008                           ;doprnt.c: 626: prec = 0;
  4009  00096C  0E00               	movlw	0
  4010  00096E  0100               	movlb	0	; () banked
  4011  000970  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  4012  000972  0E00               	movlw	0
  4013  000974  6F91               	movwf	sprintf@prec& (0+255),b
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;doprnt.c: 628: flag |= 0x1000;
  4017  000976  0100               	movlb	0	; () banked
  4018  000978  8983               	bsf	(sprintf@flag+1)& (0+255),4,b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 630: }
  4022                           ;doprnt.c: 635: switch(c = *f++) {
  4023  00097A  D04D               	goto	l4685
  4024  00097C                     l4659:
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;doprnt.c: 663: flag |= 0x400;
  4028  00097C  0100               	movlb	0	; () banked
  4029  00097E  8583               	bsf	(sprintf@flag+1)& (0+255),2,b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;doprnt.c: 698: case 'i':
  4033                           ;doprnt.c: 699: break;
  4034                           
  4035                           ; BSR set to: 0
  4036                           
  4037                           ;doprnt.c: 697: case 'd':
  4038                           
  4039                           ;doprnt.c: 664: break;
  4040  000980  D066               	goto	l4687
  4041  000982                     l4661:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;doprnt.c: 753: if(prec && prec < len)
  4045  000982  0100               	movlb	0	; () banked
  4046  000984  5191               	movf	sprintf@prec& (0+255),w,b
  4047  000986  0100               	movlb	0	; () banked
  4048  000988  1192               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4049  00098A  B4D8               	btfsc	status,2,c
  4050  00098C  D01F               	goto	l4673
  4051                           
  4052                           ; BSR set to: 0
  4053  00098E  0100               	movlb	0	; () banked
  4054  000990  517E               	movf	sprintf@len& (0+255),w,b
  4055  000992  0100               	movlb	0	; () banked
  4056  000994  5D91               	subwf	sprintf@prec& (0+255),w,b
  4057  000996  0100               	movlb	0	; () banked
  4058  000998  517F               	movf	(sprintf@len+1)& (0+255),w,b
  4059  00099A  0100               	movlb	0	; () banked
  4060  00099C  5992               	subwfb	(sprintf@prec+1)& (0+255),w,b
  4061  00099E  B0D8               	btfsc	status,0,c
  4062  0009A0  D015               	goto	l4673
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;doprnt.c: 754: len = prec;
  4066  0009A2  C091  F07E         	movff	sprintf@prec,sprintf@len
  4067  0009A6  C092  F07F         	movff	sprintf@prec+1,sprintf@len+1
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;doprnt.c: 767: while(len--)
  4071  0009AA  D010               	goto	l4673
  4072  0009AC                     l4667:
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4076  0009AC  C07C  FFD9         	movff	sprintf@cp,fsr2l
  4077  0009B0  C07D  FFDA         	movff	sprintf@cp+1,fsr2h
  4078  0009B4  C069  FFE1         	movff	sprintf@sp,fsr1l
  4079  0009B8  C06A  FFE2         	movff	sprintf@sp+1,fsr1h
  4080  0009BC  CFDF FFE7          	movff	indf2,indf1
  4081                           
  4082                           ; BSR set to: 0
  4083  0009C0  0100               	movlb	0	; () banked
  4084  0009C2  4B7C               	infsnz	sprintf@cp& (0+255),f,b
  4085  0009C4  2B7D               	incf	(sprintf@cp+1)& (0+255),f,b
  4086                           
  4087                           ; BSR set to: 0
  4088  0009C6  0100               	movlb	0	; () banked
  4089  0009C8  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4090  0009CA  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4091  0009CC                     l4673:
  4092                           
  4093                           ; BSR set to: 0
  4094  0009CC  0100               	movlb	0	; () banked
  4095  0009CE  077E               	decf	sprintf@len& (0+255),f,b
  4096  0009D0  A0D8               	btfss	status,0,c
  4097  0009D2  077F               	decf	(sprintf@len+1)& (0+255),f,b
  4098  0009D4  0100               	movlb	0	; () banked
  4099  0009D6  297E               	incf	sprintf@len& (0+255),w,b
  4100  0009D8  E1E9               	bnz	l4667
  4101  0009DA  0100               	movlb	0	; () banked
  4102  0009DC  297F               	incf	(sprintf@len+1)& (0+255),w,b
  4103  0009DE  B4D8               	btfsc	status,2,c
  4104  0009E0  EF32  F009         	goto	l4887
  4105  0009E4  D7E3               	goto	l4667
  4106  0009E6                     l4675:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4110  0009E6  C080  FFD9         	movff	sprintf@ap,fsr2l
  4111  0009EA  C081  FFDA         	movff	sprintf@ap+1,fsr2h
  4112  0009EE  50DF               	movf	indf2,w,c
  4113  0009F0  0100               	movlb	0	; () banked
  4114  0009F2  6F93               	movwf	sprintf@c& (0+255),b
  4115                           
  4116                           ; BSR set to: 0
  4117  0009F4  0E02               	movlw	2
  4118  0009F6  0100               	movlb	0	; () banked
  4119  0009F8  2780               	addwf	sprintf@ap& (0+255),f,b
  4120  0009FA  0E00               	movlw	0
  4121  0009FC  2381               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4122  0009FE                     l4679:
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;doprnt.c: 805: cp = (char *)&c;
  4126  0009FE  0E93               	movlw	low sprintf@c
  4127  000A00  0100               	movlb	0	; () banked
  4128  000A02  6F7C               	movwf	sprintf@cp& (0+255),b
  4129  000A04  0E00               	movlw	high sprintf@c
  4130  000A06  0100               	movlb	0	; () banked
  4131  000A08  6F7D               	movwf	(sprintf@cp+1)& (0+255),b
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 806: len = 1;
  4135  000A0A  0E00               	movlw	0
  4136  000A0C  0100               	movlb	0	; () banked
  4137  000A0E  6F7F               	movwf	(sprintf@len+1)& (0+255),b
  4138  000A10  0E01               	movlw	1
  4139  000A12  6F7E               	movwf	sprintf@len& (0+255),b
  4140                           
  4141                           ;doprnt.c: 807: goto dostring;
  4142  000A14  D7B6               	goto	l4661
  4143  000A16                     l4685:
  4144  000A16  C06B  FFF6         	movff	sprintf@f,tblptrl
  4145  000A1A  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  4146  000A1E  0100               	movlb	0	; () banked
  4147  000A20  4B6B               	infsnz	sprintf@f& (0+255),f,b
  4148  000A22  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  4149  000A24                     	if	0	;tblptru may be non-zero
  4150  000A24                     	endif
  4151  000A24                     	if	0	;tblptru may be non-zero
  4152  000A24                     	endif
  4153  000A24  0008               	tblrd		*
  4154  000A26  CFF5 F093          	movff	tablat,sprintf@c
  4155  000A2A  0100               	movlb	0	; () banked
  4156  000A2C  5193               	movf	sprintf@c& (0+255),w,b
  4157                           
  4158                           ; Switch size 1, requested type "space"
  4159                           ; Number of cases is 5, Range of values is 0 to 105
  4160                           ; switch strategies available:
  4161                           ; Name         Instructions Cycles
  4162                           ; simple_byte           16     9 (average)
  4163                           ;	Chosen strategy is simple_byte
  4164  000A2E  0A00               	xorlw	0	; case 0
  4165  000A30  B4D8               	btfsc	status,2,c
  4166  000A32  EF41  F009         	goto	l4889
  4167  000A36  0A63               	xorlw	99	; case 99
  4168  000A38  B4D8               	btfsc	status,2,c
  4169  000A3A  D7D5               	goto	l4675
  4170  000A3C  0A07               	xorlw	7	; case 100
  4171  000A3E  B4D8               	btfsc	status,2,c
  4172  000A40  D006               	goto	l4687
  4173  000A42  0A02               	xorlw	2	; case 102
  4174  000A44  B4D8               	btfsc	status,2,c
  4175  000A46  D79A               	goto	l4659
  4176  000A48  0A0F               	xorlw	15	; case 105
  4177  000A4A  A4D8               	btfss	status,2,c
  4178  000A4C  D7D8               	goto	l4679
  4179  000A4E                     l4687:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;doprnt.c: 825: if(flag & (0x700)) {
  4183  000A4E  0E07               	movlw	7
  4184  000A50  0100               	movlb	0	; () banked
  4185  000A52  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  4186  000A54  B4D8               	btfsc	status,2,c
  4187  000A56  D315               	goto	l4835
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 827: if(flag & 0x1000)
  4191  000A58  0100               	movlb	0	; () banked
  4192  000A5A  A983               	btfss	(sprintf@flag+1)& (0+255),4,b
  4193  000A5C  D005               	goto	l4693
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;doprnt.c: 829: prec = 6;
  4197  000A5E  0E00               	movlw	0
  4198  000A60  0100               	movlb	0	; () banked
  4199  000A62  6F92               	movwf	(sprintf@prec+1)& (0+255),b
  4200  000A64  0E06               	movlw	6
  4201  000A66  6F91               	movwf	sprintf@prec& (0+255),b
  4202  000A68                     l4693:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4206  000A68  C080  FFD9         	movff	sprintf@ap,fsr2l
  4207  000A6C  C081  FFDA         	movff	sprintf@ap+1,fsr2h
  4208  000A70  CFDE F08E          	movff	postinc2,sprintf@fval
  4209  000A74  CFDE F08F          	movff	postinc2,sprintf@fval+1
  4210  000A78  CFDD F090          	movff	postdec2,sprintf@fval+2
  4211                           
  4212                           ; BSR set to: 0
  4213  000A7C  0E03               	movlw	3
  4214  000A7E  0100               	movlb	0	; () banked
  4215  000A80  2780               	addwf	sprintf@ap& (0+255),f,b
  4216  000A82  0E00               	movlw	0
  4217  000A84  2381               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;doprnt.c: 831: if(fval < 0.0) {
  4221  000A86  0100               	movlb	0	; () banked
  4222  000A88  AF90               	btfss	(sprintf@fval+2)& (0+255),7,b
  4223  000A8A  D011               	goto	l4703
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;doprnt.c: 832: fval = -fval;
  4227  000A8C  C08E  F033         	movff	sprintf@fval,___ftneg@f1
  4228  000A90  C08F  F034         	movff	sprintf@fval+1,___ftneg@f1+1
  4229  000A94  C090  F035         	movff	sprintf@fval+2,___ftneg@f1+2
  4230  000A98  ECFF  F01A         	call	___ftneg	;wreg free
  4231  000A9C  C033  F08E         	movff	?___ftneg,sprintf@fval
  4232  000AA0  C034  F08F         	movff	?___ftneg+1,sprintf@fval+1
  4233  000AA4  C035  F090         	movff	?___ftneg+2,sprintf@fval+2
  4234                           
  4235                           ;doprnt.c: 833: flag |= 0x03;
  4236  000AA8  0E03               	movlw	3
  4237  000AAA  0100               	movlb	0	; () banked
  4238  000AAC  1382               	iorwf	sprintf@flag& (0+255),f,b
  4239  000AAE                     l4703:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;doprnt.c: 834: }
  4243                           ;doprnt.c: 835: exp = 0;
  4244  000AAE  0E00               	movlw	0
  4245  000AB0  0100               	movlb	0	; () banked
  4246  000AB2  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  4247  000AB4  0E00               	movlw	0
  4248  000AB6  6F84               	movwf	sprintf@exp& (0+255),b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;doprnt.c: 836: if( fval!=0) {
  4252  000AB8  0100               	movlb	0	; () banked
  4253  000ABA  518E               	movf	sprintf@fval& (0+255),w,b
  4254  000ABC  0100               	movlb	0	; () banked
  4255  000ABE  118F               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4256  000AC0  0100               	movlb	0	; () banked
  4257  000AC2  1190               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4258  000AC4  B4D8               	btfsc	status,2,c
  4259  000AC6  D091               	goto	l4731
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4263  000AC8  0E82               	movlw	130
  4264  000ACA  0100               	movlb	0	; () banked
  4265  000ACC  6F73               	movwf	??_sprintf& (0+255),b
  4266  000ACE  0EFF               	movlw	255
  4267  000AD0  0100               	movlb	0	; () banked
  4268  000AD2  6F74               	movwf	(??_sprintf+1)& (0+255),b
  4269  000AD4  C08E  F075         	movff	sprintf@fval,??_sprintf+2
  4270  000AD8  C08F  F076         	movff	sprintf@fval+1,??_sprintf+3
  4271  000ADC  C090  F077         	movff	sprintf@fval+2,??_sprintf+4
  4272  000AE0  C091  F078         	movff	sprintf@fval+3,??_sprintf+5
  4273  000AE4  0E10               	movlw	16
  4274  000AE6  D006               	goto	u5570
  4275  000AE8                     u5575:
  4276  000AE8  0100               	movlb	0	; () banked
  4277  000AEA  90D8               	bcf	status,0,c
  4278  000AEC  3378               	rrcf	(??_sprintf+5)& (0+255),f,b
  4279  000AEE  3377               	rrcf	(??_sprintf+4)& (0+255),f,b
  4280  000AF0  3376               	rrcf	(??_sprintf+3)& (0+255),f,b
  4281  000AF2  3375               	rrcf	(??_sprintf+2)& (0+255),f,b
  4282  000AF4                     u5570:
  4283  000AF4  2EE8               	decfsz	wreg,f,c
  4284  000AF6  D7F8               	goto	u5575
  4285  000AF8  0100               	movlb	0	; () banked
  4286  000AFA  5175               	movf	(??_sprintf+2)& (0+255),w,b
  4287  000AFC  0100               	movlb	0	; () banked
  4288  000AFE  2573               	addwf	??_sprintf& (0+255),w,b
  4289  000B00  0100               	movlb	0	; () banked
  4290  000B02  6F84               	movwf	sprintf@exp& (0+255),b
  4291  000B04  0E00               	movlw	0
  4292  000B06  0100               	movlb	0	; () banked
  4293  000B08  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  4294  000B0A  0100               	movlb	0	; () banked
  4295  000B0C  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;doprnt.c: 838: exp--;
  4299  000B0E  0100               	movlb	0	; () banked
  4300  000B10  0784               	decf	sprintf@exp& (0+255),f,b
  4301  000B12  A0D8               	btfss	status,0,c
  4302  000B14  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;doprnt.c: 839: exp *= 3;
  4306  000B16  C084  F01E         	movff	sprintf@exp,___wmul@multiplier
  4307  000B1A  C085  F01F         	movff	sprintf@exp+1,___wmul@multiplier+1
  4308  000B1E  0E00               	movlw	0
  4309  000B20  6E21               	movwf	___wmul@multiplicand+1,c
  4310  000B22  0E03               	movlw	3
  4311  000B24  6E20               	movwf	___wmul@multiplicand,c
  4312  000B26  ECEC  F01A         	call	___wmul	;wreg free
  4313  000B2A  C01E  F084         	movff	?___wmul,sprintf@exp
  4314  000B2E  C01F  F085         	movff	?___wmul+1,sprintf@exp+1
  4315                           
  4316                           ;doprnt.c: 840: exp /= 10;
  4317  000B32  C084  F016         	movff	sprintf@exp,___awdiv@dividend
  4318  000B36  C085  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  4319  000B3A  0E00               	movlw	0
  4320  000B3C  6E19               	movwf	___awdiv@divisor+1,c
  4321  000B3E  0E0A               	movlw	10
  4322  000B40  6E18               	movwf	___awdiv@divisor,c
  4323  000B42  EC5D  F017         	call	___awdiv	;wreg free
  4324  000B46  C016  F084         	movff	?___awdiv,sprintf@exp
  4325  000B4A  C017  F085         	movff	?___awdiv+1,sprintf@exp+1
  4326                           
  4327                           ;doprnt.c: 841: if(exp < 0)
  4328  000B4E  0100               	movlb	0	; () banked
  4329  000B50  AF85               	btfss	(sprintf@exp+1)& (0+255),7,b
  4330  000B52  D004               	goto	l4719
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;doprnt.c: 842: exp--;
  4334  000B54  0100               	movlb	0	; () banked
  4335  000B56  0784               	decf	sprintf@exp& (0+255),f,b
  4336  000B58  A0D8               	btfss	status,0,c
  4337  000B5A  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4338  000B5C                     l4719:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4342  000B5C  0100               	movlb	0	; () banked
  4343  000B5E  5184               	movf	sprintf@exp& (0+255),w,b
  4344  000B60  0800               	sublw	0
  4345  000B62  EC48  F009         	call	_scale
  4346  000B66  C033  F086         	movff	?_scale,sprintf@tmpval
  4347  000B6A  C034  F087         	movff	?_scale+1,sprintf@tmpval+1
  4348  000B6E  C035  F088         	movff	?_scale+2,sprintf@tmpval+2
  4349                           
  4350                           ;doprnt.c: 847: tmpval.integ *= fval;
  4351  000B72  C086  F024         	movff	sprintf@tmpval,___ftmul@f1
  4352  000B76  C087  F025         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4353  000B7A  C088  F026         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4354  000B7E  C08E  F027         	movff	sprintf@fval,___ftmul@f2
  4355  000B82  C08F  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  4356  000B86  C090  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  4357  000B8A  ECF1  F014         	call	___ftmul	;wreg free
  4358  000B8E  C024  F086         	movff	?___ftmul,sprintf@tmpval
  4359  000B92  C025  F087         	movff	?___ftmul+1,sprintf@tmpval+1
  4360  000B96  C026  F088         	movff	?___ftmul+2,sprintf@tmpval+2
  4361                           
  4362                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4363  000B9A  C086  F010         	movff	sprintf@tmpval,___ftge@ff1
  4364  000B9E  C087  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4365  000BA2  C088  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4366  000BA6  0E00               	movlw	0
  4367  000BA8  6E13               	movwf	___ftge@ff2,c
  4368  000BAA  0E80               	movlw	128
  4369  000BAC  6E14               	movwf	___ftge@ff2+1,c
  4370  000BAE  0E3F               	movlw	63
  4371  000BB0  6E15               	movwf	___ftge@ff2+2,c
  4372  000BB2  ECD3  F016         	call	___ftge	;wreg free
  4373  000BB6  B0D8               	btfsc	status,0,c
  4374  000BB8  D005               	goto	l4727
  4375                           
  4376                           ;doprnt.c: 849: exp--;
  4377  000BBA  0100               	movlb	0	; () banked
  4378  000BBC  0784               	decf	sprintf@exp& (0+255),f,b
  4379  000BBE  A0D8               	btfss	status,0,c
  4380  000BC0  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4381  000BC2  D013               	goto	l4731
  4382  000BC4                     l4727:
  4383                           
  4384                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4385  000BC4  C086  F010         	movff	sprintf@tmpval,___ftge@ff1
  4386  000BC8  C087  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4387  000BCC  C088  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4388  000BD0  0E00               	movlw	0
  4389  000BD2  6E13               	movwf	___ftge@ff2,c
  4390  000BD4  0E20               	movlw	32
  4391  000BD6  6E14               	movwf	___ftge@ff2+1,c
  4392  000BD8  0E41               	movlw	65
  4393  000BDA  6E15               	movwf	___ftge@ff2+2,c
  4394  000BDC  ECD3  F016         	call	___ftge	;wreg free
  4395  000BE0  A0D8               	btfss	status,0,c
  4396  000BE2  D003               	goto	l4731
  4397                           
  4398                           ;doprnt.c: 851: exp++;
  4399  000BE4  0100               	movlb	0	; () banked
  4400  000BE6  4B84               	infsnz	sprintf@exp& (0+255),f,b
  4401  000BE8  2B85               	incf	(sprintf@exp+1)& (0+255),f,b
  4402  000BEA                     l4731:
  4403                           
  4404                           ;doprnt.c: 852: }
  4405                           ;doprnt.c: 1112: if(prec <= 12)
  4406  000BEA  0100               	movlb	0	; () banked
  4407  000BEC  BF92               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4408  000BEE  D008               	goto	l4733
  4409  000BF0  0100               	movlb	0	; () banked
  4410  000BF2  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  4411  000BF4  E11D               	bnz	l4735
  4412  000BF6  0E0D               	movlw	13
  4413  000BF8  0100               	movlb	0	; () banked
  4414  000BFA  5D91               	subwf	sprintf@prec& (0+255),w,b
  4415  000BFC  B0D8               	btfsc	status,0,c
  4416  000BFE  D018               	goto	l4735
  4417  000C00                     l4733:
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;doprnt.c: 1113: fval += fround(prec);
  4421  000C00  C08E  F03D         	movff	sprintf@fval,___ftadd@f1
  4422  000C04  C08F  F03E         	movff	sprintf@fval+1,___ftadd@f1+1
  4423  000C08  C090  F03F         	movff	sprintf@fval+2,___ftadd@f1+2
  4424  000C0C  0100               	movlb	0	; () banked
  4425  000C0E  5191               	movf	sprintf@prec& (0+255),w,b
  4426  000C10  ECD7  F00E         	call	_fround
  4427  000C14  C033  F040         	movff	?_fround,___ftadd@f2
  4428  000C18  C034  F041         	movff	?_fround+1,___ftadd@f2+1
  4429  000C1C  C035  F042         	movff	?_fround+2,___ftadd@f2+2
  4430  000C20  ECFA  F00F         	call	___ftadd	;wreg free
  4431  000C24  C03D  F08E         	movff	?___ftadd,sprintf@fval
  4432  000C28  C03E  F08F         	movff	?___ftadd+1,sprintf@fval+1
  4433  000C2C  C03F  F090         	movff	?___ftadd+2,sprintf@fval+2
  4434  000C30                     l4735:
  4435                           
  4436                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4437  000C30  0100               	movlb	0	; () banked
  4438  000C32  BF85               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4439  000C34  D008               	goto	l4737
  4440  000C36  0100               	movlb	0	; () banked
  4441  000C38  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  4442  000C3A  E126               	bnz	l4743
  4443  000C3C  0E0A               	movlw	10
  4444  000C3E  0100               	movlb	0	; () banked
  4445  000C40  5D84               	subwf	sprintf@exp& (0+255),w,b
  4446  000C42  B0D8               	btfsc	status,0,c
  4447  000C44  D021               	goto	l4743
  4448  000C46                     l4737:
  4449                           
  4450                           ; BSR set to: 0
  4451  000C46  0100               	movlb	0	; () banked
  4452  000C48  518E               	movf	sprintf@fval& (0+255),w,b
  4453  000C4A  0100               	movlb	0	; () banked
  4454  000C4C  118F               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4455  000C4E  0100               	movlb	0	; () banked
  4456  000C50  1190               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4457  000C52  B4D8               	btfsc	status,2,c
  4458  000C54  D05B               	goto	l4757
  4459                           
  4460                           ; BSR set to: 0
  4461  000C56  C08E  F03A         	movff	sprintf@fval,___fttol@f1
  4462  000C5A  C08F  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  4463  000C5E  C090  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  4464  000C62  EC5E  F013         	call	___fttol	;wreg free
  4465  000C66  503A               	movf	?___fttol,w,c
  4466  000C68  103B               	iorwf	?___fttol+1,w,c
  4467  000C6A  103C               	iorwf	?___fttol+2,w,c
  4468  000C6C  103D               	iorwf	?___fttol+3,w,c
  4469  000C6E  A4D8               	btfss	status,2,c
  4470  000C70  D04D               	goto	l4757
  4471  000C72  0100               	movlb	0	; () banked
  4472  000C74  BF85               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4473  000C76  D04A               	goto	l4757
  4474  000C78  0100               	movlb	0	; () banked
  4475  000C7A  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  4476  000C7C  E105               	bnz	l4743
  4477  000C7E  0E02               	movlw	2
  4478  000C80  0100               	movlb	0	; () banked
  4479  000C82  5D84               	subwf	sprintf@exp& (0+255),w,b
  4480  000C84  A0D8               	btfss	status,0,c
  4481  000C86  D042               	goto	l4757
  4482  000C88                     l4743:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4486  000C88  C086  F010         	movff	sprintf@tmpval,___ftge@ff1
  4487  000C8C  C087  F011         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4488  000C90  C088  F012         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4489  000C94  0E70               	movlw	112
  4490  000C96  6E13               	movwf	___ftge@ff2,c
  4491  000C98  0E89               	movlw	137
  4492  000C9A  6E14               	movwf	___ftge@ff2+1,c
  4493  000C9C  0E40               	movlw	64
  4494  000C9E  6E15               	movwf	___ftge@ff2+2,c
  4495  000CA0  ECD3  F016         	call	___ftge	;wreg free
  4496  000CA4  B0D8               	btfsc	status,0,c
  4497  000CA6  D003               	goto	l4747
  4498                           
  4499                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4500  000CA8  0100               	movlb	0	; () banked
  4501  000CAA  0EF7               	movlw	247
  4502  000CAC  D002               	goto	L1
  4503  000CAE                     l4747:
  4504                           
  4505                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4506  000CAE  0100               	movlb	0	; () banked
  4507  000CB0  0EF8               	movlw	248
  4508  000CB2                     L1:
  4509  000CB2  2784               	addwf	sprintf@exp& (0+255),f,b
  4510  000CB4  0EFF               	movlw	255
  4511  000CB6  2385               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;doprnt.c: 1124: }
  4515                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4516                           
  4517                           ; BSR set to: 0
  4518  000CB8  0100               	movlb	0	; () banked
  4519  000CBA  5184               	movf	sprintf@exp& (0+255),w,b
  4520  000CBC  EC48  F009         	call	_scale
  4521  000CC0  C033  F086         	movff	?_scale,sprintf@tmpval
  4522  000CC4  C034  F087         	movff	?_scale+1,sprintf@tmpval+1
  4523  000CC8  C035  F088         	movff	?_scale+2,sprintf@tmpval+2
  4524                           
  4525                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4526  000CCC  C08E  F010         	movff	sprintf@fval,__tdiv_to_l_@f1
  4527  000CD0  C08F  F011         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4528  000CD4  C090  F012         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4529  000CD8  C086  F013         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4530  000CDC  C087  F014         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4531  000CE0  C088  F015         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4532  000CE4  EC31  F012         	call	__tdiv_to_l_	;wreg free
  4533  000CE8  C010  F08A         	movff	?__tdiv_to_l_,sprintf@val
  4534  000CEC  C011  F08B         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4535  000CF0  C012  F08C         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4536  000CF4  C013  F08D         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4537                           
  4538                           ;doprnt.c: 1129: fval = 0.0;
  4539  000CF8  0E00               	movlw	0
  4540  000CFA  0100               	movlb	0	; () banked
  4541  000CFC  6F8E               	movwf	sprintf@fval& (0+255),b
  4542  000CFE  0E00               	movlw	0
  4543  000D00  0100               	movlb	0	; () banked
  4544  000D02  6F8F               	movwf	(sprintf@fval+1)& (0+255),b
  4545  000D04  0E00               	movlw	0
  4546  000D06  0100               	movlb	0	; () banked
  4547  000D08  6F90               	movwf	(sprintf@fval+2)& (0+255),b
  4548                           
  4549                           ;doprnt.c: 1130: } else {
  4550  000D0A  D033               	goto	l4761
  4551  000D0C                     l4757:
  4552                           
  4553                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4554  000D0C  C08E  F03A         	movff	sprintf@fval,___fttol@f1
  4555  000D10  C08F  F03B         	movff	sprintf@fval+1,___fttol@f1+1
  4556  000D14  C090  F03C         	movff	sprintf@fval+2,___fttol@f1+2
  4557  000D18  EC5E  F013         	call	___fttol	;wreg free
  4558  000D1C  C03A  F08A         	movff	?___fttol,sprintf@val
  4559  000D20  C03B  F08B         	movff	?___fttol+1,sprintf@val+1
  4560  000D24  C03C  F08C         	movff	?___fttol+2,sprintf@val+2
  4561  000D28  C03D  F08D         	movff	?___fttol+3,sprintf@val+3
  4562                           
  4563                           ;doprnt.c: 1132: fval -= (double)val;
  4564  000D2C  C08E  F063         	movff	sprintf@fval,___ftsub@f1
  4565  000D30  C08F  F064         	movff	sprintf@fval+1,___ftsub@f1+1
  4566  000D34  C090  F065         	movff	sprintf@fval+2,___ftsub@f1+2
  4567  000D38  C08A  F018         	movff	sprintf@val,___lltoft@c
  4568  000D3C  C08B  F019         	movff	sprintf@val+1,___lltoft@c+1
  4569  000D40  C08C  F01A         	movff	sprintf@val+2,___lltoft@c+2
  4570  000D44  C08D  F01B         	movff	sprintf@val+3,___lltoft@c+3
  4571  000D48  EC3A  F019         	call	___lltoft	;wreg free
  4572  000D4C  C018  F066         	movff	?___lltoft,___ftsub@f2
  4573  000D50  C019  F067         	movff	?___lltoft+1,___ftsub@f2+1
  4574  000D54  C01A  F068         	movff	?___lltoft+2,___ftsub@f2+2
  4575  000D58  EC16  F01A         	call	___ftsub	;wreg free
  4576  000D5C  C063  F08E         	movff	?___ftsub,sprintf@fval
  4577  000D60  C064  F08F         	movff	?___ftsub+1,sprintf@fval+1
  4578  000D64  C065  F090         	movff	?___ftsub+2,sprintf@fval+2
  4579                           
  4580                           ;doprnt.c: 1133: exp = 0;
  4581  000D68  0E00               	movlw	0
  4582  000D6A  0100               	movlb	0	; () banked
  4583  000D6C  6F85               	movwf	(sprintf@exp+1)& (0+255),b
  4584  000D6E  0E00               	movlw	0
  4585  000D70  6F84               	movwf	sprintf@exp& (0+255),b
  4586  000D72                     l4761:
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;doprnt.c: 1134: }
  4590                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4591  000D72  0E01               	movlw	1
  4592  000D74  0100               	movlb	0	; () banked
  4593  000D76  6F93               	movwf	sprintf@c& (0+255),b
  4594  000D78                     l4763:
  4595                           
  4596                           ; BSR set to: 0
  4597  000D78  0E0A               	movlw	10
  4598  000D7A  0100               	movlb	0	; () banked
  4599  000D7C  1993               	xorwf	sprintf@c& (0+255),w,b
  4600  000D7E  B4D8               	btfsc	status,2,c
  4601  000D80  D01E               	goto	l4775
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;doprnt.c: 1137: if(val < dpowers[c])
  4605                           
  4606                           ; BSR set to: 0
  4607                           
  4608                           ; BSR set to: 0
  4609  000D82  0100               	movlb	0	; () banked
  4610  000D84  5193               	movf	sprintf@c& (0+255),w,b
  4611  000D86  0D04               	mullw	4
  4612  000D88  0E01               	movlw	low _dpowers
  4613  000D8A  24F3               	addwf	prodl,w,c
  4614  000D8C  6EF6               	movwf	tblptrl,c
  4615  000D8E  0E08               	movlw	high _dpowers
  4616  000D90  20F4               	addwfc	prodh,w,c
  4617  000D92  6EF7               	movwf	tblptrh,c
  4618  000D94                     	if	0	;There are less than 3 active tblptr bytes
  4619  000D94                     	endif
  4620  000D94  0009               	tblrd		*+
  4621  000D96  50F5               	movf	tablat,w,c
  4622  000D98  0100               	movlb	0	; () banked
  4623  000D9A  5D8A               	subwf	sprintf@val& (0+255),w,b
  4624  000D9C  0009               	tblrd		*+
  4625  000D9E  50F5               	movf	tablat,w,c
  4626  000DA0  0100               	movlb	0	; () banked
  4627  000DA2  598B               	subwfb	(sprintf@val+1)& (0+255),w,b
  4628  000DA4  0009               	tblrd		*+
  4629  000DA6  50F5               	movf	tablat,w,c
  4630  000DA8  0100               	movlb	0	; () banked
  4631  000DAA  598C               	subwfb	(sprintf@val+2)& (0+255),w,b
  4632  000DAC  0009               	tblrd		*+
  4633  000DAE  50F5               	movf	tablat,w,c
  4634  000DB0  0100               	movlb	0	; () banked
  4635  000DB2  598D               	subwfb	(sprintf@val+3)& (0+255),w,b
  4636  000DB4  A0D8               	btfss	status,0,c
  4637  000DB6  D003               	goto	l4775
  4638                           
  4639                           ; BSR set to: 0
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;doprnt.c: 1138: break;
  4645  000DB8  0100               	movlb	0	; () banked
  4646  000DBA  2B93               	incf	sprintf@c& (0+255),f,b
  4647  000DBC  D7DD               	goto	l4763
  4648  000DBE                     l4775:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;doprnt.c: 1175: {
  4652                           ;doprnt.c: 1188: if(flag & 0x03)
  4653  000DBE  0E03               	movlw	3
  4654  000DC0  0100               	movlb	0	; () banked
  4655  000DC2  1582               	andwf	sprintf@flag& (0+255),w,b
  4656  000DC4  0100               	movlb	0	; () banked
  4657  000DC6  6F73               	movwf	??_sprintf& (0+255),b
  4658  000DC8  0E00               	movlw	0
  4659  000DCA  0100               	movlb	0	; () banked
  4660  000DCC  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  4661  000DCE  0100               	movlb	0	; () banked
  4662  000DD0  6F74               	movwf	(??_sprintf+1)& (0+255),b
  4663  000DD2  0100               	movlb	0	; () banked
  4664  000DD4  5173               	movf	??_sprintf& (0+255),w,b
  4665  000DD6  0100               	movlb	0	; () banked
  4666  000DD8  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  4667  000DDA  B4D8               	btfsc	status,2,c
  4668  000DDC  D054               	goto	l4789
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4672  000DDE  C069  FFD9         	movff	sprintf@sp,fsr2l
  4673  000DE2  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4674  000DE6  0E2D               	movlw	45
  4675  000DE8  D04C               	goto	L2
  4676  000DEA                     l4779:
  4677                           
  4678                           ; BSR set to: 0
  4679  000DEA  0100               	movlb	0	; () banked
  4680  000DEC  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4681  000DEE  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;doprnt.c: 1195: }
  4685                           ;doprnt.c: 1196: while(c--) {
  4686  000DF0  D04A               	goto	l4789
  4687  000DF2                     l4781:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;doprnt.c: 1200: {
  4691                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4692  000DF2  C08A  F019         	movff	sprintf@val,___lldiv@dividend
  4693  000DF6  C08B  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4694  000DFA  C08C  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4695  000DFE  C08D  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4696  000E02  0100               	movlb	0	; () banked
  4697  000E04  5193               	movf	sprintf@c& (0+255),w,b
  4698  000E06  0D04               	mullw	4
  4699  000E08  0E01               	movlw	low _dpowers
  4700  000E0A  24F3               	addwf	prodl,w,c
  4701  000E0C  6EF6               	movwf	tblptrl,c
  4702  000E0E  0E08               	movlw	high _dpowers
  4703  000E10  20F4               	addwfc	prodh,w,c
  4704  000E12  6EF7               	movwf	tblptrh,c
  4705  000E14                     	if	0	;There are less than 3 active tblptr bytes
  4706  000E14                     	endif
  4707  000E14  0009               	tblrd		*+
  4708  000E16  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4709  000E1A  0009               	tblrd		*+
  4710  000E1C  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4711  000E20  0009               	tblrd		*+
  4712  000E22  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4713  000E26  000A               	tblrd		*-
  4714  000E28  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4715  000E2C  EC9F  F017         	call	___lldiv	;wreg free
  4716  000E30  C019  F086         	movff	?___lldiv,sprintf@tmpval
  4717  000E34  C01A  F087         	movff	?___lldiv+1,sprintf@tmpval+1
  4718  000E38  C01B  F088         	movff	?___lldiv+2,sprintf@tmpval+2
  4719  000E3C  C01C  F089         	movff	?___lldiv+3,sprintf@tmpval+3
  4720                           
  4721                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4722  000E40  C086  F010         	movff	sprintf@tmpval,___llmod@dividend
  4723  000E44  C087  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4724  000E48  C088  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4725  000E4C  C089  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4726  000E50  0E0A               	movlw	10
  4727  000E52  6E14               	movwf	___llmod@divisor,c
  4728  000E54  0E00               	movlw	0
  4729  000E56  6E15               	movwf	___llmod@divisor+1,c
  4730  000E58  0E00               	movlw	0
  4731  000E5A  6E16               	movwf	___llmod@divisor+2,c
  4732  000E5C  0E00               	movlw	0
  4733  000E5E  6E17               	movwf	___llmod@divisor+3,c
  4734  000E60  EC07  F019         	call	___llmod	;wreg free
  4735  000E64  C010  F086         	movff	?___llmod,sprintf@tmpval
  4736  000E68  C011  F087         	movff	?___llmod+1,sprintf@tmpval+1
  4737  000E6C  C012  F088         	movff	?___llmod+2,sprintf@tmpval+2
  4738  000E70  C013  F089         	movff	?___llmod+3,sprintf@tmpval+3
  4739                           
  4740                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4741  000E74  0100               	movlb	0	; () banked
  4742  000E76  5186               	movf	sprintf@tmpval& (0+255),w,b
  4743  000E78  0F30               	addlw	48
  4744  000E7A  C069  FFD9         	movff	sprintf@sp,fsr2l
  4745  000E7E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4746  000E82                     L2:
  4747  000E82  6EDF               	movwf	indf2,c
  4748  000E84  D7B2               	goto	l4779
  4749  000E86                     l4789:
  4750                           
  4751                           ; BSR set to: 0
  4752  000E86  0100               	movlb	0	; () banked
  4753  000E88  0793               	decf	sprintf@c& (0+255),f,b
  4754  000E8A  0100               	movlb	0	; () banked
  4755  000E8C  2993               	incf	sprintf@c& (0+255),w,b
  4756  000E8E  B4D8               	btfsc	status,2,c
  4757  000E90  D00E               	goto	l4797
  4758  000E92  D7AF               	goto	l4781
  4759  000E94                     l4791:
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4763  000E94  C069  FFD9         	movff	sprintf@sp,fsr2l
  4764  000E98  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4765  000E9C  0E30               	movlw	48
  4766  000E9E  6EDF               	movwf	indf2,c
  4767                           
  4768                           ; BSR set to: 0
  4769  000EA0  0100               	movlb	0	; () banked
  4770  000EA2  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4771  000EA4  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;doprnt.c: 1209: exp--;
  4775  000EA6  0100               	movlb	0	; () banked
  4776  000EA8  0784               	decf	sprintf@exp& (0+255),f,b
  4777  000EAA  A0D8               	btfss	status,0,c
  4778  000EAC  0785               	decf	(sprintf@exp+1)& (0+255),f,b
  4779  000EAE                     l4797:
  4780                           
  4781                           ; BSR set to: 0
  4782  000EAE  0100               	movlb	0	; () banked
  4783  000EB0  BF85               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4784  000EB2  D007               	goto	l4799
  4785  000EB4  0100               	movlb	0	; () banked
  4786  000EB6  5185               	movf	(sprintf@exp+1)& (0+255),w,b
  4787  000EB8  E1ED               	bnz	l4791
  4788  000EBA  0100               	movlb	0	; () banked
  4789  000EBC  0584               	decf	sprintf@exp& (0+255),w,b
  4790  000EBE  B0D8               	btfsc	status,0,c
  4791  000EC0  D7E9               	goto	l4791
  4792  000EC2                     l4799:
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;doprnt.c: 1210: }
  4796                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4797  000EC2  0100               	movlb	0	; () banked
  4798  000EC4  BF92               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4799  000EC6  D00C               	goto	l351
  4800  000EC8  0100               	movlb	0	; () banked
  4801  000ECA  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  4802  000ECC  E105               	bnz	u5730
  4803  000ECE  0E09               	movlw	9
  4804  000ED0  0100               	movlb	0	; () banked
  4805  000ED2  5D91               	subwf	sprintf@prec& (0+255),w,b
  4806  000ED4  A0D8               	btfss	status,0,c
  4807  000ED6  D004               	goto	l351
  4808  000ED8                     u5730:
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4812  000ED8  0E08               	movlw	8
  4813  000EDA  0100               	movlb	0	; () banked
  4814  000EDC  6F93               	movwf	sprintf@c& (0+255),b
  4815  000EDE  D002               	goto	l4803
  4816  000EE0                     l351:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;doprnt.c: 1213: else
  4820                           ;doprnt.c: 1214: c = prec;
  4821  000EE0  C091  F093         	movff	sprintf@prec,sprintf@c
  4822  000EE4                     l4803:
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;doprnt.c: 1215: prec -= c;
  4826  000EE4  0100               	movlb	0	; () banked
  4827  000EE6  5193               	movf	sprintf@c& (0+255),w,b
  4828  000EE8  0100               	movlb	0	; () banked
  4829  000EEA  5F91               	subwf	sprintf@prec& (0+255),f,b
  4830  000EEC  0E00               	movlw	0
  4831  000EEE  0100               	movlb	0	; () banked
  4832  000EF0  BF93               	btfsc	sprintf@c& (0+255),7,b
  4833  000EF2  0EFF               	movlw	255
  4834  000EF4  0100               	movlb	0	; () banked
  4835  000EF6  5B92               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;doprnt.c: 1219: if(c)
  4839  000EF8  0100               	movlb	0	; () banked
  4840  000EFA  5193               	movf	sprintf@c& (0+255),w,b
  4841  000EFC  0100               	movlb	0	; () banked
  4842  000EFE  B4D8               	btfsc	status,2,c
  4843  000F00  D009               	goto	l4811
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4847  000F02  C069  FFD9         	movff	sprintf@sp,fsr2l
  4848  000F06  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4849  000F0A  0E2E               	movlw	46
  4850  000F0C  6EDF               	movwf	indf2,c
  4851                           
  4852                           ; BSR set to: 0
  4853  000F0E  0100               	movlb	0	; () banked
  4854  000F10  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4855  000F12  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4856  000F14                     l4811:
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4860  000F14  0100               	movlb	0	; () banked
  4861  000F16  5193               	movf	sprintf@c& (0+255),w,b
  4862  000F18  EC48  F009         	call	_scale
  4863  000F1C  C033  F079         	movff	?_scale,_sprintf$1188
  4864  000F20  C034  F07A         	movff	?_scale+1,_sprintf$1188+1
  4865  000F24  C035  F07B         	movff	?_scale+2,_sprintf$1188+2
  4866                           
  4867                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4868  000F28  C08E  F027         	movff	sprintf@fval,___ftmul@f2
  4869  000F2C  C08F  F028         	movff	sprintf@fval+1,___ftmul@f2+1
  4870  000F30  C090  F029         	movff	sprintf@fval+2,___ftmul@f2+2
  4871  000F34  C079  F024         	movff	_sprintf$1188,___ftmul@f1
  4872  000F38  C07A  F025         	movff	_sprintf$1188+1,___ftmul@f1+1
  4873  000F3C  C07B  F026         	movff	_sprintf$1188+2,___ftmul@f1+2
  4874  000F40  ECF1  F014         	call	___ftmul	;wreg free
  4875  000F44  C024  F03A         	movff	?___ftmul,___fttol@f1
  4876  000F48  C025  F03B         	movff	?___ftmul+1,___fttol@f1+1
  4877  000F4C  C026  F03C         	movff	?___ftmul+2,___fttol@f1+2
  4878  000F50  EC5E  F013         	call	___fttol	;wreg free
  4879  000F54  C03A  F08A         	movff	?___fttol,sprintf@val
  4880  000F58  C03B  F08B         	movff	?___fttol+1,sprintf@val+1
  4881  000F5C  C03C  F08C         	movff	?___fttol+2,sprintf@val+2
  4882  000F60  C03D  F08D         	movff	?___fttol+3,sprintf@val+3
  4883                           
  4884                           ;doprnt.c: 1228: while(c--) {
  4885  000F64  D073               	goto	l4825
  4886  000F66                     l4815:
  4887                           
  4888                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4889  000F66  C08A  F019         	movff	sprintf@val,___lldiv@dividend
  4890  000F6A  C08B  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  4891  000F6E  C08C  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  4892  000F72  C08D  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  4893  000F76  0100               	movlb	0	; () banked
  4894  000F78  5193               	movf	sprintf@c& (0+255),w,b
  4895  000F7A  0D04               	mullw	4
  4896  000F7C  0E01               	movlw	low _dpowers
  4897  000F7E  24F3               	addwf	prodl,w,c
  4898  000F80  6EF6               	movwf	tblptrl,c
  4899  000F82  0E08               	movlw	high _dpowers
  4900  000F84  20F4               	addwfc	prodh,w,c
  4901  000F86  6EF7               	movwf	tblptrh,c
  4902  000F88                     	if	0	;There are less than 3 active tblptr bytes
  4903  000F88                     	endif
  4904  000F88  0009               	tblrd		*+
  4905  000F8A  CFF5 F01D          	movff	tablat,___lldiv@divisor
  4906  000F8E  0009               	tblrd		*+
  4907  000F90  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  4908  000F94  0009               	tblrd		*+
  4909  000F96  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  4910  000F9A  000A               	tblrd		*-
  4911  000F9C  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  4912  000FA0  EC9F  F017         	call	___lldiv	;wreg free
  4913  000FA4  C019  F086         	movff	?___lldiv,sprintf@tmpval
  4914  000FA8  C01A  F087         	movff	?___lldiv+1,sprintf@tmpval+1
  4915  000FAC  C01B  F088         	movff	?___lldiv+2,sprintf@tmpval+2
  4916  000FB0  C01C  F089         	movff	?___lldiv+3,sprintf@tmpval+3
  4917                           
  4918                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4919  000FB4  C086  F010         	movff	sprintf@tmpval,___llmod@dividend
  4920  000FB8  C087  F011         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4921  000FBC  C088  F012         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4922  000FC0  C089  F013         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4923  000FC4  0E0A               	movlw	10
  4924  000FC6  6E14               	movwf	___llmod@divisor,c
  4925  000FC8  0E00               	movlw	0
  4926  000FCA  6E15               	movwf	___llmod@divisor+1,c
  4927  000FCC  0E00               	movlw	0
  4928  000FCE  6E16               	movwf	___llmod@divisor+2,c
  4929  000FD0  0E00               	movlw	0
  4930  000FD2  6E17               	movwf	___llmod@divisor+3,c
  4931  000FD4  EC07  F019         	call	___llmod	;wreg free
  4932  000FD8  C010  F086         	movff	?___llmod,sprintf@tmpval
  4933  000FDC  C011  F087         	movff	?___llmod+1,sprintf@tmpval+1
  4934  000FE0  C012  F088         	movff	?___llmod+2,sprintf@tmpval+2
  4935  000FE4  C013  F089         	movff	?___llmod+3,sprintf@tmpval+3
  4936                           
  4937                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4938  000FE8  0100               	movlb	0	; () banked
  4939  000FEA  5186               	movf	sprintf@tmpval& (0+255),w,b
  4940  000FEC  0F30               	addlw	48
  4941  000FEE  C069  FFD9         	movff	sprintf@sp,fsr2l
  4942  000FF2  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4943  000FF6  6EDF               	movwf	indf2,c
  4944                           
  4945                           ; BSR set to: 0
  4946  000FF8  0100               	movlb	0	; () banked
  4947  000FFA  4B69               	infsnz	sprintf@sp& (0+255),f,b
  4948  000FFC  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;doprnt.c: 1232: val %= dpowers[c];
  4952  000FFE  C08A  F010         	movff	sprintf@val,___llmod@dividend
  4953  001002  C08B  F011         	movff	sprintf@val+1,___llmod@dividend+1
  4954  001006  C08C  F012         	movff	sprintf@val+2,___llmod@dividend+2
  4955  00100A  C08D  F013         	movff	sprintf@val+3,___llmod@dividend+3
  4956  00100E  0100               	movlb	0	; () banked
  4957  001010  5193               	movf	sprintf@c& (0+255),w,b
  4958  001012  0D04               	mullw	4
  4959  001014  0E01               	movlw	low _dpowers
  4960  001016  24F3               	addwf	prodl,w,c
  4961  001018  6EF6               	movwf	tblptrl,c
  4962  00101A  0E08               	movlw	high _dpowers
  4963  00101C  20F4               	addwfc	prodh,w,c
  4964  00101E  6EF7               	movwf	tblptrh,c
  4965  001020                     	if	0	;There are less than 3 active tblptr bytes
  4966  001020                     	endif
  4967  001020  0009               	tblrd		*+
  4968  001022  CFF5 F014          	movff	tablat,___llmod@divisor
  4969  001026  0009               	tblrd		*+
  4970  001028  CFF5 F015          	movff	tablat,___llmod@divisor+1
  4971  00102C  0009               	tblrd		*+
  4972  00102E  CFF5 F016          	movff	tablat,___llmod@divisor+2
  4973  001032  000A               	tblrd		*-
  4974  001034  CFF5 F017          	movff	tablat,___llmod@divisor+3
  4975  001038  EC07  F019         	call	___llmod	;wreg free
  4976  00103C  C010  F08A         	movff	?___llmod,sprintf@val
  4977  001040  C011  F08B         	movff	?___llmod+1,sprintf@val+1
  4978  001044  C012  F08C         	movff	?___llmod+2,sprintf@val+2
  4979  001048  C013  F08D         	movff	?___llmod+3,sprintf@val+3
  4980  00104C                     l4825:
  4981  00104C  0100               	movlb	0	; () banked
  4982  00104E  0793               	decf	sprintf@c& (0+255),f,b
  4983  001050  0100               	movlb	0	; () banked
  4984  001052  2993               	incf	sprintf@c& (0+255),w,b
  4985  001054  B4D8               	btfsc	status,2,c
  4986  001056  D00E               	goto	l4833
  4987  001058  D786               	goto	l4815
  4988  00105A                     l4827:
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4992  00105A  C069  FFD9         	movff	sprintf@sp,fsr2l
  4993  00105E  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  4994  001062  0E30               	movlw	48
  4995  001064  6EDF               	movwf	indf2,c
  4996                           
  4997                           ; BSR set to: 0
  4998  001066  0100               	movlb	0	; () banked
  4999  001068  4B69               	infsnz	sprintf@sp& (0+255),f,b
  5000  00106A  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;doprnt.c: 1237: prec--;
  5004  00106C  0100               	movlb	0	; () banked
  5005  00106E  0791               	decf	sprintf@prec& (0+255),f,b
  5006  001070  A0D8               	btfss	status,0,c
  5007  001072  0792               	decf	(sprintf@prec+1)& (0+255),f,b
  5008  001074                     l4833:
  5009                           
  5010                           ; BSR set to: 0
  5011  001074  0100               	movlb	0	; () banked
  5012  001076  5191               	movf	sprintf@prec& (0+255),w,b
  5013  001078  0100               	movlb	0	; () banked
  5014  00107A  1192               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5015  00107C  B4D8               	btfsc	status,2,c
  5016  00107E  D0F2               	goto	l4887
  5017  001080  D7EC               	goto	l4827
  5018  001082                     l4835:
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 1246: }
  5022                           ;doprnt.c: 1253: {
  5023                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5024  001082  C080  FFD9         	movff	sprintf@ap,fsr2l
  5025  001086  C081  FFDA         	movff	sprintf@ap+1,fsr2h
  5026  00108A  CFDE F08A          	movff	postinc2,sprintf@val
  5027  00108E  CFDD F08B          	movff	postdec2,sprintf@val+1
  5028  001092  0100               	movlb	0	; () banked
  5029  001094  0E00               	movlw	0
  5030  001096  BF8B               	btfsc	(sprintf@val+1)& (0+255),7,b
  5031  001098  0EFF               	movlw	-1
  5032  00109A  6F8C               	movwf	(sprintf@val+2)& (0+255),b
  5033  00109C  6F8D               	movwf	(sprintf@val+3)& (0+255),b
  5034                           
  5035                           ; BSR set to: 0
  5036  00109E  0E02               	movlw	2
  5037  0010A0  0100               	movlb	0	; () banked
  5038  0010A2  2780               	addwf	sprintf@ap& (0+255),f,b
  5039  0010A4  0E00               	movlw	0
  5040  0010A6  2381               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;doprnt.c: 1261: if((long)val < 0) {
  5044  0010A8  0100               	movlb	0	; () banked
  5045  0010AA  AF8D               	btfss	(sprintf@val+3)& (0+255),7,b
  5046  0010AC  D00C               	goto	l4845
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;doprnt.c: 1262: flag |= 0x03;
  5050  0010AE  0E03               	movlw	3
  5051  0010B0  0100               	movlb	0	; () banked
  5052  0010B2  1382               	iorwf	sprintf@flag& (0+255),f,b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;doprnt.c: 1263: val = -val;
  5056  0010B4  0100               	movlb	0	; () banked
  5057  0010B6  1F8D               	comf	(sprintf@val+3)& (0+255),f,b
  5058  0010B8  1F8C               	comf	(sprintf@val+2)& (0+255),f,b
  5059  0010BA  1F8B               	comf	(sprintf@val+1)& (0+255),f,b
  5060  0010BC  6D8A               	negf	sprintf@val& (0+255),b
  5061  0010BE  0E00               	movlw	0
  5062  0010C0  238B               	addwfc	(sprintf@val+1)& (0+255),f,b
  5063  0010C2  238C               	addwfc	(sprintf@val+2)& (0+255),f,b
  5064  0010C4  238D               	addwfc	(sprintf@val+3)& (0+255),f,b
  5065  0010C6                     l4845:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;doprnt.c: 1264: }
  5069                           ;doprnt.c: 1266: }
  5070                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5071  0010C6  0100               	movlb	0	; () banked
  5072  0010C8  5191               	movf	sprintf@prec& (0+255),w,b
  5073  0010CA  0100               	movlb	0	; () banked
  5074  0010CC  1192               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5075  0010CE  A4D8               	btfss	status,2,c
  5076  0010D0  D00D               	goto	l4851
  5077                           
  5078                           ; BSR set to: 0
  5079  0010D2  0100               	movlb	0	; () banked
  5080  0010D4  518A               	movf	sprintf@val& (0+255),w,b
  5081  0010D6  0100               	movlb	0	; () banked
  5082  0010D8  118B               	iorwf	(sprintf@val+1)& (0+255),w,b
  5083  0010DA  0100               	movlb	0	; () banked
  5084  0010DC  118C               	iorwf	(sprintf@val+2)& (0+255),w,b
  5085  0010DE  0100               	movlb	0	; () banked
  5086  0010E0  118D               	iorwf	(sprintf@val+3)& (0+255),w,b
  5087  0010E2  A4D8               	btfss	status,2,c
  5088  0010E4  D003               	goto	l4851
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;doprnt.c: 1291: prec++;
  5092  0010E6  0100               	movlb	0	; () banked
  5093  0010E8  4B91               	infsnz	sprintf@prec& (0+255),f,b
  5094  0010EA  2B92               	incf	(sprintf@prec+1)& (0+255),f,b
  5095  0010EC                     l4851:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5099  0010EC  0E01               	movlw	1
  5100  0010EE  0100               	movlb	0	; () banked
  5101  0010F0  6F93               	movwf	sprintf@c& (0+255),b
  5102  0010F2                     l4853:
  5103                           
  5104                           ; BSR set to: 0
  5105  0010F2  0E0A               	movlw	10
  5106  0010F4  0100               	movlb	0	; () banked
  5107  0010F6  1993               	xorwf	sprintf@c& (0+255),w,b
  5108  0010F8  B4D8               	btfsc	status,2,c
  5109  0010FA  D01E               	goto	l4865
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;doprnt.c: 1306: if(val < dpowers[c])
  5113                           
  5114                           ; BSR set to: 0
  5115                           
  5116                           ; BSR set to: 0
  5117  0010FC  0100               	movlb	0	; () banked
  5118  0010FE  5193               	movf	sprintf@c& (0+255),w,b
  5119  001100  0D04               	mullw	4
  5120  001102  0E01               	movlw	low _dpowers
  5121  001104  24F3               	addwf	prodl,w,c
  5122  001106  6EF6               	movwf	tblptrl,c
  5123  001108  0E08               	movlw	high _dpowers
  5124  00110A  20F4               	addwfc	prodh,w,c
  5125  00110C  6EF7               	movwf	tblptrh,c
  5126  00110E                     	if	0	;There are less than 3 active tblptr bytes
  5127  00110E                     	endif
  5128  00110E  0009               	tblrd		*+
  5129  001110  50F5               	movf	tablat,w,c
  5130  001112  0100               	movlb	0	; () banked
  5131  001114  5D8A               	subwf	sprintf@val& (0+255),w,b
  5132  001116  0009               	tblrd		*+
  5133  001118  50F5               	movf	tablat,w,c
  5134  00111A  0100               	movlb	0	; () banked
  5135  00111C  598B               	subwfb	(sprintf@val+1)& (0+255),w,b
  5136  00111E  0009               	tblrd		*+
  5137  001120  50F5               	movf	tablat,w,c
  5138  001122  0100               	movlb	0	; () banked
  5139  001124  598C               	subwfb	(sprintf@val+2)& (0+255),w,b
  5140  001126  0009               	tblrd		*+
  5141  001128  50F5               	movf	tablat,w,c
  5142  00112A  0100               	movlb	0	; () banked
  5143  00112C  598D               	subwfb	(sprintf@val+3)& (0+255),w,b
  5144  00112E  A0D8               	btfss	status,0,c
  5145  001130  D003               	goto	l4865
  5146                           
  5147                           ; BSR set to: 0
  5148                           
  5149                           ; BSR set to: 0
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;doprnt.c: 1307: break;
  5153  001132  0100               	movlb	0	; () banked
  5154  001134  2B93               	incf	sprintf@c& (0+255),f,b
  5155  001136  D7DD               	goto	l4853
  5156  001138                     l4865:
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;doprnt.c: 1339: if(c < prec)
  5160  001138  0E80               	movlw	128
  5161  00113A  0100               	movlb	0	; () banked
  5162  00113C  BF93               	btfsc	sprintf@c& (0+255),7,b
  5163  00113E  0E7F               	movlw	127
  5164  001140  0100               	movlb	0	; () banked
  5165  001142  6F73               	movwf	??_sprintf& (0+255),b
  5166  001144  0100               	movlb	0	; () banked
  5167  001146  5191               	movf	sprintf@prec& (0+255),w,b
  5168  001148  0100               	movlb	0	; () banked
  5169  00114A  5D93               	subwf	sprintf@c& (0+255),w,b
  5170  00114C  0100               	movlb	0	; () banked
  5171  00114E  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  5172  001150  0A80               	xorlw	128
  5173  001152  0100               	movlb	0	; () banked
  5174  001154  5973               	subwfb	??_sprintf& (0+255),w,b
  5175  001156  B0D8               	btfsc	status,0,c
  5176  001158  D003               	goto	l4869
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;doprnt.c: 1340: c = prec;
  5180  00115A  C091  F093         	movff	sprintf@prec,sprintf@c
  5181  00115E  D018               	goto	l4873
  5182  001160                     l4869:
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;doprnt.c: 1341: else if(prec < c)
  5186  001160  0100               	movlb	0	; () banked
  5187  001162  5192               	movf	(sprintf@prec+1)& (0+255),w,b
  5188  001164  0A80               	xorlw	128
  5189  001166  0100               	movlb	0	; () banked
  5190  001168  6F73               	movwf	??_sprintf& (0+255),b
  5191  00116A  0100               	movlb	0	; () banked
  5192  00116C  5193               	movf	sprintf@c& (0+255),w,b
  5193  00116E  0100               	movlb	0	; () banked
  5194  001170  5D91               	subwf	sprintf@prec& (0+255),w,b
  5195  001172  0E80               	movlw	128
  5196  001174  0100               	movlb	0	; () banked
  5197  001176  BF93               	btfsc	sprintf@c& (0+255),7,b
  5198  001178  0E7F               	movlw	127
  5199  00117A  0100               	movlb	0	; () banked
  5200  00117C  5973               	subwfb	??_sprintf& (0+255),w,b
  5201  00117E  B0D8               	btfsc	status,0,c
  5202  001180  D007               	goto	l4873
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;doprnt.c: 1342: prec = c;
  5206  001182  0100               	movlb	0	; () banked
  5207  001184  5193               	movf	sprintf@c& (0+255),w,b
  5208  001186  0100               	movlb	0	; () banked
  5209  001188  6F91               	movwf	sprintf@prec& (0+255),b
  5210  00118A  6B92               	clrf	(sprintf@prec+1)& (0+255),b
  5211  00118C  BF91               	btfsc	sprintf@prec& (0+255),7,b
  5212  00118E  0792               	decf	(sprintf@prec+1)& (0+255),f,b
  5213  001190                     l4873:
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;doprnt.c: 1422: {
  5217                           ;doprnt.c: 1438: if(flag & 0x03)
  5218  001190  0E03               	movlw	3
  5219  001192  0100               	movlb	0	; () banked
  5220  001194  1582               	andwf	sprintf@flag& (0+255),w,b
  5221  001196  0100               	movlb	0	; () banked
  5222  001198  6F73               	movwf	??_sprintf& (0+255),b
  5223  00119A  0E00               	movlw	0
  5224  00119C  0100               	movlb	0	; () banked
  5225  00119E  1583               	andwf	(sprintf@flag+1)& (0+255),w,b
  5226  0011A0  0100               	movlb	0	; () banked
  5227  0011A2  6F74               	movwf	(??_sprintf+1)& (0+255),b
  5228  0011A4  0100               	movlb	0	; () banked
  5229  0011A6  5173               	movf	??_sprintf& (0+255),w,b
  5230  0011A8  0100               	movlb	0	; () banked
  5231  0011AA  1174               	iorwf	(??_sprintf+1)& (0+255),w,b
  5232  0011AC  B4D8               	btfsc	status,2,c
  5233  0011AE  D04F               	goto	l4885
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5237  0011B0  C069  FFD9         	movff	sprintf@sp,fsr2l
  5238  0011B4  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  5239  0011B8  0E2D               	movlw	45
  5240  0011BA  6EDF               	movwf	indf2,c
  5241  0011BC  D045               	goto	l4883
  5242  0011BE                     l4879:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;doprnt.c: 1478: {
  5246                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5247  0011BE  C091  F073         	movff	sprintf@prec,??_sprintf
  5248  0011C2  C092  F074         	movff	sprintf@prec+1,??_sprintf+1
  5249  0011C6  0100               	movlb	0	; () banked
  5250  0011C8  90D8               	bcf	status,0,c
  5251  0011CA  3773               	rlcf	??_sprintf& (0+255),f,b
  5252  0011CC  3774               	rlcf	(??_sprintf+1)& (0+255),f,b
  5253  0011CE  0100               	movlb	0	; () banked
  5254  0011D0  90D8               	bcf	status,0,c
  5255  0011D2  3773               	rlcf	??_sprintf& (0+255),f,b
  5256  0011D4  3774               	rlcf	(??_sprintf+1)& (0+255),f,b
  5257  0011D6  0E01               	movlw	low _dpowers
  5258  0011D8  0100               	movlb	0	; () banked
  5259  0011DA  2573               	addwf	??_sprintf& (0+255),w,b
  5260  0011DC  6EF6               	movwf	tblptrl,c
  5261  0011DE  0E08               	movlw	high _dpowers
  5262  0011E0  2174               	addwfc	(??_sprintf+1)& (0+255),w,b
  5263  0011E2  6EF7               	movwf	tblptrh,c
  5264  0011E4                     	if	0	;There are less than 3 active tblptr bytes
  5265  0011E4                     	endif
  5266  0011E4  0009               	tblrd		*+
  5267  0011E6  CFF5 F01D          	movff	tablat,___lldiv@divisor
  5268  0011EA  0009               	tblrd		*+
  5269  0011EC  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
  5270  0011F0  0009               	tblrd		*+
  5271  0011F2  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
  5272  0011F6  000A               	tblrd		*-
  5273  0011F8  CFF5 F020          	movff	tablat,___lldiv@divisor+3
  5274  0011FC  C08A  F019         	movff	sprintf@val,___lldiv@dividend
  5275  001200  C08B  F01A         	movff	sprintf@val+1,___lldiv@dividend+1
  5276  001204  C08C  F01B         	movff	sprintf@val+2,___lldiv@dividend+2
  5277  001208  C08D  F01C         	movff	sprintf@val+3,___lldiv@dividend+3
  5278  00120C  EC9F  F017         	call	___lldiv	;wreg free
  5279  001210  C019  F010         	movff	?___lldiv,___llmod@dividend
  5280  001214  C01A  F011         	movff	?___lldiv+1,___llmod@dividend+1
  5281  001218  C01B  F012         	movff	?___lldiv+2,___llmod@dividend+2
  5282  00121C  C01C  F013         	movff	?___lldiv+3,___llmod@dividend+3
  5283  001220  0E0A               	movlw	10
  5284  001222  6E14               	movwf	___llmod@divisor,c
  5285  001224  0E00               	movlw	0
  5286  001226  6E15               	movwf	___llmod@divisor+1,c
  5287  001228  0E00               	movlw	0
  5288  00122A  6E16               	movwf	___llmod@divisor+2,c
  5289  00122C  0E00               	movlw	0
  5290  00122E  6E17               	movwf	___llmod@divisor+3,c
  5291  001230  EC07  F019         	call	___llmod	;wreg free
  5292  001234  5010               	movf	?___llmod,w,c
  5293  001236  0F30               	addlw	48
  5294  001238  0100               	movlb	0	; () banked
  5295  00123A  6F93               	movwf	sprintf@c& (0+255),b
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;doprnt.c: 1523: }
  5299                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5300  00123C  C069  FFD9         	movff	sprintf@sp,fsr2l
  5301  001240  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  5302  001244  C093  FFDF         	movff	sprintf@c,indf2
  5303  001248                     l4883:
  5304                           
  5305                           ; BSR set to: 0
  5306  001248  0100               	movlb	0	; () banked
  5307  00124A  4B69               	infsnz	sprintf@sp& (0+255),f,b
  5308  00124C  2B6A               	incf	(sprintf@sp+1)& (0+255),f,b
  5309  00124E                     l4885:
  5310                           
  5311                           ; BSR set to: 0
  5312  00124E  0100               	movlb	0	; () banked
  5313  001250  0791               	decf	sprintf@prec& (0+255),f,b
  5314  001252  A0D8               	btfss	status,0,c
  5315  001254  0792               	decf	(sprintf@prec+1)& (0+255),f,b
  5316  001256  0100               	movlb	0	; () banked
  5317  001258  2991               	incf	sprintf@prec& (0+255),w,b
  5318  00125A  E1B1               	bnz	l4879
  5319  00125C  0100               	movlb	0	; () banked
  5320  00125E  2992               	incf	(sprintf@prec+1)& (0+255),w,b
  5321  001260  A4D8               	btfss	status,2,c
  5322  001262  D7AD               	goto	l4879
  5323  001264                     l4887:
  5324                           
  5325                           ; BSR set to: 0
  5326  001264  C06B  FFF6         	movff	sprintf@f,tblptrl
  5327  001268  C06C  FFF7         	movff	sprintf@f+1,tblptrh
  5328  00126C  0100               	movlb	0	; () banked
  5329  00126E  4B6B               	infsnz	sprintf@f& (0+255),f,b
  5330  001270  2B6C               	incf	(sprintf@f+1)& (0+255),f,b
  5331  001272                     	if	0	;tblptru may be non-zero
  5332  001272                     	endif
  5333  001272                     	if	0	;tblptru may be non-zero
  5334  001272                     	endif
  5335  001272  0008               	tblrd		*
  5336  001274  CFF5 F093          	movff	tablat,sprintf@c
  5337  001278  0100               	movlb	0	; () banked
  5338  00127A  5193               	movf	sprintf@c& (0+255),w,b
  5339  00127C  A4D8               	btfss	status,2,c
  5340  00127E  EF64  F004         	goto	l4635
  5341  001282                     l4889:
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;doprnt.c: 1538: *sp = 0;
  5345  001282  C069  FFD9         	movff	sprintf@sp,fsr2l
  5346  001286  C06A  FFDA         	movff	sprintf@sp+1,fsr2h
  5347  00128A  0E00               	movlw	0
  5348  00128C  6EDF               	movwf	indf2,c
  5349  00128E  0012               	return	
  5350  001290                     __end_of_sprintf:
  5351                           	opt stack 0
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           indf1	equ	0xFE7
  5362                           fsr1h	equ	0xFE2
  5363                           fsr1l	equ	0xFE1
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _scale *****************
  5372 ;; Defined at:
  5373 ;;		line 425 in file "D:\mplab\sources\common\doprnt.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  scl             1    wreg     char 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  scl             1   56[COMRAM] char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  3   50[COMRAM] char 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5387 ;;      Params:         3       0       0       0       0       0       0       0       0
  5388 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5390 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5391 ;;Total ram usage:        7 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    3
  5394 ;; This function calls:
  5395 ;;		___awdiv
  5396 ;;		___awmod
  5397 ;;		___ftmul
  5398 ;;		___wmul
  5399 ;; This function is called by:
  5400 ;;		_sprintf
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text17
  5405  001290                     __ptext17:
  5406                           	opt stack 0
  5407  001290                     _scale:
  5408                           	opt stack 26
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;incstack = 0
  5412                           ;scale@scl stored from wreg
  5413  001290  6E39               	movwf	scale@scl,c
  5414                           
  5415                           ;doprnt.c: 428: if(scl < 0) {
  5416  001292  AE39               	btfss	scale@scl,7,c
  5417  001294  D0FB               	goto	l4385
  5418                           
  5419                           ;doprnt.c: 429: scl = -scl;
  5420  001296  6C39               	negf	scale@scl,c
  5421                           
  5422                           ;doprnt.c: 430: if(scl>=110)
  5423  001298  5039               	movf	scale@scl,w,c
  5424  00129A  0A80               	xorlw	128
  5425  00129C  0F12               	addlw	-238
  5426  00129E  A0D8               	btfss	status,0,c
  5427  0012A0  D091               	goto	l4375
  5428                           
  5429                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5430  0012A2  0E00               	movlw	0
  5431  0012A4  6E21               	movwf	___wmul@multiplicand+1,c
  5432  0012A6  0E03               	movlw	3
  5433  0012A8  6E20               	movwf	___wmul@multiplicand,c
  5434  0012AA  0E00               	movlw	0
  5435  0012AC  6E19               	movwf	___awdiv@divisor+1,c
  5436  0012AE  0E0A               	movlw	10
  5437  0012B0  6E18               	movwf	___awdiv@divisor,c
  5438  0012B2  0E00               	movlw	0
  5439  0012B4  6E13               	movwf	___awmod@divisor+1,c
  5440  0012B6  0E64               	movlw	100
  5441  0012B8  6E12               	movwf	___awmod@divisor,c
  5442  0012BA  5039               	movf	scale@scl,w,c
  5443  0012BC  6E10               	movwf	___awmod@dividend,c
  5444  0012BE  6A11               	clrf	___awmod@dividend+1,c
  5445  0012C0  BE10               	btfsc	___awmod@dividend,7,c
  5446  0012C2  0611               	decf	___awmod@dividend+1,f,c
  5447  0012C4  ECCF  F018         	call	___awmod	;wreg free
  5448  0012C8  C010  F016         	movff	?___awmod,___awdiv@dividend
  5449  0012CC  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5450  0012D0  EC5D  F017         	call	___awdiv	;wreg free
  5451  0012D4  0E09               	movlw	9
  5452  0012D6  2416               	addwf	?___awdiv,w,c
  5453  0012D8  6E1E               	movwf	___wmul@multiplier,c
  5454  0012DA  0E00               	movlw	0
  5455  0012DC  2017               	addwfc	?___awdiv+1,w,c
  5456  0012DE  6E1F               	movwf	___wmul@multiplier+1,c
  5457  0012E0  ECEC  F01A         	call	___wmul	;wreg free
  5458  0012E4  0E50               	movlw	low __npowers_
  5459  0012E6  241E               	addwf	?___wmul,w,c
  5460  0012E8  6EF6               	movwf	tblptrl,c
  5461  0012EA  0E08               	movlw	high __npowers_
  5462  0012EC  201F               	addwfc	?___wmul+1,w,c
  5463  0012EE  6EF7               	movwf	tblptrh,c
  5464  0012F0                     	if	0	;There are less than 3 active tblptr bytes
  5465  0012F0                     	endif
  5466  0012F0  0009               	tblrd		*+
  5467  0012F2  CFF5 F027          	movff	tablat,___ftmul@f2
  5468  0012F6  0009               	tblrd		*+
  5469  0012F8  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5470  0012FC  000A               	tblrd		*-
  5471  0012FE  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5472  001302  0E00               	movlw	0
  5473  001304  6E19               	movwf	___awdiv@divisor+1,c
  5474  001306  0E64               	movlw	100
  5475  001308  6E18               	movwf	___awdiv@divisor,c
  5476  00130A  5039               	movf	scale@scl,w,c
  5477  00130C  6E16               	movwf	___awdiv@dividend,c
  5478  00130E  6A17               	clrf	___awdiv@dividend+1,c
  5479  001310  BE16               	btfsc	___awdiv@dividend,7,c
  5480  001312  0617               	decf	___awdiv@dividend+1,f,c
  5481  001314  EC5D  F017         	call	___awdiv	;wreg free
  5482  001318  0E12               	movlw	18
  5483  00131A  2416               	addwf	?___awdiv,w,c
  5484  00131C  6E1E               	movwf	___wmul@multiplier,c
  5485  00131E  0E00               	movlw	0
  5486  001320  2017               	addwfc	?___awdiv+1,w,c
  5487  001322  6E1F               	movwf	___wmul@multiplier+1,c
  5488  001324  0E00               	movlw	0
  5489  001326  6E21               	movwf	___wmul@multiplicand+1,c
  5490  001328  0E03               	movlw	3
  5491  00132A  6E20               	movwf	___wmul@multiplicand,c
  5492  00132C  ECEC  F01A         	call	___wmul	;wreg free
  5493  001330  0E50               	movlw	low __npowers_
  5494  001332  241E               	addwf	?___wmul,w,c
  5495  001334  6EF6               	movwf	tblptrl,c
  5496  001336  0E08               	movlw	high __npowers_
  5497  001338  201F               	addwfc	?___wmul+1,w,c
  5498  00133A  6EF7               	movwf	tblptrh,c
  5499  00133C                     	if	0	;There are less than 3 active tblptr bytes
  5500  00133C                     	endif
  5501  00133C  0009               	tblrd		*+
  5502  00133E  CFF5 F024          	movff	tablat,___ftmul@f1
  5503  001342  0009               	tblrd		*+
  5504  001344  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5505  001348  000A               	tblrd		*-
  5506  00134A  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5507  00134E  ECF1  F014         	call	___ftmul	;wreg free
  5508  001352  C024  F036         	movff	?___ftmul,_scale$1187
  5509  001356  C025  F037         	movff	?___ftmul+1,_scale$1187+1
  5510  00135A  C026  F038         	movff	?___ftmul+2,_scale$1187+2
  5511                           
  5512                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5513  00135E  C036  F024         	movff	_scale$1187,___ftmul@f1
  5514  001362  C037  F025         	movff	_scale$1187+1,___ftmul@f1+1
  5515  001366  C038  F026         	movff	_scale$1187+2,___ftmul@f1+2
  5516  00136A  0E00               	movlw	0
  5517  00136C  6E21               	movwf	___wmul@multiplicand+1,c
  5518  00136E  0E03               	movlw	3
  5519  001370  6E20               	movwf	___wmul@multiplicand,c
  5520  001372  0E00               	movlw	0
  5521  001374  6E13               	movwf	___awmod@divisor+1,c
  5522  001376  0E0A               	movlw	10
  5523  001378  6E12               	movwf	___awmod@divisor,c
  5524  00137A  5039               	movf	scale@scl,w,c
  5525  00137C  6E10               	movwf	___awmod@dividend,c
  5526  00137E  6A11               	clrf	___awmod@dividend+1,c
  5527  001380  BE10               	btfsc	___awmod@dividend,7,c
  5528  001382  0611               	decf	___awmod@dividend+1,f,c
  5529  001384  ECCF  F018         	call	___awmod	;wreg free
  5530  001388  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5531  00138C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5532  001390  ECEC  F01A         	call	___wmul	;wreg free
  5533  001394  0E50               	movlw	low __npowers_
  5534  001396  241E               	addwf	?___wmul,w,c
  5535  001398  6EF6               	movwf	tblptrl,c
  5536  00139A  0E08               	movlw	high __npowers_
  5537  00139C  201F               	addwfc	?___wmul+1,w,c
  5538  00139E  6EF7               	movwf	tblptrh,c
  5539  0013A0                     	if	0	;There are less than 3 active tblptr bytes
  5540  0013A0                     	endif
  5541  0013A0  0009               	tblrd		*+
  5542  0013A2  CFF5 F027          	movff	tablat,___ftmul@f2
  5543  0013A6  0009               	tblrd		*+
  5544  0013A8  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5545  0013AC  000A               	tblrd		*-
  5546  0013AE  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5547  0013B2  ECF1  F014         	call	___ftmul	;wreg free
  5548  0013B6  C024  F033         	movff	?___ftmul,?_scale
  5549  0013BA  C025  F034         	movff	?___ftmul+1,?_scale+1
  5550  0013BE  C026  F035         	movff	?___ftmul+2,?_scale+2
  5551  0013C2  0012               	return	
  5552  0013C4                     l4375:
  5553                           
  5554                           ;doprnt.c: 432: else if(scl > 10)
  5555  0013C4  5039               	movf	scale@scl,w,c
  5556  0013C6  0A80               	xorlw	128
  5557  0013C8  0F75               	addlw	-139
  5558  0013CA  A0D8               	btfss	status,0,c
  5559  0013CC  D04D               	goto	l4381
  5560                           
  5561                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5562  0013CE  0E00               	movlw	0
  5563  0013D0  6E19               	movwf	___awdiv@divisor+1,c
  5564  0013D2  0E0A               	movlw	10
  5565  0013D4  6E18               	movwf	___awdiv@divisor,c
  5566  0013D6  5039               	movf	scale@scl,w,c
  5567  0013D8  6E16               	movwf	___awdiv@dividend,c
  5568  0013DA  6A17               	clrf	___awdiv@dividend+1,c
  5569  0013DC  BE16               	btfsc	___awdiv@dividend,7,c
  5570  0013DE  0617               	decf	___awdiv@dividend+1,f,c
  5571  0013E0  EC5D  F017         	call	___awdiv	;wreg free
  5572  0013E4  0E09               	movlw	9
  5573  0013E6  2416               	addwf	?___awdiv,w,c
  5574  0013E8  6E1E               	movwf	___wmul@multiplier,c
  5575  0013EA  0E00               	movlw	0
  5576  0013EC  2017               	addwfc	?___awdiv+1,w,c
  5577  0013EE  6E1F               	movwf	___wmul@multiplier+1,c
  5578  0013F0  0E00               	movlw	0
  5579  0013F2  6E21               	movwf	___wmul@multiplicand+1,c
  5580  0013F4  0E03               	movlw	3
  5581  0013F6  6E20               	movwf	___wmul@multiplicand,c
  5582  0013F8  ECEC  F01A         	call	___wmul	;wreg free
  5583  0013FC  0E50               	movlw	low __npowers_
  5584  0013FE  241E               	addwf	?___wmul,w,c
  5585  001400  6EF6               	movwf	tblptrl,c
  5586  001402  0E08               	movlw	high __npowers_
  5587  001404  201F               	addwfc	?___wmul+1,w,c
  5588  001406  6EF7               	movwf	tblptrh,c
  5589  001408                     	if	0	;There are less than 3 active tblptr bytes
  5590  001408                     	endif
  5591  001408  0009               	tblrd		*+
  5592  00140A  CFF5 F024          	movff	tablat,___ftmul@f1
  5593  00140E  0009               	tblrd		*+
  5594  001410  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5595  001414  000A               	tblrd		*-
  5596  001416  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5597  00141A  0E00               	movlw	0
  5598  00141C  6E21               	movwf	___wmul@multiplicand+1,c
  5599  00141E  0E03               	movlw	3
  5600  001420  6E20               	movwf	___wmul@multiplicand,c
  5601  001422  0E00               	movlw	0
  5602  001424  6E13               	movwf	___awmod@divisor+1,c
  5603  001426  0E0A               	movlw	10
  5604  001428  6E12               	movwf	___awmod@divisor,c
  5605  00142A  5039               	movf	scale@scl,w,c
  5606  00142C  6E10               	movwf	___awmod@dividend,c
  5607  00142E  6A11               	clrf	___awmod@dividend+1,c
  5608  001430  BE10               	btfsc	___awmod@dividend,7,c
  5609  001432  0611               	decf	___awmod@dividend+1,f,c
  5610  001434  ECCF  F018         	call	___awmod	;wreg free
  5611  001438  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5612  00143C  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5613  001440  ECEC  F01A         	call	___wmul	;wreg free
  5614  001444  0E50               	movlw	low __npowers_
  5615  001446  241E               	addwf	?___wmul,w,c
  5616  001448  6EF6               	movwf	tblptrl,c
  5617  00144A  0E08               	movlw	high __npowers_
  5618  00144C  201F               	addwfc	?___wmul+1,w,c
  5619  00144E  6EF7               	movwf	tblptrh,c
  5620  001450                     	if	0	;There are less than 3 active tblptr bytes
  5621  001450                     	endif
  5622  001450  0009               	tblrd		*+
  5623  001452  CFF5 F027          	movff	tablat,___ftmul@f2
  5624  001456  0009               	tblrd		*+
  5625  001458  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5626  00145C  000A               	tblrd		*-
  5627  00145E  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5628  001462  ECF1  F014         	call	___ftmul	;wreg free
  5629  001466  D7A7               	goto	L3
  5630  001468                     l4381:
  5631                           
  5632                           ;doprnt.c: 434: return _npowers_[scl];
  5633  001468  5039               	movf	scale@scl,w,c
  5634  00146A  0D03               	mullw	3
  5635  00146C  0E50               	movlw	low __npowers_
  5636  00146E  24F3               	addwf	prodl,w,c
  5637  001470  6EF6               	movwf	tblptrl,c
  5638  001472  0E08               	movlw	high __npowers_
  5639  001474  20F4               	addwfc	prodh,w,c
  5640  001476  6EF7               	movwf	tblptrh,c
  5641  001478                     	if	0	;There are less than 3 active tblptr bytes
  5642  001478                     	endif
  5643  001478  0009               	tblrd		*+
  5644  00147A  CFF5 F033          	movff	tablat,?_scale
  5645  00147E  0009               	tblrd		*+
  5646  001480  CFF5 F034          	movff	tablat,?_scale+1
  5647  001484  000A               	tblrd		*-
  5648  001486  CFF5 F035          	movff	tablat,?_scale+2
  5649  00148A  0012               	return	
  5650  00148C                     l4385:
  5651                           
  5652                           ;doprnt.c: 435: }
  5653                           ;doprnt.c: 436: if(scl>=110)
  5654  00148C  5039               	movf	scale@scl,w,c
  5655  00148E  0A80               	xorlw	128
  5656  001490  0F12               	addlw	-238
  5657  001492  A0D8               	btfss	status,0,c
  5658  001494  D091               	goto	l4393
  5659                           
  5660                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5661  001496  0E00               	movlw	0
  5662  001498  6E21               	movwf	___wmul@multiplicand+1,c
  5663  00149A  0E03               	movlw	3
  5664  00149C  6E20               	movwf	___wmul@multiplicand,c
  5665  00149E  0E00               	movlw	0
  5666  0014A0  6E19               	movwf	___awdiv@divisor+1,c
  5667  0014A2  0E0A               	movlw	10
  5668  0014A4  6E18               	movwf	___awdiv@divisor,c
  5669  0014A6  0E00               	movlw	0
  5670  0014A8  6E13               	movwf	___awmod@divisor+1,c
  5671  0014AA  0E64               	movlw	100
  5672  0014AC  6E12               	movwf	___awmod@divisor,c
  5673  0014AE  5039               	movf	scale@scl,w,c
  5674  0014B0  6E10               	movwf	___awmod@dividend,c
  5675  0014B2  6A11               	clrf	___awmod@dividend+1,c
  5676  0014B4  BE10               	btfsc	___awmod@dividend,7,c
  5677  0014B6  0611               	decf	___awmod@dividend+1,f,c
  5678  0014B8  ECCF  F018         	call	___awmod	;wreg free
  5679  0014BC  C010  F016         	movff	?___awmod,___awdiv@dividend
  5680  0014C0  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5681  0014C4  EC5D  F017         	call	___awdiv	;wreg free
  5682  0014C8  0E09               	movlw	9
  5683  0014CA  2416               	addwf	?___awdiv,w,c
  5684  0014CC  6E1E               	movwf	___wmul@multiplier,c
  5685  0014CE  0E00               	movlw	0
  5686  0014D0  2017               	addwfc	?___awdiv+1,w,c
  5687  0014D2  6E1F               	movwf	___wmul@multiplier+1,c
  5688  0014D4  ECEC  F01A         	call	___wmul	;wreg free
  5689  0014D8  0E29               	movlw	low __powers_
  5690  0014DA  241E               	addwf	?___wmul,w,c
  5691  0014DC  6EF6               	movwf	tblptrl,c
  5692  0014DE  0E08               	movlw	high __powers_
  5693  0014E0  201F               	addwfc	?___wmul+1,w,c
  5694  0014E2  6EF7               	movwf	tblptrh,c
  5695  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  5696  0014E4                     	endif
  5697  0014E4  0009               	tblrd		*+
  5698  0014E6  CFF5 F027          	movff	tablat,___ftmul@f2
  5699  0014EA  0009               	tblrd		*+
  5700  0014EC  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5701  0014F0  000A               	tblrd		*-
  5702  0014F2  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5703  0014F6  0E00               	movlw	0
  5704  0014F8  6E19               	movwf	___awdiv@divisor+1,c
  5705  0014FA  0E64               	movlw	100
  5706  0014FC  6E18               	movwf	___awdiv@divisor,c
  5707  0014FE  5039               	movf	scale@scl,w,c
  5708  001500  6E16               	movwf	___awdiv@dividend,c
  5709  001502  6A17               	clrf	___awdiv@dividend+1,c
  5710  001504  BE16               	btfsc	___awdiv@dividend,7,c
  5711  001506  0617               	decf	___awdiv@dividend+1,f,c
  5712  001508  EC5D  F017         	call	___awdiv	;wreg free
  5713  00150C  0E12               	movlw	18
  5714  00150E  2416               	addwf	?___awdiv,w,c
  5715  001510  6E1E               	movwf	___wmul@multiplier,c
  5716  001512  0E00               	movlw	0
  5717  001514  2017               	addwfc	?___awdiv+1,w,c
  5718  001516  6E1F               	movwf	___wmul@multiplier+1,c
  5719  001518  0E00               	movlw	0
  5720  00151A  6E21               	movwf	___wmul@multiplicand+1,c
  5721  00151C  0E03               	movlw	3
  5722  00151E  6E20               	movwf	___wmul@multiplicand,c
  5723  001520  ECEC  F01A         	call	___wmul	;wreg free
  5724  001524  0E29               	movlw	low __powers_
  5725  001526  241E               	addwf	?___wmul,w,c
  5726  001528  6EF6               	movwf	tblptrl,c
  5727  00152A  0E08               	movlw	high __powers_
  5728  00152C  201F               	addwfc	?___wmul+1,w,c
  5729  00152E  6EF7               	movwf	tblptrh,c
  5730  001530                     	if	0	;There are less than 3 active tblptr bytes
  5731  001530                     	endif
  5732  001530  0009               	tblrd		*+
  5733  001532  CFF5 F024          	movff	tablat,___ftmul@f1
  5734  001536  0009               	tblrd		*+
  5735  001538  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5736  00153C  000A               	tblrd		*-
  5737  00153E  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5738  001542  ECF1  F014         	call	___ftmul	;wreg free
  5739  001546  C024  F036         	movff	?___ftmul,_scale$1187
  5740  00154A  C025  F037         	movff	?___ftmul+1,_scale$1187+1
  5741  00154E  C026  F038         	movff	?___ftmul+2,_scale$1187+2
  5742                           
  5743                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5744  001552  C036  F024         	movff	_scale$1187,___ftmul@f1
  5745  001556  C037  F025         	movff	_scale$1187+1,___ftmul@f1+1
  5746  00155A  C038  F026         	movff	_scale$1187+2,___ftmul@f1+2
  5747  00155E  0E00               	movlw	0
  5748  001560  6E21               	movwf	___wmul@multiplicand+1,c
  5749  001562  0E03               	movlw	3
  5750  001564  6E20               	movwf	___wmul@multiplicand,c
  5751  001566  0E00               	movlw	0
  5752  001568  6E13               	movwf	___awmod@divisor+1,c
  5753  00156A  0E0A               	movlw	10
  5754  00156C  6E12               	movwf	___awmod@divisor,c
  5755  00156E  5039               	movf	scale@scl,w,c
  5756  001570  6E10               	movwf	___awmod@dividend,c
  5757  001572  6A11               	clrf	___awmod@dividend+1,c
  5758  001574  BE10               	btfsc	___awmod@dividend,7,c
  5759  001576  0611               	decf	___awmod@dividend+1,f,c
  5760  001578  ECCF  F018         	call	___awmod	;wreg free
  5761  00157C  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5762  001580  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5763  001584  ECEC  F01A         	call	___wmul	;wreg free
  5764  001588  0E29               	movlw	low __powers_
  5765  00158A  241E               	addwf	?___wmul,w,c
  5766  00158C  6EF6               	movwf	tblptrl,c
  5767  00158E  0E08               	movlw	high __powers_
  5768  001590  201F               	addwfc	?___wmul+1,w,c
  5769  001592  6EF7               	movwf	tblptrh,c
  5770  001594                     	if	0	;There are less than 3 active tblptr bytes
  5771  001594                     	endif
  5772  001594  0009               	tblrd		*+
  5773  001596  CFF5 F027          	movff	tablat,___ftmul@f2
  5774  00159A  0009               	tblrd		*+
  5775  00159C  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5776  0015A0  000A               	tblrd		*-
  5777  0015A2  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5778  0015A6  ECF1  F014         	call	___ftmul	;wreg free
  5779  0015AA  C024  F033         	movff	?___ftmul,?_scale
  5780  0015AE  C025  F034         	movff	?___ftmul+1,?_scale+1
  5781  0015B2  C026  F035         	movff	?___ftmul+2,?_scale+2
  5782  0015B6  0012               	return	
  5783  0015B8                     l4393:
  5784                           
  5785                           ;doprnt.c: 438: else if(scl > 10)
  5786  0015B8  5039               	movf	scale@scl,w,c
  5787  0015BA  0A80               	xorlw	128
  5788  0015BC  0F75               	addlw	-139
  5789  0015BE  A0D8               	btfss	status,0,c
  5790  0015C0  D04D               	goto	l4399
  5791                           
  5792                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5793  0015C2  0E00               	movlw	0
  5794  0015C4  6E19               	movwf	___awdiv@divisor+1,c
  5795  0015C6  0E0A               	movlw	10
  5796  0015C8  6E18               	movwf	___awdiv@divisor,c
  5797  0015CA  5039               	movf	scale@scl,w,c
  5798  0015CC  6E16               	movwf	___awdiv@dividend,c
  5799  0015CE  6A17               	clrf	___awdiv@dividend+1,c
  5800  0015D0  BE16               	btfsc	___awdiv@dividend,7,c
  5801  0015D2  0617               	decf	___awdiv@dividend+1,f,c
  5802  0015D4  EC5D  F017         	call	___awdiv	;wreg free
  5803  0015D8  0E09               	movlw	9
  5804  0015DA  2416               	addwf	?___awdiv,w,c
  5805  0015DC  6E1E               	movwf	___wmul@multiplier,c
  5806  0015DE  0E00               	movlw	0
  5807  0015E0  2017               	addwfc	?___awdiv+1,w,c
  5808  0015E2  6E1F               	movwf	___wmul@multiplier+1,c
  5809  0015E4  0E00               	movlw	0
  5810  0015E6  6E21               	movwf	___wmul@multiplicand+1,c
  5811  0015E8  0E03               	movlw	3
  5812  0015EA  6E20               	movwf	___wmul@multiplicand,c
  5813  0015EC  ECEC  F01A         	call	___wmul	;wreg free
  5814  0015F0  0E29               	movlw	low __powers_
  5815  0015F2  241E               	addwf	?___wmul,w,c
  5816  0015F4  6EF6               	movwf	tblptrl,c
  5817  0015F6  0E08               	movlw	high __powers_
  5818  0015F8  201F               	addwfc	?___wmul+1,w,c
  5819  0015FA  6EF7               	movwf	tblptrh,c
  5820  0015FC                     	if	0	;There are less than 3 active tblptr bytes
  5821  0015FC                     	endif
  5822  0015FC  0009               	tblrd		*+
  5823  0015FE  CFF5 F024          	movff	tablat,___ftmul@f1
  5824  001602  0009               	tblrd		*+
  5825  001604  CFF5 F025          	movff	tablat,___ftmul@f1+1
  5826  001608  000A               	tblrd		*-
  5827  00160A  CFF5 F026          	movff	tablat,___ftmul@f1+2
  5828  00160E  0E00               	movlw	0
  5829  001610  6E21               	movwf	___wmul@multiplicand+1,c
  5830  001612  0E03               	movlw	3
  5831  001614  6E20               	movwf	___wmul@multiplicand,c
  5832  001616  0E00               	movlw	0
  5833  001618  6E13               	movwf	___awmod@divisor+1,c
  5834  00161A  0E0A               	movlw	10
  5835  00161C  6E12               	movwf	___awmod@divisor,c
  5836  00161E  5039               	movf	scale@scl,w,c
  5837  001620  6E10               	movwf	___awmod@dividend,c
  5838  001622  6A11               	clrf	___awmod@dividend+1,c
  5839  001624  BE10               	btfsc	___awmod@dividend,7,c
  5840  001626  0611               	decf	___awmod@dividend+1,f,c
  5841  001628  ECCF  F018         	call	___awmod	;wreg free
  5842  00162C  C010  F01E         	movff	?___awmod,___wmul@multiplier
  5843  001630  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  5844  001634  ECEC  F01A         	call	___wmul	;wreg free
  5845  001638  0E29               	movlw	low __powers_
  5846  00163A  241E               	addwf	?___wmul,w,c
  5847  00163C  6EF6               	movwf	tblptrl,c
  5848  00163E  0E08               	movlw	high __powers_
  5849  001640  201F               	addwfc	?___wmul+1,w,c
  5850  001642  6EF7               	movwf	tblptrh,c
  5851  001644                     	if	0	;There are less than 3 active tblptr bytes
  5852  001644                     	endif
  5853  001644  0009               	tblrd		*+
  5854  001646  CFF5 F027          	movff	tablat,___ftmul@f2
  5855  00164A  0009               	tblrd		*+
  5856  00164C  CFF5 F028          	movff	tablat,___ftmul@f2+1
  5857  001650  000A               	tblrd		*-
  5858  001652  CFF5 F029          	movff	tablat,___ftmul@f2+2
  5859  001656  ECF1  F014         	call	___ftmul	;wreg free
  5860  00165A  D7A7               	goto	L4
  5861  00165C                     l4399:
  5862                           
  5863                           ;doprnt.c: 440: return _powers_[scl];
  5864  00165C  5039               	movf	scale@scl,w,c
  5865  00165E  0D03               	mullw	3
  5866  001660  0E29               	movlw	low __powers_
  5867  001662  24F3               	addwf	prodl,w,c
  5868  001664  6EF6               	movwf	tblptrl,c
  5869  001666  0E08               	movlw	high __powers_
  5870  001668  20F4               	addwfc	prodh,w,c
  5871  00166A  6EF7               	movwf	tblptrh,c
  5872  00166C                     	if	0	;There are less than 3 active tblptr bytes
  5873  00166C                     	endif
  5874  00166C  0009               	tblrd		*+
  5875  00166E  CFF5 F033          	movff	tablat,?_scale
  5876  001672  0009               	tblrd		*+
  5877  001674  CFF5 F034          	movff	tablat,?_scale+1
  5878  001678  000A               	tblrd		*-
  5879  00167A  CFF5 F035          	movff	tablat,?_scale+2
  5880  00167E  0012               	return	
  5881  001680                     __end_of_scale:
  5882                           	opt stack 0
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           indf1	equ	0xFE7
  5893                           fsr1h	equ	0xFE2
  5894                           fsr1l	equ	0xFE1
  5895                           indf2	equ	0xFDF
  5896                           postinc2	equ	0xFDE
  5897                           postdec2	equ	0xFDD
  5898                           fsr2h	equ	0xFDA
  5899                           fsr2l	equ	0xFD9
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _isdigit *****************
  5903 ;; Defined at:
  5904 ;;		line 8 in file "D:\mplab\sources\common\isdigit.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  c               1    wreg     unsigned char 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  c               1   17[COMRAM] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;		None               void
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0
  5919 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5920 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5921 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5922 ;;Total ram usage:        3 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    1
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_sprintf
  5929 ;;		_strtod
  5930 ;;		_atol
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text18
  5935  003668                     __ptext18:
  5936                           	opt stack 0
  5937  003668                     _isdigit:
  5938                           	opt stack 28
  5939                           
  5940                           ;incstack = 0
  5941                           ;isdigit@c stored from wreg
  5942  003668  6E12               	movwf	isdigit@c,c
  5943  00366A  0E00               	movlw	0
  5944  00366C  6E11               	movwf	_isdigit$833,c
  5945  00366E  0E3A               	movlw	58
  5946  003670  6012               	cpfslt	isdigit@c,c
  5947  003672  D005               	goto	l2711
  5948  003674  0E2F               	movlw	47
  5949  003676  6412               	cpfsgt	isdigit@c,c
  5950  003678  D002               	goto	l2711
  5951  00367A  0E01               	movlw	1
  5952  00367C  6E11               	movwf	_isdigit$833,c
  5953  00367E                     l2711:
  5954  00367E  C011  F010         	movff	_isdigit$833,??_isdigit
  5955  003682  3010               	rrcf	??_isdigit,w,c
  5956  003684  0012               	return	
  5957  003686                     __end_of_isdigit:
  5958                           	opt stack 0
  5959                           tblptru	equ	0xFF8
  5960                           tblptrh	equ	0xFF7
  5961                           tblptrl	equ	0xFF6
  5962                           tablat	equ	0xFF5
  5963                           prodh	equ	0xFF4
  5964                           prodl	equ	0xFF3
  5965                           intcon	equ	0xFF2
  5966                           postinc0	equ	0xFEE
  5967                           wreg	equ	0xFE8
  5968                           indf1	equ	0xFE7
  5969                           fsr1h	equ	0xFE2
  5970                           fsr1l	equ	0xFE1
  5971                           indf2	equ	0xFDF
  5972                           postinc2	equ	0xFDE
  5973                           postdec2	equ	0xFDD
  5974                           fsr2h	equ	0xFDA
  5975                           fsr2l	equ	0xFD9
  5976                           status	equ	0xFD8
  5977                           
  5978 ;; *************** function _fround *****************
  5979 ;; Defined at:
  5980 ;;		line 409 in file "D:\mplab\sources\common\doprnt.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  prec            1    wreg     unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  prec            1   59[COMRAM] unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  3   50[COMRAM] unsigned char 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5994 ;;      Params:         3       0       0       0       0       0       0       0       0
  5995 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5997 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5998 ;;Total ram usage:       10 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		___awdiv
  6003 ;;		___awmod
  6004 ;;		___ftmul
  6005 ;;		___wmul
  6006 ;; This function is called by:
  6007 ;;		_sprintf
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	text19
  6012  001DAE                     __ptext19:
  6013                           	opt stack 0
  6014  001DAE                     _fround:
  6015                           	opt stack 26
  6016                           
  6017                           ;incstack = 0
  6018                           ;fround@prec stored from wreg
  6019  001DAE  6E3C               	movwf	fround@prec,c
  6020                           
  6021                           ;doprnt.c: 413: if(prec>=110)
  6022  001DB0  0E6D               	movlw	109
  6023  001DB2  643C               	cpfsgt	fround@prec,c
  6024  001DB4  D09F               	goto	l4353
  6025                           
  6026                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6027  001DB6  0E00               	movlw	0
  6028  001DB8  6E21               	movwf	___wmul@multiplicand+1,c
  6029  001DBA  0E03               	movlw	3
  6030  001DBC  6E20               	movwf	___wmul@multiplicand,c
  6031  001DBE  0E00               	movlw	0
  6032  001DC0  6E19               	movwf	___awdiv@divisor+1,c
  6033  001DC2  0E0A               	movlw	10
  6034  001DC4  6E18               	movwf	___awdiv@divisor,c
  6035  001DC6  0E00               	movlw	0
  6036  001DC8  6E13               	movwf	___awmod@divisor+1,c
  6037  001DCA  0E64               	movlw	100
  6038  001DCC  6E12               	movwf	___awmod@divisor,c
  6039  001DCE  C03C  F010         	movff	fround@prec,___awmod@dividend
  6040  001DD2  6A11               	clrf	___awmod@dividend+1,c
  6041  001DD4  ECCF  F018         	call	___awmod	;wreg free
  6042  001DD8  C010  F016         	movff	?___awmod,___awdiv@dividend
  6043  001DDC  C011  F017         	movff	?___awmod+1,___awdiv@dividend+1
  6044  001DE0  EC5D  F017         	call	___awdiv	;wreg free
  6045  001DE4  0E09               	movlw	9
  6046  001DE6  2416               	addwf	?___awdiv,w,c
  6047  001DE8  6E1E               	movwf	___wmul@multiplier,c
  6048  001DEA  0E00               	movlw	0
  6049  001DEC  2017               	addwfc	?___awdiv+1,w,c
  6050  001DEE  6E1F               	movwf	___wmul@multiplier+1,c
  6051  001DF0  ECEC  F01A         	call	___wmul	;wreg free
  6052  001DF4  0E50               	movlw	low __npowers_
  6053  001DF6  241E               	addwf	?___wmul,w,c
  6054  001DF8  6EF6               	movwf	tblptrl,c
  6055  001DFA  0E08               	movlw	high __npowers_
  6056  001DFC  201F               	addwfc	?___wmul+1,w,c
  6057  001DFE  6EF7               	movwf	tblptrh,c
  6058  001E00                     	if	0	;There are less than 3 active tblptr bytes
  6059  001E00                     	endif
  6060  001E00  0009               	tblrd		*+
  6061  001E02  CFF5 F027          	movff	tablat,___ftmul@f2
  6062  001E06  0009               	tblrd		*+
  6063  001E08  CFF5 F028          	movff	tablat,___ftmul@f2+1
  6064  001E0C  000A               	tblrd		*-
  6065  001E0E  CFF5 F029          	movff	tablat,___ftmul@f2+2
  6066  001E12  0E00               	movlw	0
  6067  001E14  6E19               	movwf	___awdiv@divisor+1,c
  6068  001E16  0E64               	movlw	100
  6069  001E18  6E18               	movwf	___awdiv@divisor,c
  6070  001E1A  C03C  F016         	movff	fround@prec,___awdiv@dividend
  6071  001E1E  6A17               	clrf	___awdiv@dividend+1,c
  6072  001E20  EC5D  F017         	call	___awdiv	;wreg free
  6073  001E24  0E12               	movlw	18
  6074  001E26  2416               	addwf	?___awdiv,w,c
  6075  001E28  6E1E               	movwf	___wmul@multiplier,c
  6076  001E2A  0E00               	movlw	0
  6077  001E2C  2017               	addwfc	?___awdiv+1,w,c
  6078  001E2E  6E1F               	movwf	___wmul@multiplier+1,c
  6079  001E30  0E00               	movlw	0
  6080  001E32  6E21               	movwf	___wmul@multiplicand+1,c
  6081  001E34  0E03               	movlw	3
  6082  001E36  6E20               	movwf	___wmul@multiplicand,c
  6083  001E38  ECEC  F01A         	call	___wmul	;wreg free
  6084  001E3C  0E50               	movlw	low __npowers_
  6085  001E3E  241E               	addwf	?___wmul,w,c
  6086  001E40  6EF6               	movwf	tblptrl,c
  6087  001E42  0E08               	movlw	high __npowers_
  6088  001E44  201F               	addwfc	?___wmul+1,w,c
  6089  001E46  6EF7               	movwf	tblptrh,c
  6090  001E48                     	if	0	;There are less than 3 active tblptr bytes
  6091  001E48                     	endif
  6092  001E48  0009               	tblrd		*+
  6093  001E4A  CFF5 F024          	movff	tablat,___ftmul@f1
  6094  001E4E  0009               	tblrd		*+
  6095  001E50  CFF5 F025          	movff	tablat,___ftmul@f1+1
  6096  001E54  000A               	tblrd		*-
  6097  001E56  CFF5 F026          	movff	tablat,___ftmul@f1+2
  6098  001E5A  ECF1  F014         	call	___ftmul	;wreg free
  6099  001E5E  C024  F039         	movff	?___ftmul,_fround$1185
  6100  001E62  C025  F03A         	movff	?___ftmul+1,_fround$1185+1
  6101  001E66  C026  F03B         	movff	?___ftmul+2,_fround$1185+2
  6102                           
  6103                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6104  001E6A  0E00               	movlw	0
  6105  001E6C  6E21               	movwf	___wmul@multiplicand+1,c
  6106  001E6E  0E03               	movlw	3
  6107  001E70  6E20               	movwf	___wmul@multiplicand,c
  6108  001E72  0E00               	movlw	0
  6109  001E74  6E13               	movwf	___awmod@divisor+1,c
  6110  001E76  0E0A               	movlw	10
  6111  001E78  6E12               	movwf	___awmod@divisor,c
  6112  001E7A  C03C  F010         	movff	fround@prec,___awmod@dividend
  6113  001E7E  6A11               	clrf	___awmod@dividend+1,c
  6114  001E80  ECCF  F018         	call	___awmod	;wreg free
  6115  001E84  C010  F01E         	movff	?___awmod,___wmul@multiplier
  6116  001E88  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  6117  001E8C  ECEC  F01A         	call	___wmul	;wreg free
  6118  001E90  0E50               	movlw	low __npowers_
  6119  001E92  241E               	addwf	?___wmul,w,c
  6120  001E94  6EF6               	movwf	tblptrl,c
  6121  001E96  0E08               	movlw	high __npowers_
  6122  001E98  201F               	addwfc	?___wmul+1,w,c
  6123  001E9A  6EF7               	movwf	tblptrh,c
  6124  001E9C                     	if	0	;There are less than 3 active tblptr bytes
  6125  001E9C                     	endif
  6126  001E9C  0009               	tblrd		*+
  6127  001E9E  CFF5 F027          	movff	tablat,___ftmul@f2
  6128  001EA2  0009               	tblrd		*+
  6129  001EA4  CFF5 F028          	movff	tablat,___ftmul@f2+1
  6130  001EA8  000A               	tblrd		*-
  6131  001EAA  CFF5 F029          	movff	tablat,___ftmul@f2+2
  6132  001EAE  C039  F024         	movff	_fround$1185,___ftmul@f1
  6133  001EB2  C03A  F025         	movff	_fround$1185+1,___ftmul@f1+1
  6134  001EB6  C03B  F026         	movff	_fround$1185+2,___ftmul@f1+2
  6135  001EBA  ECF1  F014         	call	___ftmul	;wreg free
  6136  001EBE  C024  F036         	movff	?___ftmul,_fround$1186
  6137  001EC2  C025  F037         	movff	?___ftmul+1,_fround$1186+1
  6138  001EC6  C026  F038         	movff	?___ftmul+2,_fround$1186+2
  6139                           
  6140                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6141  001ECA  C036  F024         	movff	_fround$1186,___ftmul@f1
  6142  001ECE  C037  F025         	movff	_fround$1186+1,___ftmul@f1+1
  6143  001ED2  C038  F026         	movff	_fround$1186+2,___ftmul@f1+2
  6144  001ED6  0E00               	movlw	0
  6145  001ED8  6E27               	movwf	___ftmul@f2,c
  6146  001EDA  0E00               	movlw	0
  6147  001EDC  6E28               	movwf	___ftmul@f2+1,c
  6148  001EDE  0E3F               	movlw	63
  6149  001EE0  6E29               	movwf	___ftmul@f2+2,c
  6150  001EE2  ECF1  F014         	call	___ftmul	;wreg free
  6151  001EE6  C024  F033         	movff	?___ftmul,?_fround
  6152  001EEA  C025  F034         	movff	?___ftmul+1,?_fround+1
  6153  001EEE  C026  F035         	movff	?___ftmul+2,?_fround+2
  6154  001EF2  0012               	return	
  6155  001EF4                     l4353:
  6156                           
  6157                           ;doprnt.c: 415: else if(prec > 10)
  6158  001EF4  0E0A               	movlw	10
  6159  001EF6  643C               	cpfsgt	fround@prec,c
  6160  001EF8  D05D               	goto	l4361
  6161                           
  6162                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6163  001EFA  0E00               	movlw	0
  6164  001EFC  6E21               	movwf	___wmul@multiplicand+1,c
  6165  001EFE  0E03               	movlw	3
  6166  001F00  6E20               	movwf	___wmul@multiplicand,c
  6167  001F02  0E00               	movlw	0
  6168  001F04  6E13               	movwf	___awmod@divisor+1,c
  6169  001F06  0E0A               	movlw	10
  6170  001F08  6E12               	movwf	___awmod@divisor,c
  6171  001F0A  C03C  F010         	movff	fround@prec,___awmod@dividend
  6172  001F0E  6A11               	clrf	___awmod@dividend+1,c
  6173  001F10  ECCF  F018         	call	___awmod	;wreg free
  6174  001F14  C010  F01E         	movff	?___awmod,___wmul@multiplier
  6175  001F18  C011  F01F         	movff	?___awmod+1,___wmul@multiplier+1
  6176  001F1C  ECEC  F01A         	call	___wmul	;wreg free
  6177  001F20  0E50               	movlw	low __npowers_
  6178  001F22  241E               	addwf	?___wmul,w,c
  6179  001F24  6EF6               	movwf	tblptrl,c
  6180  001F26  0E08               	movlw	high __npowers_
  6181  001F28  201F               	addwfc	?___wmul+1,w,c
  6182  001F2A  6EF7               	movwf	tblptrh,c
  6183  001F2C                     	if	0	;There are less than 3 active tblptr bytes
  6184  001F2C                     	endif
  6185  001F2C  0009               	tblrd		*+
  6186  001F2E  CFF5 F027          	movff	tablat,___ftmul@f2
  6187  001F32  0009               	tblrd		*+
  6188  001F34  CFF5 F028          	movff	tablat,___ftmul@f2+1
  6189  001F38  000A               	tblrd		*-
  6190  001F3A  CFF5 F029          	movff	tablat,___ftmul@f2+2
  6191  001F3E  0E00               	movlw	0
  6192  001F40  6E19               	movwf	___awdiv@divisor+1,c
  6193  001F42  0E0A               	movlw	10
  6194  001F44  6E18               	movwf	___awdiv@divisor,c
  6195  001F46  C03C  F016         	movff	fround@prec,___awdiv@dividend
  6196  001F4A  6A17               	clrf	___awdiv@dividend+1,c
  6197  001F4C  EC5D  F017         	call	___awdiv	;wreg free
  6198  001F50  0E09               	movlw	9
  6199  001F52  2416               	addwf	?___awdiv,w,c
  6200  001F54  6E1E               	movwf	___wmul@multiplier,c
  6201  001F56  0E00               	movlw	0
  6202  001F58  2017               	addwfc	?___awdiv+1,w,c
  6203  001F5A  6E1F               	movwf	___wmul@multiplier+1,c
  6204  001F5C  0E00               	movlw	0
  6205  001F5E  6E21               	movwf	___wmul@multiplicand+1,c
  6206  001F60  0E03               	movlw	3
  6207  001F62  6E20               	movwf	___wmul@multiplicand,c
  6208  001F64  ECEC  F01A         	call	___wmul	;wreg free
  6209  001F68  0E50               	movlw	low __npowers_
  6210  001F6A  241E               	addwf	?___wmul,w,c
  6211  001F6C  6EF6               	movwf	tblptrl,c
  6212  001F6E  0E08               	movlw	high __npowers_
  6213  001F70  201F               	addwfc	?___wmul+1,w,c
  6214  001F72  6EF7               	movwf	tblptrh,c
  6215  001F74                     	if	0	;There are less than 3 active tblptr bytes
  6216  001F74                     	endif
  6217  001F74  0009               	tblrd		*+
  6218  001F76  CFF5 F024          	movff	tablat,___ftmul@f1
  6219  001F7A  0009               	tblrd		*+
  6220  001F7C  CFF5 F025          	movff	tablat,___ftmul@f1+1
  6221  001F80  000A               	tblrd		*-
  6222  001F82  CFF5 F026          	movff	tablat,___ftmul@f1+2
  6223  001F86  ECF1  F014         	call	___ftmul	;wreg free
  6224  001F8A  C024  F039         	movff	?___ftmul,_fround$1185
  6225  001F8E  C025  F03A         	movff	?___ftmul+1,_fround$1185+1
  6226  001F92  C026  F03B         	movff	?___ftmul+2,_fround$1185+2
  6227                           
  6228                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6229  001F96  C039  F024         	movff	_fround$1185,___ftmul@f1
  6230  001F9A  C03A  F025         	movff	_fround$1185+1,___ftmul@f1+1
  6231  001F9E  C03B  F026         	movff	_fround$1185+2,___ftmul@f1+2
  6232  001FA2  0E00               	movlw	0
  6233  001FA4  6E27               	movwf	___ftmul@f2,c
  6234  001FA6  0E00               	movlw	0
  6235  001FA8  6E28               	movwf	___ftmul@f2+1,c
  6236  001FAA  0E3F               	movlw	63
  6237  001FAC  6E29               	movwf	___ftmul@f2+2,c
  6238  001FAE  ECF1  F014         	call	___ftmul	;wreg free
  6239  001FB2  D799               	goto	L5
  6240  001FB4                     l4361:
  6241                           
  6242                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6243  001FB4  503C               	movf	fround@prec,w,c
  6244  001FB6  0D03               	mullw	3
  6245  001FB8  0E50               	movlw	low __npowers_
  6246  001FBA  24F3               	addwf	prodl,w,c
  6247  001FBC  6EF6               	movwf	tblptrl,c
  6248  001FBE  0E08               	movlw	high __npowers_
  6249  001FC0  20F4               	addwfc	prodh,w,c
  6250  001FC2  6EF7               	movwf	tblptrh,c
  6251  001FC4                     	if	0	;There are less than 3 active tblptr bytes
  6252  001FC4                     	endif
  6253  001FC4  0009               	tblrd		*+
  6254  001FC6  CFF5 F024          	movff	tablat,___ftmul@f1
  6255  001FCA  0009               	tblrd		*+
  6256  001FCC  CFF5 F025          	movff	tablat,___ftmul@f1+1
  6257  001FD0  000A               	tblrd		*-
  6258  001FD2  CFF5 F026          	movff	tablat,___ftmul@f1+2
  6259  001FD6  0E00               	movlw	0
  6260  001FD8  6E27               	movwf	___ftmul@f2,c
  6261  001FDA  0E00               	movlw	0
  6262  001FDC  6E28               	movwf	___ftmul@f2+1,c
  6263  001FDE  0E3F               	movlw	63
  6264  001FE0  6E29               	movwf	___ftmul@f2+2,c
  6265  001FE2  ECF1  F014         	call	___ftmul	;wreg free
  6266  001FE6  C024  F033         	movff	?___ftmul,?_fround
  6267  001FEA  C025  F034         	movff	?___ftmul+1,?_fround+1
  6268  001FEE  C026  F035         	movff	?___ftmul+2,?_fround+2
  6269  001FF2  0012               	return	
  6270  001FF4                     __end_of_fround:
  6271                           	opt stack 0
  6272                           tblptru	equ	0xFF8
  6273                           tblptrh	equ	0xFF7
  6274                           tblptrl	equ	0xFF6
  6275                           tablat	equ	0xFF5
  6276                           prodh	equ	0xFF4
  6277                           prodl	equ	0xFF3
  6278                           intcon	equ	0xFF2
  6279                           postinc0	equ	0xFEE
  6280                           wreg	equ	0xFE8
  6281                           indf1	equ	0xFE7
  6282                           fsr1h	equ	0xFE2
  6283                           fsr1l	equ	0xFE1
  6284                           indf2	equ	0xFDF
  6285                           postinc2	equ	0xFDE
  6286                           postdec2	equ	0xFDD
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291 ;; *************** function ___wmul *****************
  6292 ;; Defined at:
  6293 ;;		line 15 in file "D:\mplab\sources\common\Umul16.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  multiplier      2   29[COMRAM] unsigned int 
  6296 ;;  multiplicand    2   31[COMRAM] unsigned int 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;  product         2   33[COMRAM] unsigned int 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  2   29[COMRAM] unsigned int 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2, status,0, prodl, prodh
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6308 ;;      Params:         4       0       0       0       0       0       0       0       0
  6309 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6310 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6311 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6312 ;;Total ram usage:        6 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    1
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_fround
  6319 ;;		_scale
  6320 ;;		_sprintf
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text20
  6325  0035D8                     __ptext20:
  6326                           	opt stack 0
  6327  0035D8                     ___wmul:
  6328                           	opt stack 27
  6329                           
  6330                           ;incstack = 0
  6331  0035D8  501E               	movf	___wmul@multiplier,w,c
  6332  0035DA  0220               	mulwf	___wmul@multiplicand,c
  6333  0035DC  CFF3 F022          	movff	prodl,___wmul@product
  6334  0035E0  CFF4 F023          	movff	prodh,___wmul@product+1
  6335  0035E4  501E               	movf	___wmul@multiplier,w,c
  6336  0035E6  0221               	mulwf	___wmul@multiplicand+1,c
  6337  0035E8  50F3               	movf	prodl,w,c
  6338  0035EA  2623               	addwf	___wmul@product+1,f,c
  6339  0035EC  501F               	movf	___wmul@multiplier+1,w,c
  6340  0035EE  0220               	mulwf	___wmul@multiplicand,c
  6341  0035F0  50F3               	movf	prodl,w,c
  6342  0035F2  2623               	addwf	___wmul@product+1,f,c
  6343  0035F4  C022  F01E         	movff	___wmul@product,?___wmul
  6344  0035F8  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  6345  0035FC  0012               	return	
  6346  0035FE                     __end_of___wmul:
  6347                           	opt stack 0
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           prodh	equ	0xFF4
  6353                           prodl	equ	0xFF3
  6354                           intcon	equ	0xFF2
  6355                           postinc0	equ	0xFEE
  6356                           wreg	equ	0xFE8
  6357                           indf1	equ	0xFE7
  6358                           fsr1h	equ	0xFE2
  6359                           fsr1l	equ	0xFE1
  6360                           indf2	equ	0xFDF
  6361                           postinc2	equ	0xFDE
  6362                           postdec2	equ	0xFDD
  6363                           fsr2h	equ	0xFDA
  6364                           fsr2l	equ	0xFD9
  6365                           status	equ	0xFD8
  6366                           
  6367 ;; *************** function ___ftmul *****************
  6368 ;; Defined at:
  6369 ;;		line 62 in file "D:\mplab\sources\common\ftmul.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;  f1              3   35[COMRAM] float 
  6372 ;;  f2              3   38[COMRAM] float 
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  6375 ;;  sign            1   49[COMRAM] unsigned char 
  6376 ;;  cntr            1   48[COMRAM] unsigned char 
  6377 ;;  exp             1   44[COMRAM] unsigned char 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  3   35[COMRAM] float 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6387 ;;      Params:         6       0       0       0       0       0       0       0       0
  6388 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6389 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6390 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6391 ;;Total ram usage:       15 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    2
  6394 ;; This function calls:
  6395 ;;		___ftpack
  6396 ;; This function is called by:
  6397 ;;		_main
  6398 ;;		_convert_to_degrees
  6399 ;;		_fround
  6400 ;;		_scale
  6401 ;;		_sprintf
  6402 ;;		_strtod
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text21
  6407  0029E2                     __ptext21:
  6408                           	opt stack 0
  6409  0029E2                     ___ftmul:
  6410                           	opt stack 26
  6411                           
  6412                           ;incstack = 0
  6413  0029E2  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  6414  0029E6  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  6415  0029E8  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  6416  0029EA  3425               	rlcf	___ftmul@f1+1,w,c
  6417  0029EC  362A               	rlcf	??___ftmul& (0+255),f,c
  6418  0029EE  E301               	bnc	u4911
  6419  0029F0  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  6420  0029F2                     u4911:
  6421  0029F2  502A               	movf	??___ftmul,w,c
  6422  0029F4  6E2D               	movwf	___ftmul@exp,c
  6423  0029F6  502D               	movf	___ftmul@exp,w,c
  6424  0029F8  A4D8               	btfss	status,2,c
  6425  0029FA  D007               	goto	l4301
  6426  0029FC  0E00               	movlw	0
  6427  0029FE  6E24               	movwf	?___ftmul,c
  6428  002A00  0E00               	movlw	0
  6429  002A02  6E25               	movwf	?___ftmul+1,c
  6430  002A04  0E00               	movlw	0
  6431  002A06  6E26               	movwf	?___ftmul+2,c
  6432  002A08  0012               	return	
  6433  002A0A                     l4301:
  6434  002A0A  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  6435  002A0E  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  6436  002A10  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  6437  002A12  3428               	rlcf	___ftmul@f2+1,w,c
  6438  002A14  362A               	rlcf	??___ftmul& (0+255),f,c
  6439  002A16  E301               	bnc	u4931
  6440  002A18  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  6441  002A1A                     u4931:
  6442  002A1A  502A               	movf	??___ftmul,w,c
  6443  002A1C  6E32               	movwf	___ftmul@sign,c
  6444  002A1E  5032               	movf	___ftmul@sign,w,c
  6445  002A20  A4D8               	btfss	status,2,c
  6446  002A22  D007               	goto	l4307
  6447  002A24  0E00               	movlw	0
  6448  002A26  6E24               	movwf	?___ftmul,c
  6449  002A28  0E00               	movlw	0
  6450  002A2A  6E25               	movwf	?___ftmul+1,c
  6451  002A2C  0E00               	movlw	0
  6452  002A2E  6E26               	movwf	?___ftmul+2,c
  6453  002A30  0012               	return	
  6454  002A32                     l4307:
  6455  002A32  5032               	movf	___ftmul@sign,w,c
  6456  002A34  0F7B               	addlw	123
  6457  002A36  262D               	addwf	___ftmul@exp,f,c
  6458  002A38  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  6459  002A3C  5029               	movf	___ftmul@f2+2,w,c
  6460  002A3E  1A32               	xorwf	___ftmul@sign,f,c
  6461  002A40  0E80               	movlw	128
  6462  002A42  1632               	andwf	___ftmul@sign,f,c
  6463  002A44  8E25               	bsf	___ftmul@f1+1,7,c
  6464  002A46  8E28               	bsf	___ftmul@f2+1,7,c
  6465  002A48  0EFF               	movlw	255
  6466  002A4A  1627               	andwf	___ftmul@f2,f,c
  6467  002A4C  0EFF               	movlw	255
  6468  002A4E  1628               	andwf	___ftmul@f2+1,f,c
  6469  002A50  0E00               	movlw	0
  6470  002A52  1629               	andwf	___ftmul@f2+2,f,c
  6471  002A54  0E00               	movlw	0
  6472  002A56  6E2E               	movwf	___ftmul@f3_as_product,c
  6473  002A58  0E00               	movlw	0
  6474  002A5A  6E2F               	movwf	___ftmul@f3_as_product+1,c
  6475  002A5C  0E00               	movlw	0
  6476  002A5E  6E30               	movwf	___ftmul@f3_as_product+2,c
  6477  002A60  0E07               	movlw	7
  6478  002A62  6E31               	movwf	___ftmul@cntr,c
  6479  002A64                     l4321:
  6480  002A64  A024               	btfss	___ftmul@f1,0,c
  6481  002A66  D006               	goto	l4325
  6482  002A68  5027               	movf	___ftmul@f2,w,c
  6483  002A6A  262E               	addwf	___ftmul@f3_as_product,f,c
  6484  002A6C  5028               	movf	___ftmul@f2+1,w,c
  6485  002A6E  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  6486  002A70  5029               	movf	___ftmul@f2+2,w,c
  6487  002A72  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  6488  002A74                     l4325:
  6489  002A74  90D8               	bcf	status,0,c
  6490  002A76  3226               	rrcf	___ftmul@f1+2,f,c
  6491  002A78  3225               	rrcf	___ftmul@f1+1,f,c
  6492  002A7A  3224               	rrcf	___ftmul@f1,f,c
  6493  002A7C  90D8               	bcf	status,0,c
  6494  002A7E  3627               	rlcf	___ftmul@f2,f,c
  6495  002A80  3628               	rlcf	___ftmul@f2+1,f,c
  6496  002A82  3629               	rlcf	___ftmul@f2+2,f,c
  6497  002A84  2E31               	decfsz	___ftmul@cntr,f,c
  6498  002A86  D7EE               	goto	l4321
  6499  002A88  0E09               	movlw	9
  6500  002A8A  6E31               	movwf	___ftmul@cntr,c
  6501  002A8C                     l4331:
  6502  002A8C  A024               	btfss	___ftmul@f1,0,c
  6503  002A8E  D006               	goto	l4335
  6504  002A90  5027               	movf	___ftmul@f2,w,c
  6505  002A92  262E               	addwf	___ftmul@f3_as_product,f,c
  6506  002A94  5028               	movf	___ftmul@f2+1,w,c
  6507  002A96  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  6508  002A98  5029               	movf	___ftmul@f2+2,w,c
  6509  002A9A  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  6510  002A9C                     l4335:
  6511  002A9C  90D8               	bcf	status,0,c
  6512  002A9E  3226               	rrcf	___ftmul@f1+2,f,c
  6513  002AA0  3225               	rrcf	___ftmul@f1+1,f,c
  6514  002AA2  3224               	rrcf	___ftmul@f1,f,c
  6515  002AA4  90D8               	bcf	status,0,c
  6516  002AA6  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  6517  002AA8  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  6518  002AAA  322E               	rrcf	___ftmul@f3_as_product,f,c
  6519  002AAC  2E31               	decfsz	___ftmul@cntr,f,c
  6520  002AAE  D7EE               	goto	l4331
  6521  002AB0  C02E  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  6522  002AB4  C02F  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6523  002AB8  C030  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6524  002ABC  C02D  F013         	movff	___ftmul@exp,___ftpack@exp
  6525  002AC0  C032  F014         	movff	___ftmul@sign,___ftpack@sign
  6526  002AC4  ECDE  F015         	call	___ftpack	;wreg free
  6527  002AC8  C010  F024         	movff	?___ftpack,?___ftmul
  6528  002ACC  C011  F025         	movff	?___ftpack+1,?___ftmul+1
  6529  002AD0  C012  F026         	movff	?___ftpack+2,?___ftmul+2
  6530  002AD4  0012               	return	
  6531  002AD6                     __end_of___ftmul:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           indf1	equ	0xFE7
  6543                           fsr1h	equ	0xFE2
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           postdec2	equ	0xFDD
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function ___awmod *****************
  6553 ;; Defined at:
  6554 ;;		line 8 in file "D:\mplab\sources\common\awmod.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  dividend        2   15[COMRAM] int 
  6557 ;;  divisor         2   17[COMRAM] int 
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;  sign            1   20[COMRAM] unsigned char 
  6560 ;;  counter         1   19[COMRAM] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  2   15[COMRAM] int 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6570 ;;      Params:         4       0       0       0       0       0       0       0       0
  6571 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6573 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6574 ;;Total ram usage:        6 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    1
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_fround
  6581 ;;		_scale
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text22
  6586  00319E                     __ptext22:
  6587                           	opt stack 0
  6588  00319E                     ___awmod:
  6589                           	opt stack 27
  6590                           
  6591                           ;incstack = 0
  6592  00319E  0E00               	movlw	0
  6593  0031A0  6E15               	movwf	___awmod@sign,c
  6594  0031A2  AE11               	btfss	___awmod@dividend+1,7,c
  6595  0031A4  D006               	goto	l2977
  6596  0031A6  6C10               	negf	___awmod@dividend,c
  6597  0031A8  1E11               	comf	___awmod@dividend+1,f,c
  6598  0031AA  B0D8               	btfsc	status,0,c
  6599  0031AC  2A11               	incf	___awmod@dividend+1,f,c
  6600  0031AE  0E01               	movlw	1
  6601  0031B0  6E15               	movwf	___awmod@sign,c
  6602  0031B2                     l2977:
  6603  0031B2  AE13               	btfss	___awmod@divisor+1,7,c
  6604  0031B4  D004               	goto	l2981
  6605  0031B6  6C12               	negf	___awmod@divisor,c
  6606  0031B8  1E13               	comf	___awmod@divisor+1,f,c
  6607  0031BA  B0D8               	btfsc	status,0,c
  6608  0031BC  2A13               	incf	___awmod@divisor+1,f,c
  6609  0031BE                     l2981:
  6610  0031BE  5012               	movf	___awmod@divisor,w,c
  6611  0031C0  1013               	iorwf	___awmod@divisor+1,w,c
  6612  0031C2  B4D8               	btfsc	status,2,c
  6613  0031C4  D018               	goto	l2997
  6614  0031C6  0E01               	movlw	1
  6615  0031C8  6E14               	movwf	___awmod@counter,c
  6616  0031CA  D004               	goto	l2987
  6617  0031CC                     l2985:
  6618  0031CC  90D8               	bcf	status,0,c
  6619  0031CE  3612               	rlcf	___awmod@divisor,f,c
  6620  0031D0  3613               	rlcf	___awmod@divisor+1,f,c
  6621  0031D2  2A14               	incf	___awmod@counter,f,c
  6622  0031D4                     l2987:
  6623  0031D4  AE13               	btfss	___awmod@divisor+1,7,c
  6624  0031D6  D7FA               	goto	l2985
  6625  0031D8                     l2989:
  6626  0031D8  5012               	movf	___awmod@divisor,w,c
  6627  0031DA  5C10               	subwf	___awmod@dividend,w,c
  6628  0031DC  5013               	movf	___awmod@divisor+1,w,c
  6629  0031DE  5811               	subwfb	___awmod@dividend+1,w,c
  6630  0031E0  A0D8               	btfss	status,0,c
  6631  0031E2  D004               	goto	l2993
  6632  0031E4  5012               	movf	___awmod@divisor,w,c
  6633  0031E6  5E10               	subwf	___awmod@dividend,f,c
  6634  0031E8  5013               	movf	___awmod@divisor+1,w,c
  6635  0031EA  5A11               	subwfb	___awmod@dividend+1,f,c
  6636  0031EC                     l2993:
  6637  0031EC  90D8               	bcf	status,0,c
  6638  0031EE  3213               	rrcf	___awmod@divisor+1,f,c
  6639  0031F0  3212               	rrcf	___awmod@divisor,f,c
  6640  0031F2  2E14               	decfsz	___awmod@counter,f,c
  6641  0031F4  D7F1               	goto	l2989
  6642  0031F6                     l2997:
  6643  0031F6  5015               	movf	___awmod@sign,w,c
  6644  0031F8  B4D8               	btfsc	status,2,c
  6645  0031FA  D004               	goto	l3001
  6646  0031FC  6C10               	negf	___awmod@dividend,c
  6647  0031FE  1E11               	comf	___awmod@dividend+1,f,c
  6648  003200  B0D8               	btfsc	status,0,c
  6649  003202  2A11               	incf	___awmod@dividend+1,f,c
  6650  003204                     l3001:
  6651  003204  C010  F010         	movff	___awmod@dividend,?___awmod
  6652  003208  C011  F011         	movff	___awmod@dividend+1,?___awmod+1
  6653  00320C  0012               	return	
  6654  00320E                     __end_of___awmod:
  6655                           	opt stack 0
  6656                           tblptru	equ	0xFF8
  6657                           tblptrh	equ	0xFF7
  6658                           tblptrl	equ	0xFF6
  6659                           tablat	equ	0xFF5
  6660                           prodh	equ	0xFF4
  6661                           prodl	equ	0xFF3
  6662                           intcon	equ	0xFF2
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           indf1	equ	0xFE7
  6666                           fsr1h	equ	0xFE2
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function ___awdiv *****************
  6676 ;; Defined at:
  6677 ;;		line 8 in file "D:\mplab\sources\common\awdiv.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  dividend        2   21[COMRAM] int 
  6680 ;;  divisor         2   23[COMRAM] int 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  quotient        2   27[COMRAM] int 
  6683 ;;  sign            1   26[COMRAM] unsigned char 
  6684 ;;  counter         1   25[COMRAM] unsigned char 
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  2   21[COMRAM] int 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2, status,0
  6689 ;; Tracked objects:
  6690 ;;		On entry : 0/0
  6691 ;;		On exit  : 0/0
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6694 ;;      Params:         4       0       0       0       0       0       0       0       0
  6695 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6697 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6698 ;;Total ram usage:        8 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    1
  6701 ;; This function calls:
  6702 ;;		Nothing
  6703 ;; This function is called by:
  6704 ;;		_fround
  6705 ;;		_scale
  6706 ;;		_sprintf
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	text23
  6711  002EBA                     __ptext23:
  6712                           	opt stack 0
  6713  002EBA                     ___awdiv:
  6714                           	opt stack 27
  6715                           
  6716                           ;incstack = 0
  6717  002EBA  0E00               	movlw	0
  6718  002EBC  6E1B               	movwf	___awdiv@sign,c
  6719  002EBE  AE19               	btfss	___awdiv@divisor+1,7,c
  6720  002EC0  D006               	goto	l2933
  6721  002EC2  6C18               	negf	___awdiv@divisor,c
  6722  002EC4  1E19               	comf	___awdiv@divisor+1,f,c
  6723  002EC6  B0D8               	btfsc	status,0,c
  6724  002EC8  2A19               	incf	___awdiv@divisor+1,f,c
  6725  002ECA  0E01               	movlw	1
  6726  002ECC  6E1B               	movwf	___awdiv@sign,c
  6727  002ECE                     l2933:
  6728  002ECE  AE17               	btfss	___awdiv@dividend+1,7,c
  6729  002ED0  D006               	goto	l2939
  6730  002ED2  6C16               	negf	___awdiv@dividend,c
  6731  002ED4  1E17               	comf	___awdiv@dividend+1,f,c
  6732  002ED6  B0D8               	btfsc	status,0,c
  6733  002ED8  2A17               	incf	___awdiv@dividend+1,f,c
  6734  002EDA  0E01               	movlw	1
  6735  002EDC  1A1B               	xorwf	___awdiv@sign,f,c
  6736  002EDE                     l2939:
  6737  002EDE  0E00               	movlw	0
  6738  002EE0  6E1D               	movwf	___awdiv@quotient+1,c
  6739  002EE2  0E00               	movlw	0
  6740  002EE4  6E1C               	movwf	___awdiv@quotient,c
  6741  002EE6  5018               	movf	___awdiv@divisor,w,c
  6742  002EE8  1019               	iorwf	___awdiv@divisor+1,w,c
  6743  002EEA  B4D8               	btfsc	status,2,c
  6744  002EEC  D01C               	goto	l2961
  6745  002EEE  0E01               	movlw	1
  6746  002EF0  6E1A               	movwf	___awdiv@counter,c
  6747  002EF2  D004               	goto	l2947
  6748  002EF4                     l2945:
  6749  002EF4  90D8               	bcf	status,0,c
  6750  002EF6  3618               	rlcf	___awdiv@divisor,f,c
  6751  002EF8  3619               	rlcf	___awdiv@divisor+1,f,c
  6752  002EFA  2A1A               	incf	___awdiv@counter,f,c
  6753  002EFC                     l2947:
  6754  002EFC  AE19               	btfss	___awdiv@divisor+1,7,c
  6755  002EFE  D7FA               	goto	l2945
  6756  002F00                     l2949:
  6757  002F00  90D8               	bcf	status,0,c
  6758  002F02  361C               	rlcf	___awdiv@quotient,f,c
  6759  002F04  361D               	rlcf	___awdiv@quotient+1,f,c
  6760  002F06  5018               	movf	___awdiv@divisor,w,c
  6761  002F08  5C16               	subwf	___awdiv@dividend,w,c
  6762  002F0A  5019               	movf	___awdiv@divisor+1,w,c
  6763  002F0C  5817               	subwfb	___awdiv@dividend+1,w,c
  6764  002F0E  A0D8               	btfss	status,0,c
  6765  002F10  D005               	goto	l2957
  6766  002F12  5018               	movf	___awdiv@divisor,w,c
  6767  002F14  5E16               	subwf	___awdiv@dividend,f,c
  6768  002F16  5019               	movf	___awdiv@divisor+1,w,c
  6769  002F18  5A17               	subwfb	___awdiv@dividend+1,f,c
  6770  002F1A  801C               	bsf	___awdiv@quotient,0,c
  6771  002F1C                     l2957:
  6772  002F1C  90D8               	bcf	status,0,c
  6773  002F1E  3219               	rrcf	___awdiv@divisor+1,f,c
  6774  002F20  3218               	rrcf	___awdiv@divisor,f,c
  6775  002F22  2E1A               	decfsz	___awdiv@counter,f,c
  6776  002F24  D7ED               	goto	l2949
  6777  002F26                     l2961:
  6778  002F26  501B               	movf	___awdiv@sign,w,c
  6779  002F28  B4D8               	btfsc	status,2,c
  6780  002F2A  D004               	goto	l2965
  6781  002F2C  6C1C               	negf	___awdiv@quotient,c
  6782  002F2E  1E1D               	comf	___awdiv@quotient+1,f,c
  6783  002F30  B0D8               	btfsc	status,0,c
  6784  002F32  2A1D               	incf	___awdiv@quotient+1,f,c
  6785  002F34                     l2965:
  6786  002F34  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  6787  002F38  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6788  002F3C  0012               	return	
  6789  002F3E                     __end_of___awdiv:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           indf1	equ	0xFE7
  6801                           fsr1h	equ	0xFE2
  6802                           fsr1l	equ	0xFE1
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function __tdiv_to_l_ *****************
  6811 ;; Defined at:
  6812 ;;		line 60 in file "D:\mplab\sources\common\ftdivl.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;  f1              3   15[COMRAM] float 
  6815 ;;  f2              3   18[COMRAM] float 
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;  quot            4   24[COMRAM] unsigned long 
  6818 ;;  exp1            1   29[COMRAM] unsigned char 
  6819 ;;  cntr            1   28[COMRAM] unsigned char 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  4   15[COMRAM] unsigned long 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6829 ;;      Params:         6       0       0       0       0       0       0       0       0
  6830 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6831 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6832 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6833 ;;Total ram usage:       15 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; Hardware stack levels required when called:    1
  6836 ;; This function calls:
  6837 ;;		Nothing
  6838 ;; This function is called by:
  6839 ;;		_sprintf
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text24
  6844  002462                     __ptext24:
  6845                           	opt stack 0
  6846  002462                     __tdiv_to_l_:
  6847                           	opt stack 28
  6848                           
  6849                           ;incstack = 0
  6850  002462  C012  F016         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6851  002466  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6852  002468  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6853  00246A  3411               	rlcf	__tdiv_to_l_@f1+1,w,c
  6854  00246C  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6855  00246E  E301               	bnc	u3041
  6856  002470  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6857  002472                     u3041:
  6858  002472  5016               	movf	??__tdiv_to_l_,w,c
  6859  002474  6E1E               	movwf	__tdiv_to_l_@exp1,c
  6860  002476  501E               	movf	__tdiv_to_l_@exp1,w,c
  6861  002478  A4D8               	btfss	status,2,c
  6862  00247A  D009               	goto	l3107
  6863  00247C  0E00               	movlw	0
  6864  00247E  6E10               	movwf	?__tdiv_to_l_,c
  6865  002480  0E00               	movlw	0
  6866  002482  6E11               	movwf	?__tdiv_to_l_+1,c
  6867  002484  0E00               	movlw	0
  6868  002486  6E12               	movwf	?__tdiv_to_l_+2,c
  6869  002488  0E00               	movlw	0
  6870  00248A  6E13               	movwf	?__tdiv_to_l_+3,c
  6871  00248C  0012               	return	
  6872  00248E                     l3107:
  6873  00248E  C015  F016         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6874  002492  6A17               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6875  002494  6A18               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6876  002496  3414               	rlcf	__tdiv_to_l_@f2+1,w,c
  6877  002498  3616               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6878  00249A  E301               	bnc	u3061
  6879  00249C  8017               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6880  00249E                     u3061:
  6881  00249E  5016               	movf	??__tdiv_to_l_,w,c
  6882  0024A0  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6883  0024A2  501D               	movf	__tdiv_to_l_@cntr,w,c
  6884  0024A4  A4D8               	btfss	status,2,c
  6885  0024A6  D009               	goto	l3113
  6886  0024A8  0E00               	movlw	0
  6887  0024AA  6E10               	movwf	?__tdiv_to_l_,c
  6888  0024AC  0E00               	movlw	0
  6889  0024AE  6E11               	movwf	?__tdiv_to_l_+1,c
  6890  0024B0  0E00               	movlw	0
  6891  0024B2  6E12               	movwf	?__tdiv_to_l_+2,c
  6892  0024B4  0E00               	movlw	0
  6893  0024B6  6E13               	movwf	?__tdiv_to_l_+3,c
  6894  0024B8  0012               	return	
  6895  0024BA                     l3113:
  6896  0024BA  8E11               	bsf	__tdiv_to_l_@f1+1,7,c
  6897  0024BC  0EFF               	movlw	255
  6898  0024BE  1610               	andwf	__tdiv_to_l_@f1,f,c
  6899  0024C0  0EFF               	movlw	255
  6900  0024C2  1611               	andwf	__tdiv_to_l_@f1+1,f,c
  6901  0024C4  0E00               	movlw	0
  6902  0024C6  1612               	andwf	__tdiv_to_l_@f1+2,f,c
  6903  0024C8  8E14               	bsf	__tdiv_to_l_@f2+1,7,c
  6904  0024CA  0EFF               	movlw	255
  6905  0024CC  1613               	andwf	__tdiv_to_l_@f2,f,c
  6906  0024CE  0EFF               	movlw	255
  6907  0024D0  1614               	andwf	__tdiv_to_l_@f2+1,f,c
  6908  0024D2  0E00               	movlw	0
  6909  0024D4  1615               	andwf	__tdiv_to_l_@f2+2,f,c
  6910  0024D6  0E00               	movlw	0
  6911  0024D8  6E19               	movwf	__tdiv_to_l_@quot,c
  6912  0024DA  0E00               	movlw	0
  6913  0024DC  6E1A               	movwf	__tdiv_to_l_@quot+1,c
  6914  0024DE  0E00               	movlw	0
  6915  0024E0  6E1B               	movwf	__tdiv_to_l_@quot+2,c
  6916  0024E2  0E00               	movlw	0
  6917  0024E4  6E1C               	movwf	__tdiv_to_l_@quot+3,c
  6918  0024E6  0E7F               	movlw	127
  6919  0024E8  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6920  0024EA  501D               	movf	__tdiv_to_l_@cntr,w,c
  6921  0024EC  0F98               	addlw	152
  6922  0024EE  5E1E               	subwf	__tdiv_to_l_@exp1,f,c
  6923  0024F0  0E18               	movlw	24
  6924  0024F2  6E1D               	movwf	__tdiv_to_l_@cntr,c
  6925  0024F4                     l755:
  6926  0024F4  90D8               	bcf	status,0,c
  6927  0024F6  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6928  0024F8  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6929  0024FA  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6930  0024FC  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6931  0024FE  5013               	movf	__tdiv_to_l_@f2,w,c
  6932  002500  5C10               	subwf	__tdiv_to_l_@f1,w,c
  6933  002502  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6934  002504  5811               	subwfb	__tdiv_to_l_@f1+1,w,c
  6935  002506  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6936  002508  5812               	subwfb	__tdiv_to_l_@f1+2,w,c
  6937  00250A  A0D8               	btfss	status,0,c
  6938  00250C  D007               	goto	l756
  6939  00250E  5013               	movf	__tdiv_to_l_@f2,w,c
  6940  002510  5E10               	subwf	__tdiv_to_l_@f1,f,c
  6941  002512  5014               	movf	__tdiv_to_l_@f2+1,w,c
  6942  002514  5A11               	subwfb	__tdiv_to_l_@f1+1,f,c
  6943  002516  5015               	movf	__tdiv_to_l_@f2+2,w,c
  6944  002518  5A12               	subwfb	__tdiv_to_l_@f1+2,f,c
  6945  00251A  8019               	bsf	__tdiv_to_l_@quot,0,c
  6946  00251C                     l756:
  6947  00251C  90D8               	bcf	status,0,c
  6948  00251E  3610               	rlcf	__tdiv_to_l_@f1,f,c
  6949  002520  3611               	rlcf	__tdiv_to_l_@f1+1,f,c
  6950  002522  3612               	rlcf	__tdiv_to_l_@f1+2,f,c
  6951  002524  2E1D               	decfsz	__tdiv_to_l_@cntr,f,c
  6952  002526  D7E6               	goto	l755
  6953  002528  AE1E               	btfss	__tdiv_to_l_@exp1,7,c
  6954  00252A  D016               	goto	l3147
  6955  00252C  501E               	movf	__tdiv_to_l_@exp1,w,c
  6956  00252E  0A80               	xorlw	128
  6957  002530  0F97               	addlw	151
  6958  002532  B0D8               	btfsc	status,0,c
  6959  002534  D009               	goto	l3143
  6960  002536  0E00               	movlw	0
  6961  002538  6E10               	movwf	?__tdiv_to_l_,c
  6962  00253A  0E00               	movlw	0
  6963  00253C  6E11               	movwf	?__tdiv_to_l_+1,c
  6964  00253E  0E00               	movlw	0
  6965  002540  6E12               	movwf	?__tdiv_to_l_+2,c
  6966  002542  0E00               	movlw	0
  6967  002544  6E13               	movwf	?__tdiv_to_l_+3,c
  6968  002546  0012               	return	
  6969  002548                     l3143:
  6970  002548  90D8               	bcf	status,0,c
  6971  00254A  321C               	rrcf	__tdiv_to_l_@quot+3,f,c
  6972  00254C  321B               	rrcf	__tdiv_to_l_@quot+2,f,c
  6973  00254E  321A               	rrcf	__tdiv_to_l_@quot+1,f,c
  6974  002550  3219               	rrcf	__tdiv_to_l_@quot,f,c
  6975  002552  3E1E               	incfsz	__tdiv_to_l_@exp1,f,c
  6976  002554  D7F9               	goto	l3143
  6977  002556  D015               	goto	l762
  6978  002558                     l3147:
  6979  002558  0E17               	movlw	23
  6980  00255A  641E               	cpfsgt	__tdiv_to_l_@exp1,c
  6981  00255C  D00F               	goto	l3155
  6982  00255E  0E00               	movlw	0
  6983  002560  6E10               	movwf	?__tdiv_to_l_,c
  6984  002562  0E00               	movlw	0
  6985  002564  6E11               	movwf	?__tdiv_to_l_+1,c
  6986  002566  0E00               	movlw	0
  6987  002568  6E12               	movwf	?__tdiv_to_l_+2,c
  6988  00256A  0E00               	movlw	0
  6989  00256C  6E13               	movwf	?__tdiv_to_l_+3,c
  6990  00256E  0012               	return	
  6991  002570                     l3153:
  6992  002570  90D8               	bcf	status,0,c
  6993  002572  3619               	rlcf	__tdiv_to_l_@quot,f,c
  6994  002574  361A               	rlcf	__tdiv_to_l_@quot+1,f,c
  6995  002576  361B               	rlcf	__tdiv_to_l_@quot+2,f,c
  6996  002578  361C               	rlcf	__tdiv_to_l_@quot+3,f,c
  6997  00257A  061E               	decf	__tdiv_to_l_@exp1,f,c
  6998  00257C                     l3155:
  6999  00257C  501E               	movf	__tdiv_to_l_@exp1,w,c
  7000  00257E  A4D8               	btfss	status,2,c
  7001  002580  D7F7               	goto	l3153
  7002  002582                     l762:
  7003  002582  C019  F010         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7004  002586  C01A  F011         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7005  00258A  C01B  F012         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7006  00258E  C01C  F013         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7007  002592  0012               	return		;funcret
  7008  002594                     __end_of__tdiv_to_l_:
  7009                           	opt stack 0
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           intcon	equ	0xFF2
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           indf1	equ	0xFE7
  7020                           fsr1h	equ	0xFE2
  7021                           fsr1l	equ	0xFE1
  7022                           indf2	equ	0xFDF
  7023                           postinc2	equ	0xFDE
  7024                           postdec2	equ	0xFDD
  7025                           fsr2h	equ	0xFDA
  7026                           fsr2l	equ	0xFD9
  7027                           status	equ	0xFD8
  7028                           
  7029 ;; *************** function __div_to_l_ *****************
  7030 ;; Defined at:
  7031 ;;		line 60 in file "D:\mplab\sources\common\fldivl.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;  f1              3   15[COMRAM] unsigned long 
  7034 ;;  f2              3   18[COMRAM] unsigned long 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  quot            4   21[COMRAM] unsigned long 
  7037 ;;  exp1            1   26[COMRAM] unsigned char 
  7038 ;;  cntr            1   25[COMRAM] unsigned char 
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  4   15[COMRAM] unsigned long 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7048 ;;      Params:         6       0       0       0       0       0       0       0       0
  7049 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7050 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7051 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7052 ;;Total ram usage:       12 bytes
  7053 ;; Hardware stack levels used:    1
  7054 ;; Hardware stack levels required when called:    1
  7055 ;; This function calls:
  7056 ;;		Nothing
  7057 ;; This function is called by:
  7058 ;;		_sprintf
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061                           
  7062                           	psect	text25
  7063  002594                     __ptext25:
  7064                           	opt stack 0
  7065  002594                     __div_to_l_:
  7066                           	opt stack 28
  7067                           
  7068                           ;incstack = 0
  7069  002594  3412               	rlcf	__div_to_l_@f1+2,w,c
  7070  002596  3413               	rlcf	__div_to_l_@f1+3,w,c
  7071  002598  6E1B               	movwf	__div_to_l_@exp1,c
  7072  00259A  501B               	movf	__div_to_l_@exp1,w,c
  7073  00259C  A4D8               	btfss	status,2,c
  7074  00259E  D009               	goto	l3163
  7075  0025A0  0E00               	movlw	0
  7076  0025A2  6E10               	movwf	?__div_to_l_,c
  7077  0025A4  0E00               	movlw	0
  7078  0025A6  6E11               	movwf	?__div_to_l_+1,c
  7079  0025A8  0E00               	movlw	0
  7080  0025AA  6E12               	movwf	?__div_to_l_+2,c
  7081  0025AC  0E00               	movlw	0
  7082  0025AE  6E13               	movwf	?__div_to_l_+3,c
  7083  0025B0  0012               	return	
  7084  0025B2                     l3163:
  7085  0025B2  3415               	rlcf	__div_to_l_@f2+2,w,c
  7086  0025B4  3416               	rlcf	__div_to_l_@f2+3,w,c
  7087  0025B6  6E1A               	movwf	__div_to_l_@cntr,c
  7088  0025B8  501A               	movf	__div_to_l_@cntr,w,c
  7089  0025BA  A4D8               	btfss	status,2,c
  7090  0025BC  D009               	goto	l3169
  7091  0025BE  0E00               	movlw	0
  7092  0025C0  6E10               	movwf	?__div_to_l_,c
  7093  0025C2  0E00               	movlw	0
  7094  0025C4  6E11               	movwf	?__div_to_l_+1,c
  7095  0025C6  0E00               	movlw	0
  7096  0025C8  6E12               	movwf	?__div_to_l_+2,c
  7097  0025CA  0E00               	movlw	0
  7098  0025CC  6E13               	movwf	?__div_to_l_+3,c
  7099  0025CE  0012               	return	
  7100  0025D0                     l3169:
  7101  0025D0  8E12               	bsf	__div_to_l_@f1+2,7,c
  7102  0025D2  0EFF               	movlw	255
  7103  0025D4  1610               	andwf	__div_to_l_@f1,f,c
  7104  0025D6  0EFF               	movlw	255
  7105  0025D8  1611               	andwf	__div_to_l_@f1+1,f,c
  7106  0025DA  0EFF               	movlw	255
  7107  0025DC  1612               	andwf	__div_to_l_@f1+2,f,c
  7108  0025DE  0E00               	movlw	0
  7109  0025E0  1613               	andwf	__div_to_l_@f1+3,f,c
  7110  0025E2  8E15               	bsf	__div_to_l_@f2+2,7,c
  7111  0025E4  0EFF               	movlw	255
  7112  0025E6  1613               	andwf	__div_to_l_@f2,f,c
  7113  0025E8  0EFF               	movlw	255
  7114  0025EA  1614               	andwf	__div_to_l_@f2+1,f,c
  7115  0025EC  0EFF               	movlw	255
  7116  0025EE  1615               	andwf	__div_to_l_@f2+2,f,c
  7117  0025F0  0E00               	movlw	0
  7118  0025F2  1616               	andwf	__div_to_l_@f2+3,f,c
  7119  0025F4  0E00               	movlw	0
  7120  0025F6  6E16               	movwf	__div_to_l_@quot,c
  7121  0025F8  0E00               	movlw	0
  7122  0025FA  6E17               	movwf	__div_to_l_@quot+1,c
  7123  0025FC  0E00               	movlw	0
  7124  0025FE  6E18               	movwf	__div_to_l_@quot+2,c
  7125  002600  0E00               	movlw	0
  7126  002602  6E19               	movwf	__div_to_l_@quot+3,c
  7127  002604  0E7F               	movlw	127
  7128  002606  5E1B               	subwf	__div_to_l_@exp1,f,c
  7129  002608  501A               	movf	__div_to_l_@cntr,w,c
  7130  00260A  0FA0               	addlw	160
  7131  00260C  5E1B               	subwf	__div_to_l_@exp1,f,c
  7132  00260E  0E20               	movlw	32
  7133  002610  6E1A               	movwf	__div_to_l_@cntr,c
  7134  002612                     l3183:
  7135  002612  90D8               	bcf	status,0,c
  7136  002614  3616               	rlcf	__div_to_l_@quot,f,c
  7137  002616  3617               	rlcf	__div_to_l_@quot+1,f,c
  7138  002618  3618               	rlcf	__div_to_l_@quot+2,f,c
  7139  00261A  3619               	rlcf	__div_to_l_@quot+3,f,c
  7140  00261C  5013               	movf	__div_to_l_@f2,w,c
  7141  00261E  5C10               	subwf	__div_to_l_@f1,w,c
  7142  002620  5014               	movf	__div_to_l_@f2+1,w,c
  7143  002622  5811               	subwfb	__div_to_l_@f1+1,w,c
  7144  002624  5015               	movf	__div_to_l_@f2+2,w,c
  7145  002626  5812               	subwfb	__div_to_l_@f1+2,w,c
  7146  002628  5016               	movf	__div_to_l_@f2+3,w,c
  7147  00262A  5813               	subwfb	__div_to_l_@f1+3,w,c
  7148  00262C  A0D8               	btfss	status,0,c
  7149  00262E  D009               	goto	l3191
  7150  002630  5013               	movf	__div_to_l_@f2,w,c
  7151  002632  5E10               	subwf	__div_to_l_@f1,f,c
  7152  002634  5014               	movf	__div_to_l_@f2+1,w,c
  7153  002636  5A11               	subwfb	__div_to_l_@f1+1,f,c
  7154  002638  5015               	movf	__div_to_l_@f2+2,w,c
  7155  00263A  5A12               	subwfb	__div_to_l_@f1+2,f,c
  7156  00263C  5016               	movf	__div_to_l_@f2+3,w,c
  7157  00263E  5A13               	subwfb	__div_to_l_@f1+3,f,c
  7158  002640  8016               	bsf	__div_to_l_@quot,0,c
  7159  002642                     l3191:
  7160  002642  90D8               	bcf	status,0,c
  7161  002644  3610               	rlcf	__div_to_l_@f1,f,c
  7162  002646  3611               	rlcf	__div_to_l_@f1+1,f,c
  7163  002648  3612               	rlcf	__div_to_l_@f1+2,f,c
  7164  00264A  3613               	rlcf	__div_to_l_@f1+3,f,c
  7165  00264C  2E1A               	decfsz	__div_to_l_@cntr,f,c
  7166  00264E  D7E1               	goto	l3183
  7167  002650  AE1B               	btfss	__div_to_l_@exp1,7,c
  7168  002652  D016               	goto	l3207
  7169  002654  501B               	movf	__div_to_l_@exp1,w,c
  7170  002656  0A80               	xorlw	128
  7171  002658  0F9F               	addlw	159
  7172  00265A  B0D8               	btfsc	status,0,c
  7173  00265C  D009               	goto	l3203
  7174  00265E  0E00               	movlw	0
  7175  002660  6E10               	movwf	?__div_to_l_,c
  7176  002662  0E00               	movlw	0
  7177  002664  6E11               	movwf	?__div_to_l_+1,c
  7178  002666  0E00               	movlw	0
  7179  002668  6E12               	movwf	?__div_to_l_+2,c
  7180  00266A  0E00               	movlw	0
  7181  00266C  6E13               	movwf	?__div_to_l_+3,c
  7182  00266E  0012               	return	
  7183  002670                     l3203:
  7184  002670  90D8               	bcf	status,0,c
  7185  002672  3219               	rrcf	__div_to_l_@quot+3,f,c
  7186  002674  3218               	rrcf	__div_to_l_@quot+2,f,c
  7187  002676  3217               	rrcf	__div_to_l_@quot+1,f,c
  7188  002678  3216               	rrcf	__div_to_l_@quot,f,c
  7189  00267A  3E1B               	incfsz	__div_to_l_@exp1,f,c
  7190  00267C  D7F9               	goto	l3203
  7191  00267E  D015               	goto	l658
  7192  002680                     l3207:
  7193  002680  0E1F               	movlw	31
  7194  002682  641B               	cpfsgt	__div_to_l_@exp1,c
  7195  002684  D00F               	goto	l3215
  7196  002686  0E00               	movlw	0
  7197  002688  6E10               	movwf	?__div_to_l_,c
  7198  00268A  0E00               	movlw	0
  7199  00268C  6E11               	movwf	?__div_to_l_+1,c
  7200  00268E  0E00               	movlw	0
  7201  002690  6E12               	movwf	?__div_to_l_+2,c
  7202  002692  0E00               	movlw	0
  7203  002694  6E13               	movwf	?__div_to_l_+3,c
  7204  002696  0012               	return	
  7205  002698                     l3213:
  7206  002698  90D8               	bcf	status,0,c
  7207  00269A  3616               	rlcf	__div_to_l_@quot,f,c
  7208  00269C  3617               	rlcf	__div_to_l_@quot+1,f,c
  7209  00269E  3618               	rlcf	__div_to_l_@quot+2,f,c
  7210  0026A0  3619               	rlcf	__div_to_l_@quot+3,f,c
  7211  0026A2  061B               	decf	__div_to_l_@exp1,f,c
  7212  0026A4                     l3215:
  7213  0026A4  501B               	movf	__div_to_l_@exp1,w,c
  7214  0026A6  A4D8               	btfss	status,2,c
  7215  0026A8  D7F7               	goto	l3213
  7216  0026AA                     l658:
  7217  0026AA  C016  F010         	movff	__div_to_l_@quot,?__div_to_l_
  7218  0026AE  C017  F011         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7219  0026B2  C018  F012         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7220  0026B6  C019  F013         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7221  0026BA  0012               	return		;funcret
  7222  0026BC                     __end_of__div_to_l_:
  7223                           	opt stack 0
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           intcon	equ	0xFF2
  7231                           postinc0	equ	0xFEE
  7232                           wreg	equ	0xFE8
  7233                           indf1	equ	0xFE7
  7234                           fsr1h	equ	0xFE2
  7235                           fsr1l	equ	0xFE1
  7236                           indf2	equ	0xFDF
  7237                           postinc2	equ	0xFDE
  7238                           postdec2	equ	0xFDD
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function ___lltoft *****************
  7244 ;; Defined at:
  7245 ;;		line 35 in file "D:\mplab\sources\common\lltoft.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  c               4   23[COMRAM] unsigned long 
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;  exp             1   31[COMRAM] unsigned char 
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  3   23[COMRAM] float 
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, status,0, cstack
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7259 ;;      Params:         4       0       0       0       0       0       0       0       0
  7260 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7261 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7262 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7263 ;;Total ram usage:        9 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    2
  7266 ;; This function calls:
  7267 ;;		___ftpack
  7268 ;; This function is called by:
  7269 ;;		_sprintf
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text26
  7274  003274                     __ptext26:
  7275                           	opt stack 0
  7276  003274                     ___lltoft:
  7277                           	opt stack 27
  7278                           
  7279                           ;incstack = 0
  7280  003274  0E8E               	movlw	142
  7281  003276  6E20               	movwf	___lltoft@exp,c
  7282  003278  D006               	goto	l4627
  7283  00327A                     l4625:
  7284  00327A  90D8               	bcf	status,0,c
  7285  00327C  321B               	rrcf	___lltoft@c+3,f,c
  7286  00327E  321A               	rrcf	___lltoft@c+2,f,c
  7287  003280  3219               	rrcf	___lltoft@c+1,f,c
  7288  003282  3218               	rrcf	___lltoft@c,f,c
  7289  003284  2A20               	incf	___lltoft@exp,f,c
  7290  003286                     l4627:
  7291  003286  0E00               	movlw	0
  7292  003288  1418               	andwf	___lltoft@c,w,c
  7293  00328A  6E1C               	movwf	??___lltoft& (0+255),c
  7294  00328C  0E00               	movlw	0
  7295  00328E  1419               	andwf	___lltoft@c+1,w,c
  7296  003290  6E1D               	movwf	(??___lltoft+1)& (0+255),c
  7297  003292  0E00               	movlw	0
  7298  003294  141A               	andwf	___lltoft@c+2,w,c
  7299  003296  6E1E               	movwf	(??___lltoft+2)& (0+255),c
  7300  003298  0EFF               	movlw	255
  7301  00329A  141B               	andwf	___lltoft@c+3,w,c
  7302  00329C  6E1F               	movwf	(??___lltoft+3)& (0+255),c
  7303  00329E  501C               	movf	??___lltoft,w,c
  7304  0032A0  101D               	iorwf	??___lltoft+1,w,c
  7305  0032A2  101E               	iorwf	??___lltoft+2,w,c
  7306  0032A4  101F               	iorwf	??___lltoft+3,w,c
  7307  0032A6  A4D8               	btfss	status,2,c
  7308  0032A8  D7E8               	goto	l4625
  7309  0032AA  C018  F010         	movff	___lltoft@c,___ftpack@arg
  7310  0032AE  C019  F011         	movff	___lltoft@c+1,___ftpack@arg+1
  7311  0032B2  C01A  F012         	movff	___lltoft@c+2,___ftpack@arg+2
  7312  0032B6  C020  F013         	movff	___lltoft@exp,___ftpack@exp
  7313  0032BA  0E00               	movlw	0
  7314  0032BC  6E14               	movwf	___ftpack@sign,c
  7315  0032BE  ECDE  F015         	call	___ftpack	;wreg free
  7316  0032C2  C010  F018         	movff	?___ftpack,?___lltoft
  7317  0032C6  C011  F019         	movff	?___ftpack+1,?___lltoft+1
  7318  0032CA  C012  F01A         	movff	?___ftpack+2,?___lltoft+2
  7319  0032CE  0012               	return	
  7320  0032D0                     __end_of___lltoft:
  7321                           	opt stack 0
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           indf1	equ	0xFE7
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function ___llmod *****************
  7342 ;; Defined at:
  7343 ;;		line 8 in file "D:\mplab\sources\common\llmod.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  dividend        4   15[COMRAM] unsigned long 
  7346 ;;  divisor         4   19[COMRAM] unsigned long 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;  counter         1   23[COMRAM] unsigned char 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  4   15[COMRAM] unsigned long 
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7358 ;;      Params:         8       0       0       0       0       0       0       0       0
  7359 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7361 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7362 ;;Total ram usage:        9 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    1
  7365 ;; This function calls:
  7366 ;;		Nothing
  7367 ;; This function is called by:
  7368 ;;		_convert_time_to_UTC
  7369 ;;		_sprintf
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text27
  7374  00320E                     __ptext27:
  7375                           	opt stack 0
  7376  00320E                     ___llmod:
  7377                           	opt stack 28
  7378                           
  7379                           ;incstack = 0
  7380  00320E  5014               	movf	___llmod@divisor,w,c
  7381  003210  1015               	iorwf	___llmod@divisor+1,w,c
  7382  003212  1016               	iorwf	___llmod@divisor+2,w,c
  7383  003214  1017               	iorwf	___llmod@divisor+3,w,c
  7384  003216  B4D8               	btfsc	status,2,c
  7385  003218  D024               	goto	l852
  7386  00321A  0E01               	movlw	1
  7387  00321C  6E18               	movwf	___llmod@counter,c
  7388  00321E  D006               	goto	l3465
  7389  003220                     l3463:
  7390  003220  90D8               	bcf	status,0,c
  7391  003222  3614               	rlcf	___llmod@divisor,f,c
  7392  003224  3615               	rlcf	___llmod@divisor+1,f,c
  7393  003226  3616               	rlcf	___llmod@divisor+2,f,c
  7394  003228  3617               	rlcf	___llmod@divisor+3,f,c
  7395  00322A  2A18               	incf	___llmod@counter,f,c
  7396  00322C                     l3465:
  7397  00322C  AE17               	btfss	___llmod@divisor+3,7,c
  7398  00322E  D7F8               	goto	l3463
  7399  003230                     l3467:
  7400  003230  5014               	movf	___llmod@divisor,w,c
  7401  003232  5C10               	subwf	___llmod@dividend,w,c
  7402  003234  5015               	movf	___llmod@divisor+1,w,c
  7403  003236  5811               	subwfb	___llmod@dividend+1,w,c
  7404  003238  5016               	movf	___llmod@divisor+2,w,c
  7405  00323A  5812               	subwfb	___llmod@dividend+2,w,c
  7406  00323C  5017               	movf	___llmod@divisor+3,w,c
  7407  00323E  5813               	subwfb	___llmod@dividend+3,w,c
  7408  003240  A0D8               	btfss	status,0,c
  7409  003242  D008               	goto	l3471
  7410  003244  5014               	movf	___llmod@divisor,w,c
  7411  003246  5E10               	subwf	___llmod@dividend,f,c
  7412  003248  5015               	movf	___llmod@divisor+1,w,c
  7413  00324A  5A11               	subwfb	___llmod@dividend+1,f,c
  7414  00324C  5016               	movf	___llmod@divisor+2,w,c
  7415  00324E  5A12               	subwfb	___llmod@dividend+2,f,c
  7416  003250  5017               	movf	___llmod@divisor+3,w,c
  7417  003252  5A13               	subwfb	___llmod@dividend+3,f,c
  7418  003254                     l3471:
  7419  003254  90D8               	bcf	status,0,c
  7420  003256  3217               	rrcf	___llmod@divisor+3,f,c
  7421  003258  3216               	rrcf	___llmod@divisor+2,f,c
  7422  00325A  3215               	rrcf	___llmod@divisor+1,f,c
  7423  00325C  3214               	rrcf	___llmod@divisor,f,c
  7424  00325E  2E18               	decfsz	___llmod@counter,f,c
  7425  003260  D7E7               	goto	l3467
  7426  003262                     l852:
  7427  003262  C010  F010         	movff	___llmod@dividend,?___llmod
  7428  003266  C011  F011         	movff	___llmod@dividend+1,?___llmod+1
  7429  00326A  C012  F012         	movff	___llmod@dividend+2,?___llmod+2
  7430  00326E  C013  F013         	movff	___llmod@dividend+3,?___llmod+3
  7431  003272  0012               	return		;funcret
  7432  003274                     __end_of___llmod:
  7433                           	opt stack 0
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           postinc0	equ	0xFEE
  7442                           wreg	equ	0xFE8
  7443                           indf1	equ	0xFE7
  7444                           fsr1h	equ	0xFE2
  7445                           fsr1l	equ	0xFE1
  7446                           indf2	equ	0xFDF
  7447                           postinc2	equ	0xFDE
  7448                           postdec2	equ	0xFDD
  7449                           fsr2h	equ	0xFDA
  7450                           fsr2l	equ	0xFD9
  7451                           status	equ	0xFD8
  7452                           
  7453 ;; *************** function ___lldiv *****************
  7454 ;; Defined at:
  7455 ;;		line 8 in file "D:\mplab\sources\common\lldiv.c"
  7456 ;; Parameters:    Size  Location     Type
  7457 ;;  dividend        4   24[COMRAM] unsigned long 
  7458 ;;  divisor         4   28[COMRAM] unsigned long 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  quotient        4   32[COMRAM] unsigned long 
  7461 ;;  counter         1   36[COMRAM] unsigned char 
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  4   24[COMRAM] unsigned long 
  7464 ;; Registers used:
  7465 ;;		wreg, status,2, status,0
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7471 ;;      Params:         8       0       0       0       0       0       0       0       0
  7472 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7474 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7475 ;;Total ram usage:       13 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    1
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_convert_time_to_UTC
  7482 ;;		_sprintf
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text28
  7487  002F3E                     __ptext28:
  7488                           	opt stack 0
  7489  002F3E                     ___lldiv:
  7490                           	opt stack 28
  7491                           
  7492                           ;incstack = 0
  7493  002F3E  0E00               	movlw	0
  7494  002F40  6E21               	movwf	___lldiv@quotient,c
  7495  002F42  0E00               	movlw	0
  7496  002F44  6E22               	movwf	___lldiv@quotient+1,c
  7497  002F46  0E00               	movlw	0
  7498  002F48  6E23               	movwf	___lldiv@quotient+2,c
  7499  002F4A  0E00               	movlw	0
  7500  002F4C  6E24               	movwf	___lldiv@quotient+3,c
  7501  002F4E  501D               	movf	___lldiv@divisor,w,c
  7502  002F50  101E               	iorwf	___lldiv@divisor+1,w,c
  7503  002F52  101F               	iorwf	___lldiv@divisor+2,w,c
  7504  002F54  1020               	iorwf	___lldiv@divisor+3,w,c
  7505  002F56  B4D8               	btfsc	status,2,c
  7506  002F58  D02A               	goto	l842
  7507  002F5A  0E01               	movlw	1
  7508  002F5C  6E25               	movwf	___lldiv@counter,c
  7509  002F5E  D006               	goto	l3445
  7510  002F60                     l3443:
  7511  002F60  90D8               	bcf	status,0,c
  7512  002F62  361D               	rlcf	___lldiv@divisor,f,c
  7513  002F64  361E               	rlcf	___lldiv@divisor+1,f,c
  7514  002F66  361F               	rlcf	___lldiv@divisor+2,f,c
  7515  002F68  3620               	rlcf	___lldiv@divisor+3,f,c
  7516  002F6A  2A25               	incf	___lldiv@counter,f,c
  7517  002F6C                     l3445:
  7518  002F6C  AE20               	btfss	___lldiv@divisor+3,7,c
  7519  002F6E  D7F8               	goto	l3443
  7520  002F70                     l3447:
  7521  002F70  90D8               	bcf	status,0,c
  7522  002F72  3621               	rlcf	___lldiv@quotient,f,c
  7523  002F74  3622               	rlcf	___lldiv@quotient+1,f,c
  7524  002F76  3623               	rlcf	___lldiv@quotient+2,f,c
  7525  002F78  3624               	rlcf	___lldiv@quotient+3,f,c
  7526  002F7A  501D               	movf	___lldiv@divisor,w,c
  7527  002F7C  5C19               	subwf	___lldiv@dividend,w,c
  7528  002F7E  501E               	movf	___lldiv@divisor+1,w,c
  7529  002F80  581A               	subwfb	___lldiv@dividend+1,w,c
  7530  002F82  501F               	movf	___lldiv@divisor+2,w,c
  7531  002F84  581B               	subwfb	___lldiv@dividend+2,w,c
  7532  002F86  5020               	movf	___lldiv@divisor+3,w,c
  7533  002F88  581C               	subwfb	___lldiv@dividend+3,w,c
  7534  002F8A  A0D8               	btfss	status,0,c
  7535  002F8C  D009               	goto	l3455
  7536  002F8E  501D               	movf	___lldiv@divisor,w,c
  7537  002F90  5E19               	subwf	___lldiv@dividend,f,c
  7538  002F92  501E               	movf	___lldiv@divisor+1,w,c
  7539  002F94  5A1A               	subwfb	___lldiv@dividend+1,f,c
  7540  002F96  501F               	movf	___lldiv@divisor+2,w,c
  7541  002F98  5A1B               	subwfb	___lldiv@dividend+2,f,c
  7542  002F9A  5020               	movf	___lldiv@divisor+3,w,c
  7543  002F9C  5A1C               	subwfb	___lldiv@dividend+3,f,c
  7544  002F9E  8021               	bsf	___lldiv@quotient,0,c
  7545  002FA0                     l3455:
  7546  002FA0  90D8               	bcf	status,0,c
  7547  002FA2  3220               	rrcf	___lldiv@divisor+3,f,c
  7548  002FA4  321F               	rrcf	___lldiv@divisor+2,f,c
  7549  002FA6  321E               	rrcf	___lldiv@divisor+1,f,c
  7550  002FA8  321D               	rrcf	___lldiv@divisor,f,c
  7551  002FAA  2E25               	decfsz	___lldiv@counter,f,c
  7552  002FAC  D7E1               	goto	l3447
  7553  002FAE                     l842:
  7554  002FAE  C021  F019         	movff	___lldiv@quotient,?___lldiv
  7555  002FB2  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  7556  002FB6  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  7557  002FBA  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  7558  002FBE  0012               	return		;funcret
  7559  002FC0                     __end_of___lldiv:
  7560                           	opt stack 0
  7561                           tblptru	equ	0xFF8
  7562                           tblptrh	equ	0xFF7
  7563                           tblptrl	equ	0xFF6
  7564                           tablat	equ	0xFF5
  7565                           prodh	equ	0xFF4
  7566                           prodl	equ	0xFF3
  7567                           intcon	equ	0xFF2
  7568                           postinc0	equ	0xFEE
  7569                           wreg	equ	0xFE8
  7570                           indf1	equ	0xFE7
  7571                           fsr1h	equ	0xFE2
  7572                           fsr1l	equ	0xFE1
  7573                           indf2	equ	0xFDF
  7574                           postinc2	equ	0xFDE
  7575                           postdec2	equ	0xFDD
  7576                           fsr2h	equ	0xFDA
  7577                           fsr2l	equ	0xFD9
  7578                           status	equ	0xFD8
  7579                           
  7580 ;; *************** function ___ftsub *****************
  7581 ;; Defined at:
  7582 ;;		line 20 in file "D:\mplab\sources\common\ftsub.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;  f1              3    3[BANK0 ] float 
  7585 ;;  f2              3    6[BANK0 ] float 
  7586 ;; Auto vars:     Size  Location     Type
  7587 ;;		None
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  3    3[BANK0 ] float 
  7590 ;; Registers used:
  7591 ;;		wreg, status,2, status,0, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7597 ;;      Params:         0       6       0       0       0       0       0       0       0
  7598 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7600 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7601 ;;Total ram usage:        6 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    3
  7604 ;; This function calls:
  7605 ;;		___ftadd
  7606 ;; This function is called by:
  7607 ;;		_sprintf
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           	psect	text29
  7612  00342C                     __ptext29:
  7613                           	opt stack 0
  7614  00342C                     ___ftsub:
  7615                           	opt stack 26
  7616                           
  7617                           ;incstack = 0
  7618  00342C  0100               	movlb	0	; () banked
  7619  00342E  5166               	movf	___ftsub@f2& (0+255),w,b
  7620  003430  0100               	movlb	0	; () banked
  7621  003432  1167               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7622  003434  0100               	movlb	0	; () banked
  7623  003436  1168               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7624  003438  B4D8               	btfsc	status,2,c
  7625  00343A  D009               	goto	l4407
  7626                           
  7627                           ; BSR set to: 0
  7628  00343C  0E00               	movlw	0
  7629  00343E  0100               	movlb	0	; () banked
  7630  003440  1B66               	xorwf	___ftsub@f2& (0+255),f,b
  7631  003442  0E00               	movlw	0
  7632  003444  0100               	movlb	0	; () banked
  7633  003446  1B67               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7634  003448  0E80               	movlw	128
  7635  00344A  0100               	movlb	0	; () banked
  7636  00344C  1B68               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7637  00344E                     l4407:
  7638                           
  7639                           ; BSR set to: 0
  7640  00344E  C063  F03D         	movff	___ftsub@f1,___ftadd@f1
  7641  003452  C064  F03E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7642  003456  C065  F03F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7643  00345A  C066  F040         	movff	___ftsub@f2,___ftadd@f2
  7644  00345E  C067  F041         	movff	___ftsub@f2+1,___ftadd@f2+1
  7645  003462  C068  F042         	movff	___ftsub@f2+2,___ftadd@f2+2
  7646  003466  ECFA  F00F         	call	___ftadd	;wreg free
  7647  00346A  C03D  F063         	movff	?___ftadd,?___ftsub
  7648  00346E  C03E  F064         	movff	?___ftadd+1,?___ftsub+1
  7649  003472  C03F  F065         	movff	?___ftadd+2,?___ftsub+2
  7650  003476  0012               	return	
  7651  003478                     __end_of___ftsub:
  7652                           	opt stack 0
  7653                           tblptru	equ	0xFF8
  7654                           tblptrh	equ	0xFF7
  7655                           tblptrl	equ	0xFF6
  7656                           tablat	equ	0xFF5
  7657                           prodh	equ	0xFF4
  7658                           prodl	equ	0xFF3
  7659                           intcon	equ	0xFF2
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           indf1	equ	0xFE7
  7663                           fsr1h	equ	0xFE2
  7664                           fsr1l	equ	0xFE1
  7665                           indf2	equ	0xFDF
  7666                           postinc2	equ	0xFDE
  7667                           postdec2	equ	0xFDD
  7668                           fsr2h	equ	0xFDA
  7669                           fsr2l	equ	0xFD9
  7670                           status	equ	0xFD8
  7671                           
  7672 ;; *************** function ___ftneg *****************
  7673 ;; Defined at:
  7674 ;;		line 15 in file "D:\mplab\sources\common\ftneg.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  f1              3   50[COMRAM] float 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;		None
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  3   50[COMRAM] float 
  7681 ;; Registers used:
  7682 ;;		wreg, status,2, status,0
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7688 ;;      Params:         3       0       0       0       0       0       0       0       0
  7689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7691 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7692 ;;Total ram usage:        3 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    1
  7695 ;; This function calls:
  7696 ;;		Nothing
  7697 ;; This function is called by:
  7698 ;;		_convert_to_degrees
  7699 ;;		_sprintf
  7700 ;;		_strtod
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text30
  7705  0035FE                     __ptext30:
  7706                           	opt stack 0
  7707  0035FE                     ___ftneg:
  7708                           	opt stack 28
  7709                           
  7710                           ;incstack = 0
  7711  0035FE  5033               	movf	___ftneg@f1,w,c
  7712  003600  1034               	iorwf	___ftneg@f1+1,w,c
  7713  003602  1035               	iorwf	___ftneg@f1+2,w,c
  7714  003604  B4D8               	btfsc	status,2,c
  7715  003606  D006               	goto	l787
  7716  003608  0E00               	movlw	0
  7717  00360A  1A33               	xorwf	___ftneg@f1,f,c
  7718  00360C  0E00               	movlw	0
  7719  00360E  1A34               	xorwf	___ftneg@f1+1,f,c
  7720  003610  0E80               	movlw	128
  7721  003612  1A35               	xorwf	___ftneg@f1+2,f,c
  7722  003614                     l787:
  7723  003614  C033  F033         	movff	___ftneg@f1,?___ftneg
  7724  003618  C034  F034         	movff	___ftneg@f1+1,?___ftneg+1
  7725  00361C  C035  F035         	movff	___ftneg@f1+2,?___ftneg+2
  7726  003620  0012               	return		;funcret
  7727  003622                     __end_of___ftneg:
  7728                           	opt stack 0
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon	equ	0xFF2
  7736                           postinc0	equ	0xFEE
  7737                           wreg	equ	0xFE8
  7738                           indf1	equ	0xFE7
  7739                           fsr1h	equ	0xFE2
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           fsr2h	equ	0xFDA
  7745                           fsr2l	equ	0xFD9
  7746                           status	equ	0xFD8
  7747                           
  7748 ;; *************** function ___ftge *****************
  7749 ;; Defined at:
  7750 ;;		line 4 in file "D:\mplab\sources\common\ftge.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  ff1             3   15[COMRAM] float 
  7753 ;;  ff2             3   18[COMRAM] float 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;		None               void
  7758 ;; Registers used:
  7759 ;;		wreg, status,2, status,0
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7765 ;;      Params:         6       0       0       0       0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7767 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7768 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7769 ;;Total ram usage:        9 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    1
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_sprintf
  7776 ;;		_strtod
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           	psect	text31
  7781  002DA6                     __ptext31:
  7782                           	opt stack 0
  7783  002DA6                     ___ftge:
  7784                           	opt stack 28
  7785                           
  7786                           ;incstack = 0
  7787  002DA6  AE12               	btfss	___ftge@ff1+2,7,c
  7788  002DA8  D016               	goto	l3009
  7789  002DAA  C010  F016         	movff	___ftge@ff1,??___ftge
  7790  002DAE  C011  F017         	movff	___ftge@ff1+1,??___ftge+1
  7791  002DB2  C012  F018         	movff	___ftge@ff1+2,??___ftge+2
  7792  002DB6  1E16               	comf	??___ftge,f,c
  7793  002DB8  1E17               	comf	??___ftge+1,f,c
  7794  002DBA  1E18               	comf	??___ftge+2,f,c
  7795  002DBC  2A16               	incf	??___ftge,f,c
  7796  002DBE  0E00               	movlw	0
  7797  002DC0  2217               	addwfc	??___ftge+1,f,c
  7798  002DC2  2218               	addwfc	??___ftge+2,f,c
  7799  002DC4  0E00               	movlw	0
  7800  002DC6  2416               	addwf	??___ftge,w,c
  7801  002DC8  6E10               	movwf	___ftge@ff1,c
  7802  002DCA  0E00               	movlw	0
  7803  002DCC  2017               	addwfc	??___ftge+1,w,c
  7804  002DCE  6E11               	movwf	___ftge@ff1+1,c
  7805  002DD0  0E80               	movlw	128
  7806  002DD2  2018               	addwfc	??___ftge+2,w,c
  7807  002DD4  6E12               	movwf	___ftge@ff1+2,c
  7808  002DD6                     l3009:
  7809  002DD6  AE15               	btfss	___ftge@ff2+2,7,c
  7810  002DD8  D016               	goto	l3013
  7811  002DDA  C013  F016         	movff	___ftge@ff2,??___ftge
  7812  002DDE  C014  F017         	movff	___ftge@ff2+1,??___ftge+1
  7813  002DE2  C015  F018         	movff	___ftge@ff2+2,??___ftge+2
  7814  002DE6  1E16               	comf	??___ftge,f,c
  7815  002DE8  1E17               	comf	??___ftge+1,f,c
  7816  002DEA  1E18               	comf	??___ftge+2,f,c
  7817  002DEC  2A16               	incf	??___ftge,f,c
  7818  002DEE  0E00               	movlw	0
  7819  002DF0  2217               	addwfc	??___ftge+1,f,c
  7820  002DF2  2218               	addwfc	??___ftge+2,f,c
  7821  002DF4  0E00               	movlw	0
  7822  002DF6  2416               	addwf	??___ftge,w,c
  7823  002DF8  6E13               	movwf	___ftge@ff2,c
  7824  002DFA  0E00               	movlw	0
  7825  002DFC  2017               	addwfc	??___ftge+1,w,c
  7826  002DFE  6E14               	movwf	___ftge@ff2+1,c
  7827  002E00  0E80               	movlw	128
  7828  002E02  2018               	addwfc	??___ftge+2,w,c
  7829  002E04  6E15               	movwf	___ftge@ff2+2,c
  7830  002E06                     l3013:
  7831  002E06  0E00               	movlw	0
  7832  002E08  1A10               	xorwf	___ftge@ff1,f,c
  7833  002E0A  0E00               	movlw	0
  7834  002E0C  1A11               	xorwf	___ftge@ff1+1,f,c
  7835  002E0E  0E80               	movlw	128
  7836  002E10  1A12               	xorwf	___ftge@ff1+2,f,c
  7837  002E12  0E00               	movlw	0
  7838  002E14  1A13               	xorwf	___ftge@ff2,f,c
  7839  002E16  0E00               	movlw	0
  7840  002E18  1A14               	xorwf	___ftge@ff2+1,f,c
  7841  002E1A  0E80               	movlw	128
  7842  002E1C  1A15               	xorwf	___ftge@ff2+2,f,c
  7843  002E1E  5013               	movf	___ftge@ff2,w,c
  7844  002E20  5C10               	subwf	___ftge@ff1,w,c
  7845  002E22  5014               	movf	___ftge@ff2+1,w,c
  7846  002E24  5811               	subwfb	___ftge@ff1+1,w,c
  7847  002E26  5015               	movf	___ftge@ff2+2,w,c
  7848  002E28  5812               	subwfb	___ftge@ff1+2,w,c
  7849  002E2A  B0D8               	btfsc	status,0,c
  7850  002E2C  D002               	goto	l3019
  7851  002E2E  90D8               	bcf	status,0,c
  7852  002E30  0012               	return	
  7853  002E32                     l3019:
  7854  002E32  80D8               	bsf	status,0,c
  7855  002E34  0012               	return	
  7856  002E36                     __end_of___ftge:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodh	equ	0xFF4
  7863                           prodl	equ	0xFF3
  7864                           intcon	equ	0xFF2
  7865                           postinc0	equ	0xFEE
  7866                           wreg	equ	0xFE8
  7867                           indf1	equ	0xFE7
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _USART_SendString *****************
  7878 ;; Defined at:
  7879 ;;		line 40 in file "USART_Source_File.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  out             2   16[COMRAM] PTR const unsigned char 
  7882 ;;		 -> stringBT(50), 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;		None
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  1    wreg      void 
  7887 ;; Registers used:
  7888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7894 ;;      Params:         2       0       0       0       0       0       0       0       0
  7895 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7897 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7898 ;;Total ram usage:        2 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    2
  7901 ;; This function calls:
  7902 ;;		_USART_TxChar
  7903 ;; This function is called by:
  7904 ;;		_main
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text32
  7909  003622                     __ptext32:
  7910                           	opt stack 0
  7911  003622                     _USART_SendString:
  7912                           	opt stack 28
  7913                           
  7914                           ;USART_Source_File.c: 42: while(*out!='\0')
  7915                           
  7916                           ;incstack = 0
  7917  003622  D009               	goto	l4001
  7918  003624                     l3997:
  7919                           
  7920                           ;USART_Source_File.c: 43: {
  7921                           ;USART_Source_File.c: 44: USART_TxChar(*out);
  7922  003624  C011  FFD9         	movff	USART_SendString@out,fsr2l
  7923  003628  C012  FFDA         	movff	USART_SendString@out+1,fsr2h
  7924  00362C  50DF               	movf	indf2,w,c
  7925  00362E  EC6B  F01B         	call	_USART_TxChar
  7926                           
  7927                           ;USART_Source_File.c: 45: out++;
  7928  003632  4A11               	infsnz	USART_SendString@out,f,c
  7929  003634  2A12               	incf	USART_SendString@out+1,f,c
  7930  003636                     l4001:
  7931  003636  C011  FFD9         	movff	USART_SendString@out,fsr2l
  7932  00363A  C012  FFDA         	movff	USART_SendString@out+1,fsr2h
  7933  00363E  50DF               	movf	indf2,w,c
  7934  003640  B4D8               	btfsc	status,2,c
  7935  003642  0012               	return	
  7936  003644  D7EF               	goto	l3997
  7937  003646                     __end_of_USART_SendString:
  7938                           	opt stack 0
  7939                           tblptru	equ	0xFF8
  7940                           tblptrh	equ	0xFF7
  7941                           tblptrl	equ	0xFF6
  7942                           tablat	equ	0xFF5
  7943                           prodh	equ	0xFF4
  7944                           prodl	equ	0xFF3
  7945                           intcon	equ	0xFF2
  7946                           postinc0	equ	0xFEE
  7947                           wreg	equ	0xFE8
  7948                           indf1	equ	0xFE7
  7949                           fsr1h	equ	0xFE2
  7950                           fsr1l	equ	0xFE1
  7951                           indf2	equ	0xFDF
  7952                           postinc2	equ	0xFDE
  7953                           postdec2	equ	0xFDD
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           
  7958 ;; *************** function _USART_TxChar *****************
  7959 ;; Defined at:
  7960 ;;		line 19 in file "USART_Source_File.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;  out             1    wreg     unsigned char 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  out             1   15[COMRAM] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0
  7975 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7977 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7978 ;;Total ram usage:        1 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    1
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_USART_SendString
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           	psect	text33
  7989  0036D6                     __ptext33:
  7990                           	opt stack 0
  7991  0036D6                     _USART_TxChar:
  7992                           	opt stack 28
  7993                           
  7994                           ;incstack = 0
  7995                           ;USART_TxChar@out stored from wreg
  7996  0036D6  6E10               	movwf	USART_TxChar@out,c
  7997  0036D8                     l249:
  7998  0036D8  A89E               	btfss	3998,4,c	;volatile
  7999  0036DA  D7FE               	goto	l249
  8000                           
  8001                           ;USART_Source_File.c: 22: TXREG=out;
  8002  0036DC  C010  FFAD         	movff	USART_TxChar@out,4013	;volatile
  8003  0036E0  0012               	return		;funcret
  8004  0036E2                     __end_of_USART_TxChar:
  8005                           	opt stack 0
  8006                           tblptru	equ	0xFF8
  8007                           tblptrh	equ	0xFF7
  8008                           tblptrl	equ	0xFF6
  8009                           tablat	equ	0xFF5
  8010                           prodh	equ	0xFF4
  8011                           prodl	equ	0xFF3
  8012                           intcon	equ	0xFF2
  8013                           postinc0	equ	0xFEE
  8014                           wreg	equ	0xFE8
  8015                           indf1	equ	0xFE7
  8016                           fsr1h	equ	0xFE2
  8017                           fsr1l	equ	0xFE1
  8018                           indf2	equ	0xFDF
  8019                           postinc2	equ	0xFDE
  8020                           postdec2	equ	0xFDD
  8021                           fsr2h	equ	0xFDA
  8022                           fsr2l	equ	0xFD9
  8023                           status	equ	0xFD8
  8024                           
  8025 ;; *************** function _USART_Init *****************
  8026 ;; Defined at:
  8027 ;;		line 8 in file "USART_Source_File.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  baud_rate       4    6[BANK0 ] long 
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  temp            3   10[BANK0 ] float 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      void 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8041 ;;      Params:         0       4       0       0       0       0       0       0       0
  8042 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8044 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8045 ;;Total ram usage:        7 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    3
  8048 ;; This function calls:
  8049 ;;		___altoft
  8050 ;;		___ftadd
  8051 ;;		___ftdiv
  8052 ;;		___fttol
  8053 ;; This function is called by:
  8054 ;;		_main
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text34
  8059  002FC0                     __ptext34:
  8060                           	opt stack 0
  8061  002FC0                     _USART_Init:
  8062                           	opt stack 27
  8063                           
  8064                           ;USART_Source_File.c: 10: float temp;
  8065                           ;USART_Source_File.c: 11: TRISC6=0;
  8066                           
  8067                           ;incstack = 0
  8068  002FC0  9C94               	bcf	3988,6,c	;volatile
  8069                           
  8070                           ;USART_Source_File.c: 12: TRISC7=1;
  8071  002FC2  8E94               	bsf	3988,7,c	;volatile
  8072                           
  8073                           ;USART_Source_File.c: 13: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  8074  002FC4  C066  F018         	movff	USART_Init@baud_rate,___altoft@c
  8075  002FC8  C067  F019         	movff	USART_Init@baud_rate+1,___altoft@c+1
  8076  002FCC  C068  F01A         	movff	USART_Init@baud_rate+2,___altoft@c+2
  8077  002FD0  C069  F01B         	movff	USART_Init@baud_rate+3,___altoft@c+3
  8078  002FD4  EC5A  F018         	call	___altoft	;wreg free
  8079  002FD8  C018  F025         	movff	?___altoft,___ftdiv@f2
  8080  002FDC  C019  F026         	movff	?___altoft+1,___ftdiv@f2+1
  8081  002FE0  C01A  F027         	movff	?___altoft+2,___ftdiv@f2+2
  8082  002FE4  0E24               	movlw	36
  8083  002FE6  6E22               	movwf	___ftdiv@f1,c
  8084  002FE8  0EF4               	movlw	244
  8085  002FEA  6E23               	movwf	___ftdiv@f1+1,c
  8086  002FEC  0E47               	movlw	71
  8087  002FEE  6E24               	movwf	___ftdiv@f1+2,c
  8088  002FF0  EC6B  F015         	call	___ftdiv	;wreg free
  8089  002FF4  C022  F03D         	movff	?___ftdiv,___ftadd@f1
  8090  002FF8  C023  F03E         	movff	?___ftdiv+1,___ftadd@f1+1
  8091  002FFC  C024  F03F         	movff	?___ftdiv+2,___ftadd@f1+2
  8092  003000  0E00               	movlw	0
  8093  003002  6E40               	movwf	___ftadd@f2,c
  8094  003004  0E80               	movlw	128
  8095  003006  6E41               	movwf	___ftadd@f2+1,c
  8096  003008  0EBF               	movlw	191
  8097  00300A  6E42               	movwf	___ftadd@f2+2,c
  8098  00300C  ECFA  F00F         	call	___ftadd	;wreg free
  8099  003010  C03D  F06A         	movff	?___ftadd,USART_Init@temp
  8100  003014  C03E  F06B         	movff	?___ftadd+1,USART_Init@temp+1
  8101  003018  C03F  F06C         	movff	?___ftadd+2,USART_Init@temp+2
  8102                           
  8103                           ;USART_Source_File.c: 14: SPBRG=(int)temp;
  8104  00301C  C06A  F03A         	movff	USART_Init@temp,___fttol@f1
  8105  003020  C06B  F03B         	movff	USART_Init@temp+1,___fttol@f1+1
  8106  003024  C06C  F03C         	movff	USART_Init@temp+2,___fttol@f1+2
  8107  003028  EC5E  F013         	call	___fttol	;wreg free
  8108  00302C  503A               	movf	?___fttol,w,c
  8109  00302E  6EAF               	movwf	4015,c	;volatile
  8110                           
  8111                           ;USART_Source_File.c: 15: TXSTA=0x20;
  8112  003030  0E20               	movlw	32
  8113  003032  6EAC               	movwf	4012,c	;volatile
  8114                           
  8115                           ;USART_Source_File.c: 16: RCSTA=0x90;
  8116  003034  0E90               	movlw	144
  8117  003036  6EAB               	movwf	4011,c	;volatile
  8118  003038  0012               	return		;funcret
  8119  00303A                     __end_of_USART_Init:
  8120                           	opt stack 0
  8121                           tblptru	equ	0xFF8
  8122                           tblptrh	equ	0xFF7
  8123                           tblptrl	equ	0xFF6
  8124                           tablat	equ	0xFF5
  8125                           prodh	equ	0xFF4
  8126                           prodl	equ	0xFF3
  8127                           intcon	equ	0xFF2
  8128                           postinc0	equ	0xFEE
  8129                           wreg	equ	0xFE8
  8130                           indf1	equ	0xFE7
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function ___fttol *****************
  8141 ;; Defined at:
  8142 ;;		line 44 in file "D:\mplab\sources\common\fttol.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  f1              3   57[COMRAM] float 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  lval            4    1[BANK0 ] unsigned long 
  8147 ;;  exp1            1    5[BANK0 ] unsigned char 
  8148 ;;  sign1           1    0[BANK0 ] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  4   57[COMRAM] long 
  8151 ;; Registers used:
  8152 ;;		wreg, status,2, status,0
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8158 ;;      Params:         4       0       0       0       0       0       0       0       0
  8159 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8160 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8161 ;;      Totals:         9       6       0       0       0       0       0       0       0
  8162 ;;Total ram usage:       15 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    1
  8165 ;; This function calls:
  8166 ;;		Nothing
  8167 ;; This function is called by:
  8168 ;;		_main
  8169 ;;		_convert_to_degrees
  8170 ;;		_USART_Init
  8171 ;;		_sprintf
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           	psect	text35
  8176  0026BC                     __ptext35:
  8177                           	opt stack 0
  8178  0026BC                     ___fttol:
  8179                           	opt stack 28
  8180                           
  8181                           ;incstack = 0
  8182  0026BC  C03C  F03E         	movff	___fttol@f1+2,??___fttol
  8183  0026C0  6A3F               	clrf	(??___fttol+1)& (0+255),c
  8184  0026C2  6A40               	clrf	(??___fttol+2)& (0+255),c
  8185  0026C4  343B               	rlcf	___fttol@f1+1,w,c
  8186  0026C6  363E               	rlcf	??___fttol& (0+255),f,c
  8187  0026C8  E301               	bnc	u5381
  8188  0026CA  803F               	bsf	(??___fttol+1)& (0+255),0,c
  8189  0026CC                     u5381:
  8190  0026CC  503E               	movf	??___fttol,w,c
  8191  0026CE  0100               	movlb	0	; () banked
  8192  0026D0  6F65               	movwf	___fttol@exp1& (0+255),b
  8193  0026D2  0100               	movlb	0	; () banked
  8194  0026D4  5165               	movf	___fttol@exp1& (0+255),w,b
  8195  0026D6  A4D8               	btfss	status,2,c
  8196  0026D8  D009               	goto	l4583
  8197                           
  8198                           ; BSR set to: 0
  8199  0026DA  0E00               	movlw	0
  8200  0026DC  6E3A               	movwf	?___fttol,c
  8201  0026DE  0E00               	movlw	0
  8202  0026E0  6E3B               	movwf	?___fttol+1,c
  8203  0026E2  0E00               	movlw	0
  8204  0026E4  6E3C               	movwf	?___fttol+2,c
  8205  0026E6  0E00               	movlw	0
  8206  0026E8  6E3D               	movwf	?___fttol+3,c
  8207                           
  8208                           ; BSR set to: 0
  8209  0026EA  0012               	return	
  8210  0026EC                     l4583:
  8211                           
  8212                           ; BSR set to: 0
  8213  0026EC  0E17               	movlw	23
  8214  0026EE  6E3E               	movwf	??___fttol& (0+255),c
  8215  0026F0  C03A  F03F         	movff	___fttol@f1,??___fttol+1
  8216  0026F4  C03B  F040         	movff	___fttol@f1+1,??___fttol+2
  8217  0026F8  C03C  F041         	movff	___fttol@f1+2,??___fttol+3
  8218  0026FC  283E               	incf	??___fttol,w,c
  8219  0026FE  6E42               	movwf	(??___fttol+4)& (0+255),c
  8220  002700  D004               	goto	u5400
  8221  002702                     u5405:
  8222  002702  90D8               	bcf	status,0,c
  8223  002704  3241               	rrcf	??___fttol+3,f,c
  8224  002706  3240               	rrcf	??___fttol+2,f,c
  8225  002708  323F               	rrcf	??___fttol+1,f,c
  8226  00270A                     u5400:
  8227  00270A  2E42               	decfsz	(??___fttol+4)& (0+255),f,c
  8228  00270C  D7FA               	goto	u5405
  8229  00270E  503F               	movf	??___fttol+1,w,c
  8230  002710  0100               	movlb	0	; () banked
  8231  002712  6F60               	movwf	___fttol@sign1& (0+255),b
  8232                           
  8233                           ; BSR set to: 0
  8234  002714  8E3B               	bsf	___fttol@f1+1,7,c
  8235                           
  8236                           ; BSR set to: 0
  8237  002716  0EFF               	movlw	255
  8238  002718  163A               	andwf	___fttol@f1,f,c
  8239  00271A  0EFF               	movlw	255
  8240  00271C  163B               	andwf	___fttol@f1+1,f,c
  8241  00271E  0E00               	movlw	0
  8242  002720  163C               	andwf	___fttol@f1+2,f,c
  8243                           
  8244                           ; BSR set to: 0
  8245  002722  503A               	movf	___fttol@f1,w,c
  8246  002724  0100               	movlb	0	; () banked
  8247  002726  6F61               	movwf	___fttol@lval& (0+255),b
  8248  002728  503B               	movf	___fttol@f1+1,w,c
  8249  00272A  0100               	movlb	0	; () banked
  8250  00272C  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  8251  00272E  503C               	movf	___fttol@f1+2,w,c
  8252  002730  0100               	movlb	0	; () banked
  8253  002732  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  8254  002734  0100               	movlb	0	; () banked
  8255  002736  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  8256                           
  8257                           ; BSR set to: 0
  8258  002738  0E8E               	movlw	142
  8259  00273A  0100               	movlb	0	; () banked
  8260  00273C  5F65               	subwf	___fttol@exp1& (0+255),f,b
  8261                           
  8262                           ; BSR set to: 0
  8263  00273E  0100               	movlb	0	; () banked
  8264  002740  AF65               	btfss	___fttol@exp1& (0+255),7,b
  8265  002742  D019               	goto	l4605
  8266                           
  8267                           ; BSR set to: 0
  8268  002744  0100               	movlb	0	; () banked
  8269  002746  5165               	movf	___fttol@exp1& (0+255),w,b
  8270  002748  0A80               	xorlw	128
  8271  00274A  0F8F               	addlw	143
  8272  00274C  B0D8               	btfsc	status,0,c
  8273  00274E  D009               	goto	l4601
  8274                           
  8275                           ; BSR set to: 0
  8276  002750  0E00               	movlw	0
  8277  002752  6E3A               	movwf	?___fttol,c
  8278  002754  0E00               	movlw	0
  8279  002756  6E3B               	movwf	?___fttol+1,c
  8280  002758  0E00               	movlw	0
  8281  00275A  6E3C               	movwf	?___fttol+2,c
  8282  00275C  0E00               	movlw	0
  8283  00275E  6E3D               	movwf	?___fttol+3,c
  8284                           
  8285                           ; BSR set to: 0
  8286  002760  0012               	return	
  8287  002762                     l4601:
  8288                           
  8289                           ; BSR set to: 0
  8290  002762  0100               	movlb	0	; () banked
  8291  002764  90D8               	bcf	status,0,c
  8292  002766  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8293  002768  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8294  00276A  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8295  00276C  3361               	rrcf	___fttol@lval& (0+255),f,b
  8296                           
  8297                           ; BSR set to: 0
  8298  00276E  0100               	movlb	0	; () banked
  8299  002770  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  8300  002772  D7F7               	goto	l4601
  8301                           
  8302                           ; BSR set to: 0
  8303  002774  D01A               	goto	l4615
  8304  002776                     l4605:
  8305                           
  8306                           ; BSR set to: 0
  8307  002776  0E17               	movlw	23
  8308  002778  0100               	movlb	0	; () banked
  8309  00277A  6565               	cpfsgt	___fttol@exp1& (0+255),b
  8310  00277C  D011               	goto	l4613
  8311                           
  8312                           ; BSR set to: 0
  8313  00277E  0E00               	movlw	0
  8314  002780  6E3A               	movwf	?___fttol,c
  8315  002782  0E00               	movlw	0
  8316  002784  6E3B               	movwf	?___fttol+1,c
  8317  002786  0E00               	movlw	0
  8318  002788  6E3C               	movwf	?___fttol+2,c
  8319  00278A  0E00               	movlw	0
  8320  00278C  6E3D               	movwf	?___fttol+3,c
  8321                           
  8322                           ; BSR set to: 0
  8323  00278E  0012               	return	
  8324  002790                     l4611:
  8325                           
  8326                           ; BSR set to: 0
  8327  002790  0100               	movlb	0	; () banked
  8328  002792  90D8               	bcf	status,0,c
  8329  002794  3761               	rlcf	___fttol@lval& (0+255),f,b
  8330  002796  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8331  002798  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8332  00279A  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8333  00279C  0100               	movlb	0	; () banked
  8334  00279E  0765               	decf	___fttol@exp1& (0+255),f,b
  8335  0027A0                     l4613:
  8336                           
  8337                           ; BSR set to: 0
  8338  0027A0  0100               	movlb	0	; () banked
  8339  0027A2  5165               	movf	___fttol@exp1& (0+255),w,b
  8340  0027A4  0100               	movlb	0	; () banked
  8341  0027A6  A4D8               	btfss	status,2,c
  8342  0027A8  D7F3               	goto	l4611
  8343  0027AA                     l4615:
  8344                           
  8345                           ; BSR set to: 0
  8346  0027AA  0100               	movlb	0	; () banked
  8347  0027AC  5160               	movf	___fttol@sign1& (0+255),w,b
  8348  0027AE  0100               	movlb	0	; () banked
  8349  0027B0  B4D8               	btfsc	status,2,c
  8350  0027B2  D009               	goto	l4619
  8351                           
  8352                           ; BSR set to: 0
  8353  0027B4  0100               	movlb	0	; () banked
  8354  0027B6  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  8355  0027B8  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  8356  0027BA  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  8357  0027BC  6D61               	negf	___fttol@lval& (0+255),b
  8358  0027BE  0E00               	movlw	0
  8359  0027C0  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8360  0027C2  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8361  0027C4  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8362  0027C6                     l4619:
  8363                           
  8364                           ; BSR set to: 0
  8365  0027C6  C061  F03A         	movff	___fttol@lval,?___fttol
  8366  0027CA  C062  F03B         	movff	___fttol@lval+1,?___fttol+1
  8367  0027CE  C063  F03C         	movff	___fttol@lval+2,?___fttol+2
  8368  0027D2  C064  F03D         	movff	___fttol@lval+3,?___fttol+3
  8369  0027D6  0012               	return	
  8370  0027D8                     __end_of___fttol:
  8371                           	opt stack 0
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           postinc0	equ	0xFEE
  8380                           wreg	equ	0xFE8
  8381                           indf1	equ	0xFE7
  8382                           fsr1h	equ	0xFE2
  8383                           fsr1l	equ	0xFE1
  8384                           indf2	equ	0xFDF
  8385                           postinc2	equ	0xFDE
  8386                           postdec2	equ	0xFDD
  8387                           fsr2h	equ	0xFDA
  8388                           fsr2l	equ	0xFD9
  8389                           status	equ	0xFD8
  8390                           
  8391 ;; *************** function ___ftdiv *****************
  8392 ;; Defined at:
  8393 ;;		line 54 in file "D:\mplab\sources\common\ftdiv.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;  f1              3   33[COMRAM] float 
  8396 ;;  f2              3   36[COMRAM] float 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;  f3              3   43[COMRAM] float 
  8399 ;;  sign            1   47[COMRAM] unsigned char 
  8400 ;;  exp             1   46[COMRAM] unsigned char 
  8401 ;;  cntr            1   42[COMRAM] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  3   33[COMRAM] float 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8411 ;;      Params:         6       0       0       0       0       0       0       0       0
  8412 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8413 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8414 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8415 ;;Total ram usage:       15 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    2
  8418 ;; This function calls:
  8419 ;;		___ftpack
  8420 ;; This function is called by:
  8421 ;;		_main
  8422 ;;		_convert_to_degrees
  8423 ;;		_USART_Init
  8424 ;;		_strtod
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text36
  8429  002AD6                     __ptext36:
  8430                           	opt stack 0
  8431  002AD6                     ___ftdiv:
  8432                           	opt stack 25
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;incstack = 0
  8436  002AD6  C024  F028         	movff	___ftdiv@f1+2,??___ftdiv
  8437  002ADA  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  8438  002ADC  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  8439  002ADE  3423               	rlcf	___ftdiv@f1+1,w,c
  8440  002AE0  3628               	rlcf	??___ftdiv& (0+255),f,c
  8441  002AE2  E301               	bnc	u4861
  8442  002AE4  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  8443  002AE6                     u4861:
  8444  002AE6  5028               	movf	??___ftdiv,w,c
  8445  002AE8  6E2F               	movwf	___ftdiv@exp,c
  8446  002AEA  502F               	movf	___ftdiv@exp,w,c
  8447  002AEC  A4D8               	btfss	status,2,c
  8448  002AEE  D007               	goto	l4255
  8449  002AF0  0E00               	movlw	0
  8450  002AF2  6E22               	movwf	?___ftdiv,c
  8451  002AF4  0E00               	movlw	0
  8452  002AF6  6E23               	movwf	?___ftdiv+1,c
  8453  002AF8  0E00               	movlw	0
  8454  002AFA  6E24               	movwf	?___ftdiv+2,c
  8455  002AFC  0012               	return	
  8456  002AFE                     l4255:
  8457  002AFE  C027  F028         	movff	___ftdiv@f2+2,??___ftdiv
  8458  002B02  6A29               	clrf	(??___ftdiv+1)& (0+255),c
  8459  002B04  6A2A               	clrf	(??___ftdiv+2)& (0+255),c
  8460  002B06  3426               	rlcf	___ftdiv@f2+1,w,c
  8461  002B08  3628               	rlcf	??___ftdiv& (0+255),f,c
  8462  002B0A  E301               	bnc	u4881
  8463  002B0C  8029               	bsf	(??___ftdiv+1)& (0+255),0,c
  8464  002B0E                     u4881:
  8465  002B0E  5028               	movf	??___ftdiv,w,c
  8466  002B10  6E30               	movwf	___ftdiv@sign,c
  8467  002B12  5030               	movf	___ftdiv@sign,w,c
  8468  002B14  A4D8               	btfss	status,2,c
  8469  002B16  D007               	goto	l4261
  8470  002B18  0E00               	movlw	0
  8471  002B1A  6E22               	movwf	?___ftdiv,c
  8472  002B1C  0E00               	movlw	0
  8473  002B1E  6E23               	movwf	?___ftdiv+1,c
  8474  002B20  0E00               	movlw	0
  8475  002B22  6E24               	movwf	?___ftdiv+2,c
  8476  002B24  0012               	return	
  8477  002B26                     l4261:
  8478  002B26  0E00               	movlw	0
  8479  002B28  6E2C               	movwf	___ftdiv@f3,c
  8480  002B2A  0E00               	movlw	0
  8481  002B2C  6E2D               	movwf	___ftdiv@f3+1,c
  8482  002B2E  0E00               	movlw	0
  8483  002B30  6E2E               	movwf	___ftdiv@f3+2,c
  8484  002B32  5030               	movf	___ftdiv@sign,w,c
  8485  002B34  0F89               	addlw	137
  8486  002B36  5E2F               	subwf	___ftdiv@exp,f,c
  8487  002B38  C024  F030         	movff	___ftdiv@f1+2,___ftdiv@sign
  8488  002B3C  5027               	movf	___ftdiv@f2+2,w,c
  8489  002B3E  1A30               	xorwf	___ftdiv@sign,f,c
  8490  002B40  0E80               	movlw	128
  8491  002B42  1630               	andwf	___ftdiv@sign,f,c
  8492  002B44  8E23               	bsf	___ftdiv@f1+1,7,c
  8493  002B46  0EFF               	movlw	255
  8494  002B48  1622               	andwf	___ftdiv@f1,f,c
  8495  002B4A  0EFF               	movlw	255
  8496  002B4C  1623               	andwf	___ftdiv@f1+1,f,c
  8497  002B4E  0E00               	movlw	0
  8498  002B50  1624               	andwf	___ftdiv@f1+2,f,c
  8499  002B52  8E26               	bsf	___ftdiv@f2+1,7,c
  8500  002B54  0EFF               	movlw	255
  8501  002B56  1625               	andwf	___ftdiv@f2,f,c
  8502  002B58  0EFF               	movlw	255
  8503  002B5A  1626               	andwf	___ftdiv@f2+1,f,c
  8504  002B5C  0E00               	movlw	0
  8505  002B5E  1627               	andwf	___ftdiv@f2+2,f,c
  8506  002B60  0E18               	movlw	24
  8507  002B62  6E2B               	movwf	___ftdiv@cntr,c
  8508  002B64                     l4281:
  8509  002B64  90D8               	bcf	status,0,c
  8510  002B66  362C               	rlcf	___ftdiv@f3,f,c
  8511  002B68  362D               	rlcf	___ftdiv@f3+1,f,c
  8512  002B6A  362E               	rlcf	___ftdiv@f3+2,f,c
  8513  002B6C  5025               	movf	___ftdiv@f2,w,c
  8514  002B6E  5C22               	subwf	___ftdiv@f1,w,c
  8515  002B70  5026               	movf	___ftdiv@f2+1,w,c
  8516  002B72  5823               	subwfb	___ftdiv@f1+1,w,c
  8517  002B74  5027               	movf	___ftdiv@f2+2,w,c
  8518  002B76  5824               	subwfb	___ftdiv@f1+2,w,c
  8519  002B78  A0D8               	btfss	status,0,c
  8520  002B7A  D007               	goto	l748
  8521  002B7C  5025               	movf	___ftdiv@f2,w,c
  8522  002B7E  5E22               	subwf	___ftdiv@f1,f,c
  8523  002B80  5026               	movf	___ftdiv@f2+1,w,c
  8524  002B82  5A23               	subwfb	___ftdiv@f1+1,f,c
  8525  002B84  5027               	movf	___ftdiv@f2+2,w,c
  8526  002B86  5A24               	subwfb	___ftdiv@f1+2,f,c
  8527  002B88  802C               	bsf	___ftdiv@f3,0,c
  8528  002B8A                     l748:
  8529  002B8A  90D8               	bcf	status,0,c
  8530  002B8C  3622               	rlcf	___ftdiv@f1,f,c
  8531  002B8E  3623               	rlcf	___ftdiv@f1+1,f,c
  8532  002B90  3624               	rlcf	___ftdiv@f1+2,f,c
  8533  002B92  2E2B               	decfsz	___ftdiv@cntr,f,c
  8534  002B94  D7E7               	goto	l4281
  8535  002B96  C02C  F010         	movff	___ftdiv@f3,___ftpack@arg
  8536  002B9A  C02D  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8537  002B9E  C02E  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8538  002BA2  C02F  F013         	movff	___ftdiv@exp,___ftpack@exp
  8539  002BA6  C030  F014         	movff	___ftdiv@sign,___ftpack@sign
  8540  002BAA  ECDE  F015         	call	___ftpack	;wreg free
  8541  002BAE  C010  F022         	movff	?___ftpack,?___ftdiv
  8542  002BB2  C011  F023         	movff	?___ftpack+1,?___ftdiv+1
  8543  002BB6  C012  F024         	movff	?___ftpack+2,?___ftdiv+2
  8544  002BBA  0012               	return	
  8545  002BBC                     __end_of___ftdiv:
  8546                           	opt stack 0
  8547                           tblptru	equ	0xFF8
  8548                           tblptrh	equ	0xFF7
  8549                           tblptrl	equ	0xFF6
  8550                           tablat	equ	0xFF5
  8551                           prodh	equ	0xFF4
  8552                           prodl	equ	0xFF3
  8553                           intcon	equ	0xFF2
  8554                           postinc0	equ	0xFEE
  8555                           wreg	equ	0xFE8
  8556                           indf1	equ	0xFE7
  8557                           fsr1h	equ	0xFE2
  8558                           fsr1l	equ	0xFE1
  8559                           indf2	equ	0xFDF
  8560                           postinc2	equ	0xFDE
  8561                           postdec2	equ	0xFDD
  8562                           fsr2h	equ	0xFDA
  8563                           fsr2l	equ	0xFD9
  8564                           status	equ	0xFD8
  8565                           
  8566 ;; *************** function ___ftadd *****************
  8567 ;; Defined at:
  8568 ;;		line 86 in file "D:\mplab\sources\common\ftadd.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;  f1              3   60[COMRAM] float 
  8571 ;;  f2              3   63[COMRAM] float 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  exp1            1    2[BANK0 ] unsigned char 
  8574 ;;  exp2            1    1[BANK0 ] unsigned char 
  8575 ;;  sign            1    0[BANK0 ] unsigned char 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  3   60[COMRAM] float 
  8578 ;; Registers used:
  8579 ;;		wreg, status,2, status,0, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8585 ;;      Params:         6       0       0       0       0       0       0       0       0
  8586 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8587 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8588 ;;      Totals:         9       3       0       0       0       0       0       0       0
  8589 ;;Total ram usage:       12 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    2
  8592 ;; This function calls:
  8593 ;;		___ftpack
  8594 ;; This function is called by:
  8595 ;;		_convert_to_degrees
  8596 ;;		_USART_Init
  8597 ;;		_sprintf
  8598 ;;		___ftsub
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text37
  8603  001FF4                     __ptext37:
  8604                           	opt stack 0
  8605  001FF4                     ___ftadd:
  8606                           	opt stack 26
  8607                           
  8608                           ;incstack = 0
  8609  001FF4  C03F  F043         	movff	___ftadd@f1+2,??___ftadd
  8610  001FF8  6A44               	clrf	(??___ftadd+1)& (0+255),c
  8611  001FFA  6A45               	clrf	(??___ftadd+2)& (0+255),c
  8612  001FFC  343E               	rlcf	___ftadd@f1+1,w,c
  8613  001FFE  3643               	rlcf	??___ftadd& (0+255),f,c
  8614  002000  E301               	bnc	u4651
  8615  002002  8044               	bsf	(??___ftadd+1)& (0+255),0,c
  8616  002004                     u4651:
  8617  002004  5043               	movf	??___ftadd,w,c
  8618  002006  0100               	movlb	0	; () banked
  8619  002008  6F62               	movwf	___ftadd@exp1& (0+255),b
  8620  00200A  C042  F043         	movff	___ftadd@f2+2,??___ftadd
  8621  00200E  6A44               	clrf	(??___ftadd+1)& (0+255),c
  8622  002010  6A45               	clrf	(??___ftadd+2)& (0+255),c
  8623  002012  3441               	rlcf	___ftadd@f2+1,w,c
  8624  002014  3643               	rlcf	??___ftadd& (0+255),f,c
  8625  002016  E301               	bnc	u4661
  8626  002018  8044               	bsf	(??___ftadd+1)& (0+255),0,c
  8627  00201A                     u4661:
  8628  00201A  5043               	movf	??___ftadd,w,c
  8629  00201C  0100               	movlb	0	; () banked
  8630  00201E  6F61               	movwf	___ftadd@exp2& (0+255),b
  8631                           
  8632                           ; BSR set to: 0
  8633  002020  0100               	movlb	0	; () banked
  8634  002022  5162               	movf	___ftadd@exp1& (0+255),w,b
  8635  002024  0100               	movlb	0	; () banked
  8636  002026  B4D8               	btfsc	status,2,c
  8637  002028  D00F               	goto	l713
  8638                           
  8639                           ; BSR set to: 0
  8640  00202A  0100               	movlb	0	; () banked
  8641  00202C  5161               	movf	___ftadd@exp2& (0+255),w,b
  8642  00202E  0100               	movlb	0	; () banked
  8643  002030  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  8644  002032  B0D8               	btfsc	status,0,c
  8645  002034  D010               	goto	l4187
  8646                           
  8647                           ; BSR set to: 0
  8648  002036  0100               	movlb	0	; () banked
  8649  002038  5162               	movf	___ftadd@exp1& (0+255),w,b
  8650  00203A  0800               	sublw	0
  8651  00203C  0100               	movlb	0	; () banked
  8652  00203E  2561               	addwf	___ftadd@exp2& (0+255),w,b
  8653  002040  6E43               	movwf	??___ftadd& (0+255),c
  8654  002042  0E18               	movlw	24
  8655  002044  6443               	cpfsgt	??___ftadd,c
  8656  002046  D007               	goto	l4187
  8657  002048                     l713:
  8658                           
  8659                           ; BSR set to: 0
  8660  002048  C040  F03D         	movff	___ftadd@f2,?___ftadd
  8661  00204C  C041  F03E         	movff	___ftadd@f2+1,?___ftadd+1
  8662  002050  C042  F03F         	movff	___ftadd@f2+2,?___ftadd+2
  8663  002054  0012               	return	
  8664  002056                     l4187:
  8665                           
  8666                           ; BSR set to: 0
  8667  002056  0100               	movlb	0	; () banked
  8668  002058  5161               	movf	___ftadd@exp2& (0+255),w,b
  8669  00205A  0100               	movlb	0	; () banked
  8670  00205C  B4D8               	btfsc	status,2,c
  8671  00205E  D00F               	goto	l717
  8672                           
  8673                           ; BSR set to: 0
  8674  002060  0100               	movlb	0	; () banked
  8675  002062  5162               	movf	___ftadd@exp1& (0+255),w,b
  8676  002064  0100               	movlb	0	; () banked
  8677  002066  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  8678  002068  B0D8               	btfsc	status,0,c
  8679  00206A  D010               	goto	l4193
  8680                           
  8681                           ; BSR set to: 0
  8682  00206C  0100               	movlb	0	; () banked
  8683  00206E  5161               	movf	___ftadd@exp2& (0+255),w,b
  8684  002070  0800               	sublw	0
  8685  002072  0100               	movlb	0	; () banked
  8686  002074  2562               	addwf	___ftadd@exp1& (0+255),w,b
  8687  002076  6E43               	movwf	??___ftadd& (0+255),c
  8688  002078  0E18               	movlw	24
  8689  00207A  6443               	cpfsgt	??___ftadd,c
  8690  00207C  D007               	goto	l4193
  8691  00207E                     l717:
  8692                           
  8693                           ; BSR set to: 0
  8694  00207E  C03D  F03D         	movff	___ftadd@f1,?___ftadd
  8695  002082  C03E  F03E         	movff	___ftadd@f1+1,?___ftadd+1
  8696  002086  C03F  F03F         	movff	___ftadd@f1+2,?___ftadd+2
  8697  00208A  0012               	return	
  8698  00208C                     l4193:
  8699                           
  8700                           ; BSR set to: 0
  8701  00208C  0E06               	movlw	6
  8702  00208E  0100               	movlb	0	; () banked
  8703  002090  6F60               	movwf	___ftadd@sign& (0+255),b
  8704                           
  8705                           ; BSR set to: 0
  8706  002092  AE3F               	btfss	___ftadd@f1+2,7,c
  8707  002094  D002               	goto	l4199
  8708                           
  8709                           ; BSR set to: 0
  8710  002096  0100               	movlb	0	; () banked
  8711  002098  8F60               	bsf	___ftadd@sign& (0+255),7,b
  8712  00209A                     l4199:
  8713                           
  8714                           ; BSR set to: 0
  8715  00209A  AE42               	btfss	___ftadd@f2+2,7,c
  8716  00209C  D002               	goto	l719
  8717                           
  8718                           ; BSR set to: 0
  8719  00209E  0100               	movlb	0	; () banked
  8720  0020A0  8D60               	bsf	___ftadd@sign& (0+255),6,b
  8721  0020A2                     l719:
  8722                           
  8723                           ; BSR set to: 0
  8724  0020A2  8E3E               	bsf	___ftadd@f1+1,7,c
  8725                           
  8726                           ; BSR set to: 0
  8727  0020A4  0EFF               	movlw	255
  8728  0020A6  163D               	andwf	___ftadd@f1,f,c
  8729  0020A8  0EFF               	movlw	255
  8730  0020AA  163E               	andwf	___ftadd@f1+1,f,c
  8731  0020AC  0E00               	movlw	0
  8732  0020AE  163F               	andwf	___ftadd@f1+2,f,c
  8733  0020B0  8E41               	bsf	___ftadd@f2+1,7,c
  8734                           
  8735                           ; BSR set to: 0
  8736  0020B2  0EFF               	movlw	255
  8737  0020B4  1640               	andwf	___ftadd@f2,f,c
  8738  0020B6  0EFF               	movlw	255
  8739  0020B8  1641               	andwf	___ftadd@f2+1,f,c
  8740  0020BA  0E00               	movlw	0
  8741  0020BC  1642               	andwf	___ftadd@f2+2,f,c
  8742                           
  8743                           ; BSR set to: 0
  8744  0020BE  0100               	movlb	0	; () banked
  8745  0020C0  5161               	movf	___ftadd@exp2& (0+255),w,b
  8746  0020C2  0100               	movlb	0	; () banked
  8747  0020C4  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  8748  0020C6  B0D8               	btfsc	status,0,c
  8749  0020C8  D022               	goto	l4219
  8750  0020CA                     l4209:
  8751                           
  8752                           ; BSR set to: 0
  8753  0020CA  90D8               	bcf	status,0,c
  8754  0020CC  3640               	rlcf	___ftadd@f2,f,c
  8755  0020CE  3641               	rlcf	___ftadd@f2+1,f,c
  8756  0020D0  3642               	rlcf	___ftadd@f2+2,f,c
  8757  0020D2  0100               	movlb	0	; () banked
  8758  0020D4  0761               	decf	___ftadd@exp2& (0+255),f,b
  8759                           
  8760                           ; BSR set to: 0
  8761  0020D6  0100               	movlb	0	; () banked
  8762  0020D8  5162               	movf	___ftadd@exp1& (0+255),w,b
  8763  0020DA  0100               	movlb	0	; () banked
  8764  0020DC  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  8765  0020DE  B4D8               	btfsc	status,2,c
  8766  0020E0  D00F               	goto	l4217
  8767                           
  8768                           ; BSR set to: 0
  8769  0020E2  0100               	movlb	0	; () banked
  8770  0020E4  0760               	decf	___ftadd@sign& (0+255),f,b
  8771  0020E6  C060  F043         	movff	___ftadd@sign,??___ftadd
  8772  0020EA  0E07               	movlw	7
  8773  0020EC  1643               	andwf	??___ftadd,f,c
  8774  0020EE  B4D8               	btfsc	status,2,c
  8775  0020F0  D007               	goto	l4217
  8776  0020F2  D7EB               	goto	l4209
  8777  0020F4                     l4215:
  8778                           
  8779                           ; BSR set to: 0
  8780  0020F4  90D8               	bcf	status,0,c
  8781  0020F6  323F               	rrcf	___ftadd@f1+2,f,c
  8782  0020F8  323E               	rrcf	___ftadd@f1+1,f,c
  8783  0020FA  323D               	rrcf	___ftadd@f1,f,c
  8784  0020FC  0100               	movlb	0	; () banked
  8785  0020FE  2B62               	incf	___ftadd@exp1& (0+255),f,b
  8786  002100                     l4217:
  8787                           
  8788                           ; BSR set to: 0
  8789  002100  0100               	movlb	0	; () banked
  8790  002102  5161               	movf	___ftadd@exp2& (0+255),w,b
  8791  002104  0100               	movlb	0	; () banked
  8792  002106  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  8793  002108  B4D8               	btfsc	status,2,c
  8794  00210A  D028               	goto	l728
  8795  00210C  D7F3               	goto	l4215
  8796  00210E                     l4219:
  8797                           
  8798                           ; BSR set to: 0
  8799  00210E  0100               	movlb	0	; () banked
  8800  002110  5162               	movf	___ftadd@exp1& (0+255),w,b
  8801  002112  0100               	movlb	0	; () banked
  8802  002114  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  8803  002116  B0D8               	btfsc	status,0,c
  8804  002118  D021               	goto	l728
  8805  00211A                     l4221:
  8806                           
  8807                           ; BSR set to: 0
  8808  00211A  90D8               	bcf	status,0,c
  8809  00211C  363D               	rlcf	___ftadd@f1,f,c
  8810  00211E  363E               	rlcf	___ftadd@f1+1,f,c
  8811  002120  363F               	rlcf	___ftadd@f1+2,f,c
  8812  002122  0100               	movlb	0	; () banked
  8813  002124  0762               	decf	___ftadd@exp1& (0+255),f,b
  8814                           
  8815                           ; BSR set to: 0
  8816  002126  0100               	movlb	0	; () banked
  8817  002128  5162               	movf	___ftadd@exp1& (0+255),w,b
  8818  00212A  0100               	movlb	0	; () banked
  8819  00212C  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  8820  00212E  B4D8               	btfsc	status,2,c
  8821  002130  D00F               	goto	l4229
  8822                           
  8823                           ; BSR set to: 0
  8824  002132  0100               	movlb	0	; () banked
  8825  002134  0760               	decf	___ftadd@sign& (0+255),f,b
  8826  002136  C060  F043         	movff	___ftadd@sign,??___ftadd
  8827  00213A  0E07               	movlw	7
  8828  00213C  1643               	andwf	??___ftadd,f,c
  8829  00213E  B4D8               	btfsc	status,2,c
  8830  002140  D007               	goto	l4229
  8831  002142  D7EB               	goto	l4221
  8832  002144                     l4227:
  8833                           
  8834                           ; BSR set to: 0
  8835  002144  90D8               	bcf	status,0,c
  8836  002146  3242               	rrcf	___ftadd@f2+2,f,c
  8837  002148  3241               	rrcf	___ftadd@f2+1,f,c
  8838  00214A  3240               	rrcf	___ftadd@f2,f,c
  8839  00214C  0100               	movlb	0	; () banked
  8840  00214E  2B61               	incf	___ftadd@exp2& (0+255),f,b
  8841  002150                     l4229:
  8842                           
  8843                           ; BSR set to: 0
  8844  002150  0100               	movlb	0	; () banked
  8845  002152  5161               	movf	___ftadd@exp2& (0+255),w,b
  8846  002154  0100               	movlb	0	; () banked
  8847  002156  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  8848  002158  A4D8               	btfss	status,2,c
  8849  00215A  D7F4               	goto	l4227
  8850  00215C                     l728:
  8851                           
  8852                           ; BSR set to: 0
  8853  00215C  0100               	movlb	0	; () banked
  8854  00215E  AF60               	btfss	___ftadd@sign& (0+255),7,b
  8855  002160  D00C               	goto	l737
  8856                           
  8857                           ; BSR set to: 0
  8858  002162  0EFF               	movlw	255
  8859  002164  1A3D               	xorwf	___ftadd@f1,f,c
  8860  002166  0EFF               	movlw	255
  8861  002168  1A3E               	xorwf	___ftadd@f1+1,f,c
  8862  00216A  0EFF               	movlw	255
  8863  00216C  1A3F               	xorwf	___ftadd@f1+2,f,c
  8864  00216E  0E01               	movlw	1
  8865  002170  263D               	addwf	___ftadd@f1,f,c
  8866  002172  0E00               	movlw	0
  8867  002174  223E               	addwfc	___ftadd@f1+1,f,c
  8868  002176  0E00               	movlw	0
  8869  002178  223F               	addwfc	___ftadd@f1+2,f,c
  8870  00217A                     l737:
  8871                           
  8872                           ; BSR set to: 0
  8873  00217A  0100               	movlb	0	; () banked
  8874  00217C  AD60               	btfss	___ftadd@sign& (0+255),6,b
  8875  00217E  D00C               	goto	l4235
  8876                           
  8877                           ; BSR set to: 0
  8878  002180  0EFF               	movlw	255
  8879  002182  1A40               	xorwf	___ftadd@f2,f,c
  8880  002184  0EFF               	movlw	255
  8881  002186  1A41               	xorwf	___ftadd@f2+1,f,c
  8882  002188  0EFF               	movlw	255
  8883  00218A  1A42               	xorwf	___ftadd@f2+2,f,c
  8884  00218C  0E01               	movlw	1
  8885  00218E  2640               	addwf	___ftadd@f2,f,c
  8886  002190  0E00               	movlw	0
  8887  002192  2241               	addwfc	___ftadd@f2+1,f,c
  8888  002194  0E00               	movlw	0
  8889  002196  2242               	addwfc	___ftadd@f2+2,f,c
  8890  002198                     l4235:
  8891                           
  8892                           ; BSR set to: 0
  8893  002198  0E00               	movlw	0
  8894  00219A  0100               	movlb	0	; () banked
  8895  00219C  6F60               	movwf	___ftadd@sign& (0+255),b
  8896                           
  8897                           ; BSR set to: 0
  8898  00219E  503D               	movf	___ftadd@f1,w,c
  8899  0021A0  2640               	addwf	___ftadd@f2,f,c
  8900  0021A2  503E               	movf	___ftadd@f1+1,w,c
  8901  0021A4  2241               	addwfc	___ftadd@f2+1,f,c
  8902  0021A6  503F               	movf	___ftadd@f1+2,w,c
  8903  0021A8  2242               	addwfc	___ftadd@f2+2,f,c
  8904                           
  8905                           ; BSR set to: 0
  8906  0021AA  AE42               	btfss	___ftadd@f2+2,7,c
  8907  0021AC  D00F               	goto	l4245
  8908                           
  8909                           ; BSR set to: 0
  8910  0021AE  0EFF               	movlw	255
  8911  0021B0  1A40               	xorwf	___ftadd@f2,f,c
  8912  0021B2  0EFF               	movlw	255
  8913  0021B4  1A41               	xorwf	___ftadd@f2+1,f,c
  8914  0021B6  0EFF               	movlw	255
  8915  0021B8  1A42               	xorwf	___ftadd@f2+2,f,c
  8916  0021BA  0E01               	movlw	1
  8917  0021BC  2640               	addwf	___ftadd@f2,f,c
  8918  0021BE  0E00               	movlw	0
  8919  0021C0  2241               	addwfc	___ftadd@f2+1,f,c
  8920  0021C2  0E00               	movlw	0
  8921  0021C4  2242               	addwfc	___ftadd@f2+2,f,c
  8922                           
  8923                           ; BSR set to: 0
  8924  0021C6  0E01               	movlw	1
  8925  0021C8  0100               	movlb	0	; () banked
  8926  0021CA  6F60               	movwf	___ftadd@sign& (0+255),b
  8927  0021CC                     l4245:
  8928                           
  8929                           ; BSR set to: 0
  8930  0021CC  C040  F010         	movff	___ftadd@f2,___ftpack@arg
  8931  0021D0  C041  F011         	movff	___ftadd@f2+1,___ftpack@arg+1
  8932  0021D4  C042  F012         	movff	___ftadd@f2+2,___ftpack@arg+2
  8933  0021D8  C062  F013         	movff	___ftadd@exp1,___ftpack@exp
  8934  0021DC  C060  F014         	movff	___ftadd@sign,___ftpack@sign
  8935  0021E0  ECDE  F015         	call	___ftpack	;wreg free
  8936  0021E4  C010  F03D         	movff	?___ftpack,?___ftadd
  8937  0021E8  C011  F03E         	movff	?___ftpack+1,?___ftadd+1
  8938  0021EC  C012  F03F         	movff	?___ftpack+2,?___ftadd+2
  8939  0021F0  0012               	return	
  8940  0021F2                     __end_of___ftadd:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           postinc0	equ	0xFEE
  8950                           wreg	equ	0xFE8
  8951                           indf1	equ	0xFE7
  8952                           fsr1h	equ	0xFE2
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function ___altoft *****************
  8962 ;; Defined at:
  8963 ;;		line 42 in file "D:\mplab\sources\common\altoft.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;  c               4   23[COMRAM] long 
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  sign            1   32[COMRAM] unsigned char 
  8968 ;;  exp             1   31[COMRAM] unsigned char 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  3   23[COMRAM] float 
  8971 ;; Registers used:
  8972 ;;		wreg, status,2, status,0, cstack
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8978 ;;      Params:         4       0       0       0       0       0       0       0       0
  8979 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8980 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8981 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8982 ;;Total ram usage:       10 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    2
  8985 ;; This function calls:
  8986 ;;		___ftpack
  8987 ;; This function is called by:
  8988 ;;		_USART_Init
  8989 ;;		_strtod
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text38
  8994  0030B4                     __ptext38:
  8995                           	opt stack 0
  8996  0030B4                     ___altoft:
  8997                           	opt stack 25
  8998                           
  8999                           ;incstack = 0
  9000  0030B4  0E00               	movlw	0
  9001  0030B6  6E21               	movwf	___altoft@sign,c
  9002  0030B8  0E8E               	movlw	142
  9003  0030BA  6E20               	movwf	___altoft@exp,c
  9004  0030BC  AE1B               	btfss	___altoft@c+3,7,c
  9005  0030BE  D011               	goto	l4173
  9006  0030C0  1E1B               	comf	___altoft@c+3,f,c
  9007  0030C2  1E1A               	comf	___altoft@c+2,f,c
  9008  0030C4  1E19               	comf	___altoft@c+1,f,c
  9009  0030C6  6C18               	negf	___altoft@c,c
  9010  0030C8  0E00               	movlw	0
  9011  0030CA  2219               	addwfc	___altoft@c+1,f,c
  9012  0030CC  221A               	addwfc	___altoft@c+2,f,c
  9013  0030CE  221B               	addwfc	___altoft@c+3,f,c
  9014  0030D0  0E01               	movlw	1
  9015  0030D2  6E21               	movwf	___altoft@sign,c
  9016  0030D4  D006               	goto	l4173
  9017  0030D6                     l4171:
  9018  0030D6  90D8               	bcf	status,0,c
  9019  0030D8  321B               	rrcf	___altoft@c+3,f,c
  9020  0030DA  321A               	rrcf	___altoft@c+2,f,c
  9021  0030DC  3219               	rrcf	___altoft@c+1,f,c
  9022  0030DE  3218               	rrcf	___altoft@c,f,c
  9023  0030E0  2A20               	incf	___altoft@exp,f,c
  9024  0030E2                     l4173:
  9025  0030E2  0E00               	movlw	0
  9026  0030E4  1418               	andwf	___altoft@c,w,c
  9027  0030E6  6E1C               	movwf	??___altoft& (0+255),c
  9028  0030E8  0E00               	movlw	0
  9029  0030EA  1419               	andwf	___altoft@c+1,w,c
  9030  0030EC  6E1D               	movwf	(??___altoft+1)& (0+255),c
  9031  0030EE  0E00               	movlw	0
  9032  0030F0  141A               	andwf	___altoft@c+2,w,c
  9033  0030F2  6E1E               	movwf	(??___altoft+2)& (0+255),c
  9034  0030F4  0EFF               	movlw	255
  9035  0030F6  141B               	andwf	___altoft@c+3,w,c
  9036  0030F8  6E1F               	movwf	(??___altoft+3)& (0+255),c
  9037  0030FA  501C               	movf	??___altoft,w,c
  9038  0030FC  101D               	iorwf	??___altoft+1,w,c
  9039  0030FE  101E               	iorwf	??___altoft+2,w,c
  9040  003100  101F               	iorwf	??___altoft+3,w,c
  9041  003102  A4D8               	btfss	status,2,c
  9042  003104  D7E8               	goto	l4171
  9043  003106  C018  F010         	movff	___altoft@c,___ftpack@arg
  9044  00310A  C019  F011         	movff	___altoft@c+1,___ftpack@arg+1
  9045  00310E  C01A  F012         	movff	___altoft@c+2,___ftpack@arg+2
  9046  003112  C020  F013         	movff	___altoft@exp,___ftpack@exp
  9047  003116  C021  F014         	movff	___altoft@sign,___ftpack@sign
  9048  00311A  ECDE  F015         	call	___ftpack	;wreg free
  9049  00311E  C010  F018         	movff	?___ftpack,?___altoft
  9050  003122  C011  F019         	movff	?___ftpack+1,?___altoft+1
  9051  003126  C012  F01A         	movff	?___ftpack+2,?___altoft+2
  9052  00312A  0012               	return	
  9053  00312C                     __end_of___altoft:
  9054                           	opt stack 0
  9055                           tblptru	equ	0xFF8
  9056                           tblptrh	equ	0xFF7
  9057                           tblptrl	equ	0xFF6
  9058                           tablat	equ	0xFF5
  9059                           prodh	equ	0xFF4
  9060                           prodl	equ	0xFF3
  9061                           intcon	equ	0xFF2
  9062                           postinc0	equ	0xFEE
  9063                           wreg	equ	0xFE8
  9064                           indf1	equ	0xFE7
  9065                           fsr1h	equ	0xFE2
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function ___ftpack *****************
  9075 ;; Defined at:
  9076 ;;		line 62 in file "D:\mplab\sources\common\float.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  arg             3   15[COMRAM] unsigned um
  9079 ;;  exp             1   18[COMRAM] unsigned char 
  9080 ;;  sign            1   19[COMRAM] unsigned char 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;		None
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  3   15[COMRAM] float 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9092 ;;      Params:         5       0       0       0       0       0       0       0       0
  9093 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9094 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9095 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9096 ;;Total ram usage:        8 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    1
  9099 ;; This function calls:
  9100 ;;		Nothing
  9101 ;; This function is called by:
  9102 ;;		___altoft
  9103 ;;		___awtoft
  9104 ;;		___ftadd
  9105 ;;		___ftdiv
  9106 ;;		___ftmul
  9107 ;;		___lltoft
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           	psect	text39
  9112  002BBC                     __ptext39:
  9113                           	opt stack 0
  9114  002BBC                     ___ftpack:
  9115                           	opt stack 26
  9116                           
  9117                           ;incstack = 0
  9118  002BBC  5013               	movf	___ftpack@exp,w,c
  9119  002BBE  B4D8               	btfsc	status,2,c
  9120  002BC0  D005               	goto	l4131
  9121  002BC2  5010               	movf	___ftpack@arg,w,c
  9122  002BC4  1011               	iorwf	___ftpack@arg+1,w,c
  9123  002BC6  1012               	iorwf	___ftpack@arg+2,w,c
  9124  002BC8  A4D8               	btfss	status,2,c
  9125  002BCA  D00C               	goto	l4137
  9126  002BCC                     l4131:
  9127  002BCC  0E00               	movlw	0
  9128  002BCE  6E10               	movwf	?___ftpack,c
  9129  002BD0  0E00               	movlw	0
  9130  002BD2  6E11               	movwf	?___ftpack+1,c
  9131  002BD4  0E00               	movlw	0
  9132  002BD6  6E12               	movwf	?___ftpack+2,c
  9133  002BD8  0012               	return	
  9134  002BDA                     l4135:
  9135  002BDA  2A13               	incf	___ftpack@exp,f,c
  9136  002BDC  90D8               	bcf	status,0,c
  9137  002BDE  3212               	rrcf	___ftpack@arg+2,f,c
  9138  002BE0  3211               	rrcf	___ftpack@arg+1,f,c
  9139  002BE2  3210               	rrcf	___ftpack@arg,f,c
  9140  002BE4                     l4137:
  9141  002BE4  0E00               	movlw	0
  9142  002BE6  1410               	andwf	___ftpack@arg,w,c
  9143  002BE8  6E15               	movwf	??___ftpack& (0+255),c
  9144  002BEA  0E00               	movlw	0
  9145  002BEC  1411               	andwf	___ftpack@arg+1,w,c
  9146  002BEE  6E16               	movwf	(??___ftpack+1)& (0+255),c
  9147  002BF0  0EFE               	movlw	254
  9148  002BF2  1412               	andwf	___ftpack@arg+2,w,c
  9149  002BF4  6E17               	movwf	(??___ftpack+2)& (0+255),c
  9150  002BF6  5015               	movf	??___ftpack,w,c
  9151  002BF8  1016               	iorwf	??___ftpack+1,w,c
  9152  002BFA  1017               	iorwf	??___ftpack+2,w,c
  9153  002BFC  B4D8               	btfsc	status,2,c
  9154  002BFE  D00C               	goto	l4143
  9155  002C00  D7EC               	goto	l4135
  9156  002C02                     l4139:
  9157  002C02  2A13               	incf	___ftpack@exp,f,c
  9158  002C04  0E01               	movlw	1
  9159  002C06  2610               	addwf	___ftpack@arg,f,c
  9160  002C08  0E00               	movlw	0
  9161  002C0A  2211               	addwfc	___ftpack@arg+1,f,c
  9162  002C0C  0E00               	movlw	0
  9163  002C0E  2212               	addwfc	___ftpack@arg+2,f,c
  9164  002C10  90D8               	bcf	status,0,c
  9165  002C12  3212               	rrcf	___ftpack@arg+2,f,c
  9166  002C14  3211               	rrcf	___ftpack@arg+1,f,c
  9167  002C16  3210               	rrcf	___ftpack@arg,f,c
  9168  002C18                     l4143:
  9169  002C18  0E00               	movlw	0
  9170  002C1A  1410               	andwf	___ftpack@arg,w,c
  9171  002C1C  6E15               	movwf	??___ftpack& (0+255),c
  9172  002C1E  0E00               	movlw	0
  9173  002C20  1411               	andwf	___ftpack@arg+1,w,c
  9174  002C22  6E16               	movwf	(??___ftpack+1)& (0+255),c
  9175  002C24  0EFF               	movlw	255
  9176  002C26  1412               	andwf	___ftpack@arg+2,w,c
  9177  002C28  6E17               	movwf	(??___ftpack+2)& (0+255),c
  9178  002C2A  5015               	movf	??___ftpack,w,c
  9179  002C2C  1016               	iorwf	??___ftpack+1,w,c
  9180  002C2E  1017               	iorwf	??___ftpack+2,w,c
  9181  002C30  B4D8               	btfsc	status,2,c
  9182  002C32  D006               	goto	l4147
  9183  002C34  D7E6               	goto	l4139
  9184  002C36                     l4145:
  9185  002C36  0613               	decf	___ftpack@exp,f,c
  9186  002C38  90D8               	bcf	status,0,c
  9187  002C3A  3610               	rlcf	___ftpack@arg,f,c
  9188  002C3C  3611               	rlcf	___ftpack@arg+1,f,c
  9189  002C3E  3612               	rlcf	___ftpack@arg+2,f,c
  9190  002C40                     l4147:
  9191  002C40  BE11               	btfsc	___ftpack@arg+1,7,c
  9192  002C42  D003               	goto	l690
  9193  002C44  0E02               	movlw	2
  9194  002C46  6013               	cpfslt	___ftpack@exp,c
  9195  002C48  D7F6               	goto	l4145
  9196  002C4A                     l690:
  9197  002C4A  A013               	btfss	___ftpack@exp,0,c
  9198  002C4C  9E11               	bcf	___ftpack@arg+1,7,c
  9199  002C4E  90D8               	bcf	status,0,c
  9200  002C50  3213               	rrcf	___ftpack@exp,f,c
  9201  002C52  5013               	movf	___ftpack@exp,w,c
  9202  002C54  1212               	iorwf	___ftpack@arg+2,f,c
  9203  002C56  5014               	movf	___ftpack@sign,w,c
  9204  002C58  A4D8               	btfss	status,2,c
  9205  002C5A  8E12               	bsf	___ftpack@arg+2,7,c
  9206  002C5C  C010  F010         	movff	___ftpack@arg,?___ftpack
  9207  002C60  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  9208  002C64  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  9209  002C68  0012               	return	
  9210  002C6A                     __end_of___ftpack:
  9211                           	opt stack 0
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           indf1	equ	0xFE7
  9222                           fsr1h	equ	0xFE2
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function _LCD_String_xy *****************
  9232 ;; Defined at:
  9233 ;;		line 57 in file "LCD_20x4_C_file.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  row             1    wreg     unsigned char 
  9236 ;;  pos             1   24[COMRAM] unsigned char 
  9237 ;;  str             2   25[COMRAM] PTR const unsigned char 
  9238 ;;		 -> STR_11(6), STR_8(7), STR_5(6), STR_2(11), 
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  row             1   27[COMRAM] unsigned char 
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9250 ;;      Params:         3       0       0       0       0       0       0       0       0
  9251 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9253 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9254 ;;Total ram usage:        4 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:    4
  9257 ;; This function calls:
  9258 ;;		_LCD_Command
  9259 ;;		_LCD_String
  9260 ;; This function is called by:
  9261 ;;		_main
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text40
  9266  0032D0                     __ptext40:
  9267                           	opt stack 0
  9268  0032D0                     _LCD_String_xy:
  9269                           	opt stack 26
  9270                           
  9271                           ;incstack = 0
  9272                           ;LCD_String_xy@row stored from wreg
  9273  0032D0  6E1C               	movwf	LCD_String_xy@row,c
  9274                           
  9275                           ;LCD_20x4_C_file.c: 59: if (row == 1)
  9276  0032D2  041C               	decf	LCD_String_xy@row,w,c
  9277  0032D4  A4D8               	btfss	status,2,c
  9278  0032D6  D006               	goto	l3873
  9279                           
  9280                           ;LCD_20x4_C_file.c: 60: LCD_Command((pos & 0x0F)|0x80);
  9281  0032D8  5019               	movf	LCD_String_xy@pos,w,c
  9282  0032DA  0B0F               	andlw	15
  9283  0032DC  0980               	iorlw	128
  9284  0032DE  EC52  F01B         	call	_LCD_Command
  9285  0032E2  D01D               	goto	l3885
  9286  0032E4                     l3873:
  9287                           
  9288                           ;LCD_20x4_C_file.c: 61: else if (row == 2)
  9289  0032E4  0E02               	movlw	2
  9290  0032E6  181C               	xorwf	LCD_String_xy@row,w,c
  9291  0032E8  A4D8               	btfss	status,2,c
  9292  0032EA  D006               	goto	l3877
  9293                           
  9294                           ;LCD_20x4_C_file.c: 62: LCD_Command((pos & 0x0F)|0xC0);
  9295  0032EC  5019               	movf	LCD_String_xy@pos,w,c
  9296  0032EE  0B0F               	andlw	15
  9297  0032F0  09C0               	iorlw	192
  9298  0032F2  EC52  F01B         	call	_LCD_Command
  9299  0032F6  D013               	goto	l3885
  9300  0032F8                     l3877:
  9301                           
  9302                           ;LCD_20x4_C_file.c: 63: else if (row == 3)
  9303  0032F8  0E03               	movlw	3
  9304  0032FA  181C               	xorwf	LCD_String_xy@row,w,c
  9305  0032FC  A4D8               	btfss	status,2,c
  9306  0032FE  D006               	goto	l3881
  9307                           
  9308                           ;LCD_20x4_C_file.c: 64: LCD_Command((pos & 0x0F)|0x94);
  9309  003300  5019               	movf	LCD_String_xy@pos,w,c
  9310  003302  0B0F               	andlw	15
  9311  003304  0994               	iorlw	148
  9312  003306  EC52  F01B         	call	_LCD_Command
  9313  00330A  D009               	goto	l3885
  9314  00330C                     l3881:
  9315                           
  9316                           ;LCD_20x4_C_file.c: 65: else if (row == 4)
  9317  00330C  0E04               	movlw	4
  9318  00330E  181C               	xorwf	LCD_String_xy@row,w,c
  9319  003310  A4D8               	btfss	status,2,c
  9320  003312  D005               	goto	l3885
  9321                           
  9322                           ;LCD_20x4_C_file.c: 66: LCD_Command((pos & 0x0F)|0xD4);
  9323  003314  5019               	movf	LCD_String_xy@pos,w,c
  9324  003316  0B0F               	andlw	15
  9325  003318  09D4               	iorlw	212
  9326  00331A  EC52  F01B         	call	_LCD_Command
  9327  00331E                     l3885:
  9328                           
  9329                           ;LCD_20x4_C_file.c: 67: LCD_String(str);
  9330  00331E  C01A  F017         	movff	LCD_String_xy@str,LCD_String@str
  9331  003322  C01B  F018         	movff	LCD_String_xy@str+1,LCD_String@str+1
  9332  003326  ECED  F019         	call	_LCD_String	;wreg free
  9333  00332A  0012               	return		;funcret
  9334  00332C                     __end_of_LCD_String_xy:
  9335                           	opt stack 0
  9336                           tblptru	equ	0xFF8
  9337                           tblptrh	equ	0xFF7
  9338                           tblptrl	equ	0xFF6
  9339                           tablat	equ	0xFF5
  9340                           prodh	equ	0xFF4
  9341                           prodl	equ	0xFF3
  9342                           intcon	equ	0xFF2
  9343                           postinc0	equ	0xFEE
  9344                           wreg	equ	0xFE8
  9345                           indf1	equ	0xFE7
  9346                           fsr1h	equ	0xFE2
  9347                           fsr1l	equ	0xFE1
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           postdec2	equ	0xFDD
  9351                           fsr2h	equ	0xFDA
  9352                           fsr2l	equ	0xFD9
  9353                           status	equ	0xFD8
  9354                           
  9355 ;; *************** function _LCD_String *****************
  9356 ;; Defined at:
  9357 ;;		line 47 in file "LCD_20x4_C_file.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;  str             2   22[COMRAM] PTR const unsigned char 
  9360 ;;		 -> STR_11(6), STR_8(7), STR_5(6), STR_3(3), 
  9361 ;;		 -> Data_Buffer(15), STR_2(11), main@GPS_Buffer(15), 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  i               2    0        int 
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  1    wreg      void 
  9366 ;; Registers used:
  9367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9373 ;;      Params:         2       0       0       0       0       0       0       0       0
  9374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9376 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9377 ;;Total ram usage:        2 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    3
  9380 ;; This function calls:
  9381 ;;		_LCD_Char
  9382 ;; This function is called by:
  9383 ;;		_main
  9384 ;;		_LCD_String_xy
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           	psect	text41
  9389  0033DA                     __ptext41:
  9390                           	opt stack 0
  9391  0033DA                     _LCD_String:
  9392                           	opt stack 26
  9393                           
  9394                           ;LCD_20x4_C_file.c: 49: int i;
  9395                           ;LCD_20x4_C_file.c: 50: while((*str)!=0)
  9396                           
  9397                           ;incstack = 0
  9398  0033DA  D014               	goto	l3751
  9399  0033DC                     l3747:
  9400                           
  9401                           ;LCD_20x4_C_file.c: 51: {
  9402                           ;LCD_20x4_C_file.c: 52: LCD_Char (*str);
  9403  0033DC  C017  FFF6         	movff	LCD_String@str,tblptrl
  9404  0033E0  C018  FFF7         	movff	LCD_String@str+1,tblptrh
  9405  0033E4  6AF8               	clrf	tblptru,c
  9406  0033E6  0E07               	movlw	(high __ramtop+-1)
  9407  0033E8  64F7               	cpfsgt	tblptrh,c
  9408  0033EA  D003               	bra	u4107
  9409  0033EC  0008               	tblrd		*
  9410  0033EE  50F5               	movf	tablat,w,c
  9411  0033F0  D005               	bra	u4100
  9412  0033F2                     u4107:
  9413  0033F2  CFF6 FFE1          	movff	tblptrl,fsr1l
  9414  0033F6  CFF7 FFE2          	movff	tblptrh,fsr1h
  9415  0033FA  50E7               	movf	indf1,w,c
  9416  0033FC                     u4100:
  9417  0033FC  EC43  F01B         	call	_LCD_Char
  9418                           
  9419                           ;LCD_20x4_C_file.c: 53: str++;
  9420  003400  4A17               	infsnz	LCD_String@str,f,c
  9421  003402  2A18               	incf	LCD_String@str+1,f,c
  9422  003404                     l3751:
  9423  003404  C017  FFF6         	movff	LCD_String@str,tblptrl
  9424  003408  C018  FFF7         	movff	LCD_String@str+1,tblptrh
  9425  00340C  6AF8               	clrf	tblptru,c
  9426  00340E  0E07               	movlw	(high __ramtop+-1)
  9427  003410  64F7               	cpfsgt	tblptrh,c
  9428  003412  D003               	bra	u4117
  9429  003414  0008               	tblrd		*
  9430  003416  50F5               	movf	tablat,w,c
  9431  003418  D005               	bra	u4110
  9432  00341A                     u4117:
  9433  00341A  CFF6 FFE1          	movff	tblptrl,fsr1l
  9434  00341E  CFF7 FFE2          	movff	tblptrh,fsr1h
  9435  003422  50E7               	movf	indf1,w,c
  9436  003424                     u4110:
  9437  003424  0900               	iorlw	0
  9438  003426  B4D8               	btfsc	status,2,c
  9439  003428  0012               	return	
  9440  00342A  D7D8               	goto	l3747
  9441  00342C                     __end_of_LCD_String:
  9442                           	opt stack 0
  9443                           tblptru	equ	0xFF8
  9444                           tblptrh	equ	0xFF7
  9445                           tblptrl	equ	0xFF6
  9446                           tablat	equ	0xFF5
  9447                           prodh	equ	0xFF4
  9448                           prodl	equ	0xFF3
  9449                           intcon	equ	0xFF2
  9450                           postinc0	equ	0xFEE
  9451                           wreg	equ	0xFE8
  9452                           indf1	equ	0xFE7
  9453                           fsr1h	equ	0xFE2
  9454                           fsr1l	equ	0xFE1
  9455                           indf2	equ	0xFDF
  9456                           postinc2	equ	0xFDE
  9457                           postdec2	equ	0xFDD
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462 ;; *************** function _LCD_Char *****************
  9463 ;; Defined at:
  9464 ;;		line 22 in file "LCD_20x4_C_file.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  char_data       1    wreg     unsigned char 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  char_data       1   21[COMRAM] unsigned char 
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0
  9479 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9481 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9482 ;;Total ram usage:        1 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    2
  9485 ;; This function calls:
  9486 ;;		_MSdelay
  9487 ;; This function is called by:
  9488 ;;		_LCD_String
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text42
  9493  003686                     __ptext42:
  9494                           	opt stack 0
  9495  003686                     _LCD_Char:
  9496                           	opt stack 26
  9497                           
  9498                           ;incstack = 0
  9499                           ;LCD_Char@char_data stored from wreg
  9500  003686  6E16               	movwf	LCD_Char@char_data,c
  9501                           
  9502                           ;LCD_20x4_C_file.c: 24: LATB = char_data;
  9503  003688  C016  FF8A         	movff	LCD_Char@char_data,3978	;volatile
  9504                           
  9505                           ;LCD_20x4_C_file.c: 25: LATC0 = 1;
  9506  00368C  808B               	bsf	3979,0,c	;volatile
  9507                           
  9508                           ;LCD_20x4_C_file.c: 26: LATC1 = 0;
  9509  00368E  928B               	bcf	3979,1,c	;volatile
  9510                           
  9511                           ;LCD_20x4_C_file.c: 27: LATC2 = 1;
  9512  003690  848B               	bsf	3979,2,c	;volatile
  9513                           
  9514                           ;LCD_20x4_C_file.c: 28: __nop();
  9515  003692  F000               	nop	
  9516                           
  9517                           ;LCD_20x4_C_file.c: 29: LATC2 = 0;
  9518  003694  948B               	bcf	3979,2,c	;volatile
  9519                           
  9520                           ;LCD_20x4_C_file.c: 30: MSdelay(3);
  9521  003696  0E00               	movlw	0
  9522  003698  6E11               	movwf	MSdelay@val+1,c
  9523  00369A  0E03               	movlw	3
  9524  00369C  6E10               	movwf	MSdelay@val,c
  9525  00369E  EC78  F01A         	call	_MSdelay	;wreg free
  9526  0036A2  0012               	return		;funcret
  9527  0036A4                     __end_of_LCD_Char:
  9528                           	opt stack 0
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           prodh	equ	0xFF4
  9534                           prodl	equ	0xFF3
  9535                           intcon	equ	0xFF2
  9536                           postinc0	equ	0xFEE
  9537                           wreg	equ	0xFE8
  9538                           indf1	equ	0xFE7
  9539                           fsr1h	equ	0xFE2
  9540                           fsr1l	equ	0xFE1
  9541                           indf2	equ	0xFDF
  9542                           postinc2	equ	0xFDE
  9543                           postdec2	equ	0xFDD
  9544                           fsr2h	equ	0xFDA
  9545                           fsr2l	equ	0xFD9
  9546                           status	equ	0xFD8
  9547                           
  9548 ;; *************** function _LCD_Init *****************
  9549 ;; Defined at:
  9550 ;;		line 33 in file "LCD_20x4_C_file.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;		None
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;		None
  9555 ;; Return value:  Size  Location     Type
  9556 ;;                  1    wreg      void 
  9557 ;; Registers used:
  9558 ;;		wreg, status,2, status,0, cstack
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0
  9565 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9567 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9568 ;;Total ram usage:        0 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    3
  9571 ;; This function calls:
  9572 ;;		_LCD_Command
  9573 ;;		_MSdelay
  9574 ;; This function is called by:
  9575 ;;		_main
  9576 ;; This function uses a non-reentrant model
  9577 ;;
  9578                           
  9579                           	psect	text43
  9580  003478                     __ptext43:
  9581                           	opt stack 0
  9582  003478                     _LCD_Init:
  9583                           	opt stack 27
  9584                           
  9585                           ;LCD_20x4_C_file.c: 35: TRISC = 0;
  9586                           
  9587                           ;incstack = 0
  9588  003478  0E00               	movlw	0
  9589  00347A  6E94               	movwf	3988,c	;volatile
  9590                           
  9591                           ;LCD_20x4_C_file.c: 36: TRISB = 0;
  9592  00347C  0E00               	movlw	0
  9593  00347E  6E93               	movwf	3987,c	;volatile
  9594                           
  9595                           ;LCD_20x4_C_file.c: 38: MSdelay(20);
  9596  003480  0E00               	movlw	0
  9597  003482  6E11               	movwf	MSdelay@val+1,c
  9598  003484  0E14               	movlw	20
  9599  003486  6E10               	movwf	MSdelay@val,c
  9600  003488  EC78  F01A         	call	_MSdelay	;wreg free
  9601                           
  9602                           ;LCD_20x4_C_file.c: 39: LCD_Command (0x38);
  9603  00348C  0E38               	movlw	56
  9604  00348E  EC52  F01B         	call	_LCD_Command
  9605                           
  9606                           ;LCD_20x4_C_file.c: 40: LCD_Command (0x0C);
  9607  003492  0E0C               	movlw	12
  9608  003494  EC52  F01B         	call	_LCD_Command
  9609                           
  9610                           ;LCD_20x4_C_file.c: 41: LCD_Command (0x06);
  9611  003498  0E06               	movlw	6
  9612  00349A  EC52  F01B         	call	_LCD_Command
  9613                           
  9614                           ;LCD_20x4_C_file.c: 42: LCD_Command (0x01);
  9615  00349E  0E01               	movlw	1
  9616  0034A0  EC52  F01B         	call	_LCD_Command
  9617                           
  9618                           ;LCD_20x4_C_file.c: 43: MSdelay(3);
  9619  0034A4  0E00               	movlw	0
  9620  0034A6  6E11               	movwf	MSdelay@val+1,c
  9621  0034A8  0E03               	movlw	3
  9622  0034AA  6E10               	movwf	MSdelay@val,c
  9623  0034AC  EC78  F01A         	call	_MSdelay	;wreg free
  9624                           
  9625                           ;LCD_20x4_C_file.c: 44: LCD_Command (0x80);
  9626  0034B0  0E80               	movlw	128
  9627  0034B2  EC52  F01B         	call	_LCD_Command
  9628  0034B6  0012               	return		;funcret
  9629  0034B8                     __end_of_LCD_Init:
  9630                           	opt stack 0
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           prodh	equ	0xFF4
  9636                           prodl	equ	0xFF3
  9637                           intcon	equ	0xFF2
  9638                           postinc0	equ	0xFEE
  9639                           wreg	equ	0xFE8
  9640                           indf1	equ	0xFE7
  9641                           fsr1h	equ	0xFE2
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           fsr2h	equ	0xFDA
  9647                           fsr2l	equ	0xFD9
  9648                           status	equ	0xFD8
  9649                           
  9650 ;; *************** function _LCD_Command *****************
  9651 ;; Defined at:
  9652 ;;		line 11 in file "LCD_20x4_C_file.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  cmd             1    wreg     unsigned char 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;  cmd             1   21[COMRAM] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  1    wreg      void 
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0, cstack
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9666 ;;      Params:         0       0       0       0       0       0       0       0       0
  9667 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9668 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9669 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9670 ;;Total ram usage:        1 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    2
  9673 ;; This function calls:
  9674 ;;		_MSdelay
  9675 ;; This function is called by:
  9676 ;;		_LCD_Init
  9677 ;;		_LCD_String_xy
  9678 ;;		_LCD_Clear
  9679 ;; This function uses a non-reentrant model
  9680 ;;
  9681                           
  9682                           	psect	text44
  9683  0036A4                     __ptext44:
  9684                           	opt stack 0
  9685  0036A4                     _LCD_Command:
  9686                           	opt stack 27
  9687                           
  9688                           ;incstack = 0
  9689                           ;LCD_Command@cmd stored from wreg
  9690  0036A4  6E16               	movwf	LCD_Command@cmd,c
  9691                           
  9692                           ;LCD_20x4_C_file.c: 13: LATB = cmd;
  9693  0036A6  C016  FF8A         	movff	LCD_Command@cmd,3978	;volatile
  9694                           
  9695                           ;LCD_20x4_C_file.c: 14: LATC0 = 0;
  9696  0036AA  908B               	bcf	3979,0,c	;volatile
  9697                           
  9698                           ;LCD_20x4_C_file.c: 15: LATC1 = 0;
  9699  0036AC  928B               	bcf	3979,1,c	;volatile
  9700                           
  9701                           ;LCD_20x4_C_file.c: 16: LATC2 = 1;
  9702  0036AE  848B               	bsf	3979,2,c	;volatile
  9703                           
  9704                           ;LCD_20x4_C_file.c: 17: __nop();
  9705  0036B0  F000               	nop	
  9706                           
  9707                           ;LCD_20x4_C_file.c: 18: LATC2 = 0;
  9708  0036B2  948B               	bcf	3979,2,c	;volatile
  9709                           
  9710                           ;LCD_20x4_C_file.c: 19: MSdelay(3);
  9711  0036B4  0E00               	movlw	0
  9712  0036B6  6E11               	movwf	MSdelay@val+1,c
  9713  0036B8  0E03               	movlw	3
  9714  0036BA  6E10               	movwf	MSdelay@val,c
  9715  0036BC  EC78  F01A         	call	_MSdelay	;wreg free
  9716  0036C0  0012               	return		;funcret
  9717  0036C2                     __end_of_LCD_Command:
  9718                           	opt stack 0
  9719                           tblptru	equ	0xFF8
  9720                           tblptrh	equ	0xFF7
  9721                           tblptrl	equ	0xFF6
  9722                           tablat	equ	0xFF5
  9723                           prodh	equ	0xFF4
  9724                           prodl	equ	0xFF3
  9725                           intcon	equ	0xFF2
  9726                           postinc0	equ	0xFEE
  9727                           wreg	equ	0xFE8
  9728                           indf1	equ	0xFE7
  9729                           fsr1h	equ	0xFE2
  9730                           fsr1l	equ	0xFE1
  9731                           indf2	equ	0xFDF
  9732                           postinc2	equ	0xFDE
  9733                           postdec2	equ	0xFDD
  9734                           fsr2h	equ	0xFDA
  9735                           fsr2l	equ	0xFD9
  9736                           status	equ	0xFD8
  9737                           
  9738 ;; *************** function _MSdelay *****************
  9739 ;; Defined at:
  9740 ;;		line 78 in file "LCD_20x4_C_file.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;  val             2   15[COMRAM] unsigned int 
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;  j               2   19[COMRAM] unsigned int 
  9745 ;;  i               2   17[COMRAM] unsigned int 
  9746 ;; Return value:  Size  Location     Type
  9747 ;;                  1    wreg      void 
  9748 ;; Registers used:
  9749 ;;		wreg, status,2, status,0
  9750 ;; Tracked objects:
  9751 ;;		On entry : 0/0
  9752 ;;		On exit  : 0/0
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9755 ;;      Params:         2       0       0       0       0       0       0       0       0
  9756 ;;      Locals:         4       0       0       0       0       0       0       0       0
  9757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9758 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9759 ;;Total ram usage:        6 bytes
  9760 ;; Hardware stack levels used:    1
  9761 ;; Hardware stack levels required when called:    1
  9762 ;; This function calls:
  9763 ;;		Nothing
  9764 ;; This function is called by:
  9765 ;;		_LCD_Command
  9766 ;;		_LCD_Char
  9767 ;;		_LCD_Init
  9768 ;;		_LCD_Clear
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           	psect	text45
  9773  0034F0                     __ptext45:
  9774                           	opt stack 0
  9775  0034F0                     _MSdelay:
  9776                           	opt stack 26
  9777                           
  9778                           ;LCD_20x4_C_file.c: 80: unsigned int i,j;
  9779                           ;LCD_20x4_C_file.c: 81: for(i=0;i<val;i++)
  9780                           
  9781                           ;incstack = 0
  9782  0034F0  0E00               	movlw	0
  9783  0034F2  6E13               	movwf	MSdelay@i+1,c
  9784  0034F4  0E00               	movlw	0
  9785  0034F6  6E12               	movwf	MSdelay@i,c
  9786  0034F8  D00F               	goto	l2701
  9787  0034FA                     l2689:
  9788                           
  9789                           ;LCD_20x4_C_file.c: 82: for(j=0;j<165;j++);
  9790  0034FA  0E00               	movlw	0
  9791  0034FC  6E15               	movwf	MSdelay@j+1,c
  9792  0034FE  0E00               	movlw	0
  9793  003500  6E14               	movwf	MSdelay@j,c
  9794  003502                     l2691:
  9795  003502  5015               	movf	MSdelay@j+1,w,c
  9796  003504  E107               	bnz	l2699
  9797  003506  0EA5               	movlw	165
  9798  003508  5C14               	subwf	MSdelay@j,w,c
  9799  00350A  B0D8               	btfsc	status,0,c
  9800  00350C  D003               	goto	l2699
  9801  00350E  4A14               	infsnz	MSdelay@j,f,c
  9802  003510  2A15               	incf	MSdelay@j+1,f,c
  9803  003512  D7F7               	goto	l2691
  9804  003514                     l2699:
  9805  003514  4A12               	infsnz	MSdelay@i,f,c
  9806  003516  2A13               	incf	MSdelay@i+1,f,c
  9807  003518                     l2701:
  9808  003518  5010               	movf	MSdelay@val,w,c
  9809  00351A  5C12               	subwf	MSdelay@i,w,c
  9810  00351C  5011               	movf	MSdelay@val+1,w,c
  9811  00351E  5813               	subwfb	MSdelay@i+1,w,c
  9812  003520  B0D8               	btfsc	status,0,c
  9813  003522  0012               	return	
  9814  003524  D7EA               	goto	l2689
  9815  003526                     __end_of_MSdelay:
  9816                           	opt stack 0
  9817                           tblptru	equ	0xFF8
  9818                           tblptrh	equ	0xFF7
  9819                           tblptrl	equ	0xFF6
  9820                           tablat	equ	0xFF5
  9821                           prodh	equ	0xFF4
  9822                           prodl	equ	0xFF3
  9823                           intcon	equ	0xFF2
  9824                           postinc0	equ	0xFEE
  9825                           wreg	equ	0xFE8
  9826                           indf1	equ	0xFE7
  9827                           fsr1h	equ	0xFE2
  9828                           fsr1l	equ	0xFE1
  9829                           indf2	equ	0xFDF
  9830                           postinc2	equ	0xFDE
  9831                           postdec2	equ	0xFDD
  9832                           fsr2h	equ	0xFDA
  9833                           fsr2l	equ	0xFD9
  9834                           status	equ	0xFD8
  9835                           
  9836 ;; *************** function _ADC_Read *****************
  9837 ;; Defined at:
  9838 ;;		line 167 in file "GPS.c"
  9839 ;; Parameters:    Size  Location     Type
  9840 ;;  channel         2   15[COMRAM] int 
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  digital         2   21[COMRAM] int 
  9843 ;; Return value:  Size  Location     Type
  9844 ;;                  2   15[COMRAM] int 
  9845 ;; Registers used:
  9846 ;;		wreg, status,2, status,0
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9852 ;;      Params:         2       0       0       0       0       0       0       0       0
  9853 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9854 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9855 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9856 ;;Total ram usage:        8 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    1
  9859 ;; This function calls:
  9860 ;;		Nothing
  9861 ;; This function is called by:
  9862 ;;		_main
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text46
  9867  00303A                     __ptext46:
  9868                           	opt stack 0
  9869  00303A                     _ADC_Read:
  9870                           	opt stack 29
  9871                           
  9872                           ;GPS.c: 169: int digital;
  9873                           ;GPS.c: 172: ADCON0 =(ADCON0 & 0b11000011)|((channel<<2) & 0b00111100);
  9874                           
  9875                           ;incstack = 0
  9876  00303A  C010  F012         	movff	ADC_Read@channel,??_ADC_Read
  9877  00303E  90D8               	bcf	status,0,c
  9878  003040  3612               	rlcf	??_ADC_Read,f,c
  9879  003042  90D8               	bcf	status,0,c
  9880  003044  3612               	rlcf	??_ADC_Read,f,c
  9881  003046  0E3C               	movlw	60
  9882  003048  1612               	andwf	??_ADC_Read,f,c
  9883  00304A  50C2               	movf	4034,w,c	;volatile
  9884  00304C  0BC3               	andlw	195
  9885  00304E  1012               	iorwf	??_ADC_Read,w,c
  9886  003050  6EC2               	movwf	4034,c	;volatile
  9887                           
  9888                           ;GPS.c: 174: ADCON0 |= ((1<<ADON)|(1<<GO));
  9889  003052  A2C2               	btfss	4034,1,c	;volatile
  9890  003054  D003               	goto	u4210
  9891  003056  6A12               	clrf	??_ADC_Read& (0+255),c
  9892  003058  2A12               	incf	??_ADC_Read& (0+255),f,c
  9893  00305A  D001               	goto	u4228
  9894  00305C                     u4210:
  9895  00305C  6A12               	clrf	??_ADC_Read& (0+255),c
  9896  00305E                     u4228:
  9897  00305E  0E01               	movlw	1
  9898  003060  6E13               	movwf	(??_ADC_Read+1)& (0+255),c
  9899  003062  2A12               	incf	??_ADC_Read,f,c
  9900  003064  D002               	goto	u4234
  9901  003066                     u4235:
  9902  003066  90D8               	bcf	status,0,c
  9903  003068  3613               	rlcf	??_ADC_Read+1,f,c
  9904  00306A                     u4234:
  9905  00306A  2E12               	decfsz	??_ADC_Read,f,c
  9906  00306C  D7FC               	goto	u4235
  9907  00306E  A0C2               	btfss	4034,0,c	;volatile
  9908  003070  D003               	goto	u4240
  9909  003072  6A14               	clrf	(??_ADC_Read+2)& (0+255),c
  9910  003074  2A14               	incf	(??_ADC_Read+2)& (0+255),f,c
  9911  003076  D001               	goto	u4258
  9912  003078                     u4240:
  9913  003078  6A14               	clrf	(??_ADC_Read+2)& (0+255),c
  9914  00307A                     u4258:
  9915  00307A  0E01               	movlw	1
  9916  00307C  6E15               	movwf	(??_ADC_Read+3)& (0+255),c
  9917  00307E  2A14               	incf	??_ADC_Read+2,f,c
  9918  003080  D002               	goto	u4264
  9919  003082                     u4265:
  9920  003082  90D8               	bcf	status,0,c
  9921  003084  3615               	rlcf	??_ADC_Read+3,f,c
  9922  003086                     u4264:
  9923  003086  2E14               	decfsz	??_ADC_Read+2,f,c
  9924  003088  D7FC               	goto	u4265
  9925  00308A  5015               	movf	??_ADC_Read+3,w,c
  9926  00308C  1013               	iorwf	??_ADC_Read+1,w,c
  9927  00308E  12C2               	iorwf	4034,f,c	;volatile
  9928  003090                     l116:
  9929  003090  B2C2               	btfsc	4034,1,c	;volatile
  9930  003092  D7FE               	goto	l116
  9931                           
  9932                           ;GPS.c: 179: digital = (ADRESH*256) | (ADRESL);
  9933  003094  50C3               	movf	4035,w,c	;volatile
  9934  003096  CFC4 F012          	movff	4036,??_ADC_Read	;volatile
  9935  00309A  6A13               	clrf	(??_ADC_Read+1)& (0+255),c
  9936  00309C  C012  F013         	movff	??_ADC_Read,??_ADC_Read+1
  9937  0030A0  6A12               	clrf	??_ADC_Read,c
  9938  0030A2  1012               	iorwf	??_ADC_Read,w,c
  9939  0030A4  6E16               	movwf	ADC_Read@digital,c
  9940  0030A6  5013               	movf	??_ADC_Read+1,w,c
  9941  0030A8  6E17               	movwf	ADC_Read@digital+1,c
  9942                           
  9943                           ;GPS.c: 180: return(digital);
  9944  0030AA  C016  F010         	movff	ADC_Read@digital,?_ADC_Read
  9945  0030AE  C017  F011         	movff	ADC_Read@digital+1,?_ADC_Read+1
  9946  0030B2  0012               	return	
  9947  0030B4                     __end_of_ADC_Read:
  9948                           	opt stack 0
  9949                           tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           intcon	equ	0xFF2
  9956                           postinc0	equ	0xFEE
  9957                           wreg	equ	0xFE8
  9958                           indf1	equ	0xFE7
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           postdec2	equ	0xFDD
  9964                           fsr2h	equ	0xFDA
  9965                           fsr2l	equ	0xFD9
  9966                           status	equ	0xFD8
  9967                           
  9968 ;; *************** function _ADC_Init *****************
  9969 ;; Defined at:
  9970 ;;		line 158 in file "GPS.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;		None
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;                  1    wreg      void 
  9977 ;; Registers used:
  9978 ;;		wreg, status,2
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9984 ;;      Params:         0       0       0       0       0       0       0       0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9987 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9988 ;;Total ram usage:        0 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    1
  9991 ;; This function calls:
  9992 ;;		Nothing
  9993 ;; This function is called by:
  9994 ;;		_main
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           	psect	text47
  9999  0036C2                     __ptext47:
 10000                           	opt stack 0
 10001  0036C2                     _ADC_Init:
 10002                           	opt stack 29
 10003                           
 10004                           ;GPS.c: 160: TRISA = 0xFF;
 10005                           
 10006                           ;incstack = 0
 10007  0036C2  6892               	setf	3986,c	;volatile
 10008                           
 10009                           ;GPS.c: 161: ADCON1 = 0x0E;
 10010  0036C4  0E0E               	movlw	14
 10011  0036C6  6EC1               	movwf	4033,c	;volatile
 10012                           
 10013                           ;GPS.c: 162: ADCON2 = 0x92;
 10014  0036C8  0E92               	movlw	146
 10015  0036CA  6EC0               	movwf	4032,c	;volatile
 10016                           
 10017                           ;GPS.c: 163: ADRESH=0;
 10018  0036CC  0E00               	movlw	0
 10019  0036CE  6EC4               	movwf	4036,c	;volatile
 10020                           
 10021                           ;GPS.c: 164: ADRESL=0;
 10022  0036D0  0E00               	movlw	0
 10023  0036D2  6EC3               	movwf	4035,c	;volatile
 10024  0036D4  0012               	return		;funcret
 10025  0036D6                     __end_of_ADC_Init:
 10026                           	opt stack 0
 10027                           tblptru	equ	0xFF8
 10028                           tblptrh	equ	0xFF7
 10029                           tblptrl	equ	0xFF6
 10030                           tablat	equ	0xFF5
 10031                           prodh	equ	0xFF4
 10032                           prodl	equ	0xFF3
 10033                           intcon	equ	0xFF2
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           indf1	equ	0xFE7
 10037                           fsr1h	equ	0xFE2
 10038                           fsr1l	equ	0xFE1
 10039                           indf2	equ	0xFDF
 10040                           postinc2	equ	0xFDE
 10041                           postdec2	equ	0xFDD
 10042                           fsr2h	equ	0xFDA
 10043                           fsr2l	equ	0xFD9
 10044                           status	equ	0xFD8
 10045                           
 10046 ;; *************** function _Serial_ISR *****************
 10047 ;; Defined at:
 10048 ;;		line 283 in file "GPS.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;  received_cha    1   14[COMRAM] unsigned char 
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      void 
 10055 ;; Registers used:
 10056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0
 10063 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10064 ;;      Temps:         14       0       0       0       0       0       0       0       0
 10065 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10066 ;;Total ram usage:       15 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; This function calls:
 10069 ;;		Nothing
 10070 ;; This function is called by:
 10071 ;;		Interrupt level 2
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	intcode
 10076  000008                     __pintcode:
 10077                           	opt stack 0
 10078  000008                     _Serial_ISR:
 10079                           	opt stack 25
 10080                           
 10081                           ;incstack = 0
 10082  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10083  00000A  EDF9  F010         	call	int_func,f	;refresh shadow registers
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           intcon	equ	0xFF2
 10091                           postinc0	equ	0xFEE
 10092                           wreg	equ	0xFE8
 10093                           indf1	equ	0xFE7
 10094                           fsr1h	equ	0xFE2
 10095                           fsr1l	equ	0xFE1
 10096                           indf2	equ	0xFDF
 10097                           postinc2	equ	0xFDE
 10098                           postdec2	equ	0xFDD
 10099                           fsr2h	equ	0xFDA
 10100                           fsr2l	equ	0xFD9
 10101                           status	equ	0xFD8
 10102                           
 10103                           	psect	intcode_body
 10104  0021F2                     __pintcode_body:
 10105                           	opt stack 25
 10106  0021F2                     int_func:
 10107                           	opt stack 25
 10108  0021F2  0006               	pop		; remove dummy address from shadow register refresh
 10109  0021F4  CFFA F001          	movff	pclath,??_Serial_ISR
 10110  0021F8  CFFB F002          	movff	pclatu,??_Serial_ISR+1
 10111  0021FC  CFE9 F003          	movff	fsr0l,??_Serial_ISR+2
 10112  002200  CFEA F004          	movff	fsr0h,??_Serial_ISR+3
 10113  002204  CFE1 F005          	movff	fsr1l,??_Serial_ISR+4
 10114  002208  CFE2 F006          	movff	fsr1h,??_Serial_ISR+5
 10115  00220C  CFD9 F007          	movff	fsr2l,??_Serial_ISR+6
 10116  002210  CFDA F008          	movff	fsr2h,??_Serial_ISR+7
 10117  002214  CFF3 F009          	movff	prodl,??_Serial_ISR+8
 10118  002218  CFF4 F00A          	movff	prodh,??_Serial_ISR+9
 10119  00221C  CFF6 F00B          	movff	tblptrl,??_Serial_ISR+10
 10120  002220  CFF7 F00C          	movff	tblptrh,??_Serial_ISR+11
 10121  002224  CFF8 F00D          	movff	tblptru,??_Serial_ISR+12
 10122  002228  CFF5 F00E          	movff	tablat,??_Serial_ISR+13
 10123                           
 10124                           ;GPS.c: 288: if(RCIF){
 10125  00222C  AA9E               	btfss	3998,5,c	;volatile
 10126  00222E  D060               	goto	i2l167
 10127                           
 10128                           ;GPS.c: 289: GIE = 0;
 10129  002230  9EF2               	bcf	intcon,7,c	;volatile
 10130                           
 10131                           ;GPS.c: 290: unsigned char received_char = RCREG;
 10132  002232  CFAE F00F          	movff	4014,Serial_ISR@received_char	;volatile
 10133                           
 10134                           ;GPS.c: 291: if(RCSTAbits.OERR){
 10135  002236  A2AB               	btfss	4011,1,c	;volatile
 10136  002238  D003               	goto	i2l4095
 10137                           
 10138                           ;GPS.c: 292: CREN = 0;
 10139  00223A  98AB               	bcf	4011,4,c	;volatile
 10140                           
 10141                           ;GPS.c: 293: __nop();
 10142  00223C  F000               	nop	
 10143                           
 10144                           ;GPS.c: 294: CREN=1;
 10145  00223E  88AB               	bsf	4011,4,c	;volatile
 10146  002240                     i2l4095:
 10147                           
 10148                           ;GPS.c: 295: }
 10149                           ;GPS.c: 297: if(received_char =='$'){
 10150  002240  0E24               	movlw	36
 10151  002242  180F               	xorwf	Serial_ISR@received_char,w,c
 10152  002244  A4D8               	btfss	status,2,c
 10153  002246  D00D               	goto	i2l4099
 10154                           
 10155                           ;GPS.c: 298: GGA_Index = 0;
 10156  002248  0E00               	movlw	0
 10157  00224A  6E4A               	movwf	_GGA_Index+1,c	;volatile
 10158  00224C  0E00               	movlw	0
 10159  00224E  6E49               	movwf	_GGA_Index,c	;volatile
 10160                           
 10161                           ;GPS.c: 299: IsItGGAString = 0;
 10162  002250  0E00               	movlw	0
 10163  002252  0100               	movlb	0	; () banked
 10164  002254  6FD7               	movwf	_IsItGGAString& (0+255),b	;volatile
 10165                           
 10166                           ;GPS.c: 300: IsLastEndGGA = 0;
 10167  002256  0E00               	movlw	0
 10168  002258  6E4B               	movwf	_IsLastEndGGA,c	;volatile
 10169                           
 10170                           ;GPS.c: 301: CommaCounter = 0;
 10171  00225A  0E00               	movlw	0
 10172  00225C  6E4D               	movwf	_CommaCounter,c
 10173                           
 10174                           ;GPS.c: 302: IsEndGGA = 0;
 10175  00225E  0E00               	movlw	0
 10176  002260  D026               	goto	L6
 10177  002262                     i2l4099:
 10178                           
 10179                           ;GPS.c: 304: else if(IsItGGAString == 1){
 10180  002262  0100               	movlb	0	; () banked
 10181  002264  05D7               	decf	_IsItGGAString& (0+255),w,b	;volatile
 10182  002266  A4D8               	btfss	status,2,c
 10183  002268  D027               	goto	i2l4117
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;GPS.c: 305: if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;
 10187  00226A  0E2C               	movlw	44
 10188  00226C  180F               	xorwf	Serial_ISR@received_char,w,c
 10189  00226E  A4D8               	btfss	status,2,c
 10190  002270  D00B               	goto	i2l4107
 10191                           
 10192                           ; BSR set to: 0
 10193  002272  504D               	movf	_CommaCounter,w,c
 10194  002274  0D01               	mullw	1
 10195  002276  0EC0               	movlw	low _GGA_Pointers
 10196  002278  24F3               	addwf	prodl,w,c
 10197  00227A  6ED9               	movwf	fsr2l,c
 10198  00227C  0E00               	movlw	high _GGA_Pointers
 10199  00227E  20F4               	addwfc	prodh,w,c
 10200  002280  6EDA               	movwf	fsr2h,c
 10201  002282  C049  FFDF         	movff	_GGA_Index,indf2	;volatile
 10202                           
 10203                           ; BSR set to: 0
 10204  002286  2A4D               	incf	_CommaCounter,f,c
 10205  002288                     i2l4107:
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;GPS.c: 306: GGA_Buffer[GGA_Index++] = received_char;
 10209  002288  0E00               	movlw	low _GGA_Buffer
 10210  00228A  2449               	addwf	_GGA_Index,w,c	;volatile
 10211  00228C  6ED9               	movwf	fsr2l,c
 10212  00228E  0E01               	movlw	high _GGA_Buffer
 10213  002290  204A               	addwfc	_GGA_Index+1,w,c	;volatile
 10214  002292  6EDA               	movwf	fsr2h,c
 10215  002294  C00F  FFDF         	movff	Serial_ISR@received_char,indf2
 10216                           
 10217                           ; BSR set to: 0
 10218  002298  4A49               	infsnz	_GGA_Index,f,c	;volatile
 10219  00229A  2A4A               	incf	_GGA_Index+1,f,c	;volatile
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;GPS.c: 307: if(received_char == '\n'){
 10223  00229C  0E0A               	movlw	10
 10224  00229E  180F               	xorwf	Serial_ISR@received_char,w,c
 10225  0022A0  A4D8               	btfss	status,2,c
 10226  0022A2  D007               	goto	i2l161
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;GPS.c: 308: if (IsLastEndGGA == '\r'){
 10230  0022A4  0E0D               	movlw	13
 10231  0022A6  184B               	xorwf	_IsLastEndGGA,w,c	;volatile
 10232  0022A8  A4D8               	btfss	status,2,c
 10233  0022AA  D022               	goto	i2l167
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;GPS.c: 309: IsEndGGA = 1;
 10237  0022AC  0E01               	movlw	1
 10238  0022AE                     L6:
 10239  0022AE  6E4C               	movwf	_IsEndGGA,c	;volatile
 10240                           
 10241                           ; BSR set to: 0
 10242                           ;GPS.c: 310: }
 10243                           ;GPS.c: 311: }
 10244  0022B0  D01F               	goto	i2l167
 10245  0022B2                     i2l161:
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;GPS.c: 312: else{
 10249                           ;GPS.c: 313: IsLastEndGGA = received_char;
 10250  0022B2  C00F  F04B         	movff	Serial_ISR@received_char,_IsLastEndGGA	;volatile
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;GPS.c: 314: }
 10254                           ;GPS.c: 315: }
 10255  0022B6  D01C               	goto	i2l167
 10256  0022B8                     i2l4117:
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;GPS.c: 316: else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){
 10260  0022B8  0E47               	movlw	71
 10261  0022BA  1846               	xorwf	_GGA_CODE,w,c
 10262  0022BC  A4D8               	btfss	status,2,c
 10263  0022BE  D012               	goto	i2l165
 10264                           
 10265                           ; BSR set to: 0
 10266  0022C0  0E47               	movlw	71
 10267  0022C2  1847               	xorwf	_GGA_CODE+1,w,c
 10268  0022C4  A4D8               	btfss	status,2,c
 10269  0022C6  D00E               	goto	i2l165
 10270                           
 10271                           ; BSR set to: 0
 10272  0022C8  0E41               	movlw	65
 10273  0022CA  1848               	xorwf	_GGA_CODE+2,w,c
 10274  0022CC  A4D8               	btfss	status,2,c
 10275  0022CE  D00A               	goto	i2l165
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;GPS.c: 317: IsItGGAString = 1;
 10279  0022D0  0E01               	movlw	1
 10280  0022D2  0100               	movlb	0	; () banked
 10281  0022D4  6FD7               	movwf	_IsItGGAString& (0+255),b	;volatile
 10282                           
 10283                           ;GPS.c: 318: GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
 10284  0022D6  0E00               	movlw	0
 10285  0022D8  6E46               	movwf	_GGA_CODE,c
 10286  0022DA  0E00               	movlw	0
 10287  0022DC  6E47               	movwf	_GGA_CODE+1,c
 10288  0022DE  0E00               	movlw	0
 10289  0022E0  6E48               	movwf	_GGA_CODE+2,c
 10290                           
 10291                           ;GPS.c: 319: }
 10292  0022E2  D006               	goto	i2l167
 10293  0022E4                     i2l165:
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;GPS.c: 320: else{
 10297                           ;GPS.c: 321: GGA_CODE[0] = GGA_CODE[1]; GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = receive
      +                          d_char;
 10298  0022E4  C047  F046         	movff	_GGA_CODE+1,_GGA_CODE
 10299  0022E8  C048  F047         	movff	_GGA_CODE+2,_GGA_CODE+1
 10300  0022EC  C00F  F048         	movff	Serial_ISR@received_char,_GGA_CODE+2
 10301  0022F0                     i2l167:
 10302  0022F0  C00E  FFF5         	movff	??_Serial_ISR+13,tablat
 10303  0022F4  C00D  FFF8         	movff	??_Serial_ISR+12,tblptru
 10304  0022F8  C00C  FFF7         	movff	??_Serial_ISR+11,tblptrh
 10305  0022FC  C00B  FFF6         	movff	??_Serial_ISR+10,tblptrl
 10306  002300  C00A  FFF4         	movff	??_Serial_ISR+9,prodh
 10307  002304  C009  FFF3         	movff	??_Serial_ISR+8,prodl
 10308  002308  C008  FFDA         	movff	??_Serial_ISR+7,fsr2h
 10309  00230C  C007  FFD9         	movff	??_Serial_ISR+6,fsr2l
 10310  002310  C006  FFE2         	movff	??_Serial_ISR+5,fsr1h
 10311  002314  C005  FFE1         	movff	??_Serial_ISR+4,fsr1l
 10312  002318  C004  FFEA         	movff	??_Serial_ISR+3,fsr0h
 10313  00231C  C003  FFE9         	movff	??_Serial_ISR+2,fsr0l
 10314  002320  C002  FFFB         	movff	??_Serial_ISR+1,pclatu
 10315  002324  C001  FFFA         	movff	??_Serial_ISR,pclath
 10316  002328  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10317  00232A  0011               	retfie		f
 10318  00232C                     __end_of_Serial_ISR:
 10319                           	opt stack 0
 10320                           pclatu	equ	0xFFB
 10321                           pclath	equ	0xFFA
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           prodh	equ	0xFF4
 10327                           prodl	equ	0xFF3
 10328                           intcon	equ	0xFF2
 10329                           postinc0	equ	0xFEE
 10330                           fsr0h	equ	0xFEA
 10331                           fsr0l	equ	0xFE9
 10332                           wreg	equ	0xFE8
 10333                           indf1	equ	0xFE7
 10334                           fsr1h	equ	0xFE2
 10335                           fsr1l	equ	0xFE1
 10336                           indf2	equ	0xFDF
 10337                           postinc2	equ	0xFDE
 10338                           postdec2	equ	0xFDD
 10339                           fsr2h	equ	0xFDA
 10340                           fsr2l	equ	0xFD9
 10341                           status	equ	0xFD8
 10342                           pclatu	equ	0xFFB
 10343                           pclath	equ	0xFFA
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           intcon	equ	0xFF2
 10351                           postinc0	equ	0xFEE
 10352                           fsr0h	equ	0xFEA
 10353                           fsr0l	equ	0xFE9
 10354                           wreg	equ	0xFE8
 10355                           indf1	equ	0xFE7
 10356                           fsr1h	equ	0xFE2
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           postdec2	equ	0xFDD
 10361                           fsr2h	equ	0xFDA
 10362                           fsr2l	equ	0xFD9
 10363                           status	equ	0xFD8
 10364                           
 10365                           	psect	rparam
 10366  0000                     pclatu	equ	0xFFB
 10367                           pclath	equ	0xFFA
 10368                           tblptru	equ	0xFF8
 10369                           tblptrh	equ	0xFF7
 10370                           tblptrl	equ	0xFF6
 10371                           tablat	equ	0xFF5
 10372                           prodh	equ	0xFF4
 10373                           prodl	equ	0xFF3
 10374                           intcon	equ	0xFF2
 10375                           postinc0	equ	0xFEE
 10376                           fsr0h	equ	0xFEA
 10377                           fsr0l	equ	0xFE9
 10378                           wreg	equ	0xFE8
 10379                           indf1	equ	0xFE7
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389                           	psect	temp
 10390  000050                     btemp:
 10391                           	opt stack 0
 10392  000050                     	ds	1
 10393  0000                     int$flags	set	btemp
 10394                           pclatu	equ	0xFFB
 10395                           pclath	equ	0xFFA
 10396                           tblptru	equ	0xFF8
 10397                           tblptrh	equ	0xFF7
 10398                           tblptrl	equ	0xFF6
 10399                           tablat	equ	0xFF5
 10400                           prodh	equ	0xFF4
 10401                           prodl	equ	0xFF3
 10402                           intcon	equ	0xFF2
 10403                           postinc0	equ	0xFEE
 10404                           fsr0h	equ	0xFEA
 10405                           fsr0l	equ	0xFE9
 10406                           wreg	equ	0xFE8
 10407                           indf1	equ	0xFE7
 10408                           fsr1h	equ	0xFE2
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    118
    Data        0
    BSS         189
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      79
    BANK0           160     96     145
    BANK1           256      0     130
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK0[15]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_13(CODE[3]), STR_10(CODE[2]), STR_7(CODE[2]), STR_4(CODE[2]), 
		 -> main@GPS_Buffer(BANK0[15]), Temperature(BANK0[10]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    memset@p1	PTR void  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 

    memset@p	PTR unsigned char  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_gpstime@Time_Buffer(COMRAM[15]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK0[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 15
		 -> get_altitude@Alt_Buffer(BANK0[12]), get_longitude@Long_Buffer(BANK0[15]), get_latitude@Lat_Buffer(BANK0[15]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_14(CODE[9]), STR_12(CODE[5]), STR_9(CODE[6]), STR_6(CODE[6]), 
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> Data_Buffer(BANK0[15]), main@GPS_Buffer(BANK0[15]), Temperature(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_SendString@out	PTR const unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    LCD_String_xy@str	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_11(CODE[6]), STR_8(CODE[7]), STR_5(CODE[6]), STR_2(CODE[11]), 

    LCD_String@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_11(CODE[6]), STR_8(CODE[7]), STR_5(CODE[6]), STR_3(CODE[3]), 
		 -> Data_Buffer(BANK0[15]), STR_2(CODE[11]), main@GPS_Buffer(BANK0[15]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 50
		 -> stringBT(BANK1[50]), 

    sp__memset	PTR void  size(2) Largest target is 15
		 -> main@GPS_Buffer(BANK0[15]), 


Critical Paths under _main in COMRAM

    _main->_get_altitude
    _main->_get_latitude
    _main->_get_longitude
    _get_longitude->_atof
    _get_latitude->_atof
    _get_gpstime->_atol
    _atol->___lmul
    _get_altitude->_atof
    _atof->_strtod
    _strtod->___ftneg
    _convert_to_degrees->___ftadd
    ___awtoft->_ADC_Read
    ___awtoft->___ftpack
    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___lldiv->___llmod
    ___ftsub->___ftadd
    ___ftneg->___ftmul
    _USART_SendString->_USART_TxChar
    _USART_Init->___ftadd
    ___fttol->_scale
    ___ftdiv->___altoft
    ___ftadd->_fround
    ___altoft->___ftpack
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _Serial_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_convert_time_to_UTC
    _convert_to_degrees->___fttol
    _convert_time_to_UTC->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd
    _USART_Init->___fttol

Critical Paths under _Serial_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Serial_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Serial_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Serial_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Serial_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Serial_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Serial_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Serial_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0  218811
                                             66 BANK0     30    30      0
                           _ADC_Init
                           _ADC_Read
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                         _USART_Init
                   _USART_SendString
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                _convert_time_to_UTC
                 _convert_to_degrees
                       _get_altitude
                        _get_gpstime
                       _get_latitude
                      _get_longitude
                             _memset
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     203
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     994
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     672
                                             15 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _get_longitude                                       25    22      3   17247
                                             68 COMRAM     1     1      0
                                              0 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_latitude                                        25    22      3   17247
                                             68 COMRAM     1     1      0
                                              0 BANK0     24    21      3
                               _atof
 ---------------------------------------------------------------------------------
 (1) _get_gpstime                                         25    21      4    1043
                                             41 COMRAM    25    21      4
                               _atol
 ---------------------------------------------------------------------------------
 (2) _atol                                                14    10      4     902
                                             27 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _get_altitude                                        22    19      3   17213
                                             68 COMRAM     1     1      0
                                              0 BANK0     21    18      3
                               _atof
 ---------------------------------------------------------------------------------
 (2) _atof                                                 3     0      3   16930
                                             65 COMRAM     3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (3) _strtod                                              12     8      4   16668
                                             53 COMRAM    12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (4) _isspace                                              3     3      0      90
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     450
                                             15 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _convert_to_degrees                                  17    14      3   19282
                                              6 BANK0     14    11      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2948
                                             23 COMRAM     4     1      3
                           _ADC_Read (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _convert_time_to_UTC                                 14    10      4   57775
                                             52 BANK0     14    10      4
                            ___lldiv
                            ___llmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   55612
                                              9 BANK0     43    33     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12172
                                             50 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11893
                                             50 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             29 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6112
                                             35 COMRAM    15     9      6
                           _ADC_Read (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                             21 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             15 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             15 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2763
                                             23 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1055
                                             15 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     802
                                             24 COMRAM    13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5057
                                              3 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             50 COMRAM     3     0      3
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                             15 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                     2     0      2     131
                                             16 COMRAM     2     0      2
                       _USART_TxChar
 ---------------------------------------------------------------------------------
 (2) _USART_TxChar                                         1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4   12652
                                              6 BANK0      7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     833
                                             57 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4042
                                             33 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4693
                                             60 COMRAM     9     3      6
                                              0 BANK0      3     3      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2942
                                             23 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2584
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        4     1      3    2135
                                             24 COMRAM     4     1      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           4     2      2     927
                                             22 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     498
                                             21 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     974
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     498
                                             21 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     476
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             8     6      2     109
                                             15 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Serial_ISR                                          15    15      0     133
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _USART_SendString
     _USART_TxChar
   ___awtoft
     _ADC_Read (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     _ADC_Read (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       _ADC_Read (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul (ARG)
       _ADC_Read (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _convert_time_to_UTC
     ___lldiv
       ___llmod (ARG)
     ___llmod
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               _ADC_Read (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _ADC_Read (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               _ADC_Read (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _ADC_Read (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
         ___llmod (ARG)
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _convert_to_degrees
     ___awtoft
       _ADC_Read (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       _ADC_Read (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _get_altitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_gpstime
     _atol
       ___lmul
       _isdigit
   _get_latitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _get_longitude
     _atof
       _strtod
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
         _isdigit
         _isspace
   _memset
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       _ADC_Read (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___awtoft (ARG)
         _ADC_Read (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ADC_Read (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ADC_Read (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ADC_Read (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ADC_Read (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ADC_Read (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ADC_Read (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcat
   _strcpy

 _Serial_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      82       7       50.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     60      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4F       1       84.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     162      20        0.0%
DATA                 0      0     162       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Sep 24 16:32:35 2021

                   ___altoft@exp 0020                   ?_get_longitude 0060  
                   ?_LCD_Command 0001                    ___altoft@sign 0021  
                             _GO 007E11                     ___awdiv@sign 001B  
                   main@Altitude 00B5              ___wmul@multiplicand 0020  
                    ?_LCD_String 0017            get_latitude@_latitude 0072  
                   ___ftadd@exp1 0062                     ___ftadd@exp2 0061  
          get_altitude@_Altitude 006F                     ___ftadd@sign 0060  
                            l116 3090                              l351 0EE0  
                            l249 36D8                              l606 29D0  
                            l551 1776                              l713 2048  
                            l553 177A                              l580 1A08  
                            l717 207E                              l719 20A2  
                            l728 215C                              l737 217A  
                            l690 2C4A                              l842 2FAE  
                            l658 26AA                              l762 2582  
                            l755 24F4                              l748 2B8A  
                            l852 3262                              l756 251C  
                            l787 3614                              _GIE 007F97  
                            _E_W 004E                              _N_S 004F  
                   main@Latitude 00BA                     ___awmod@sign 0015  
                            prod 000FF3                              wreg 000FE8  
      convert_to_degrees@dec_deg 006C        convert_to_degrees@decimal 0071  
      convert_to_degrees@degrees 006F                     ___ftdiv@cntr 002B  
                   ___ftdiv@sign 0030                             l3001 3204  
                           l3013 2E06                             l4001 3636  
                           l3009 2DD6                             l3113 24BA  
                           l3019 2E32                             l3203 2670  
                           l3107 248E                             l3213 2698  
                           l3215 26A4                             l3207 2680  
                           l3143 2548                             l3153 2570  
                           l4131 2BCC                             l3163 25B2  
                           l3155 257C                             l3147 2558  
                           l2701 3518                             l4221 211A  
                           l4301 2A0A                             l4143 2C18  
                           l4135 2BDA                             l4215 20F4  
                           l3191 2642                             l3183 2612  
                           l2711 367E                             l4145 2C36  
                           l4137 2BE4                             l4217 2100  
                           l4209 20CA                             l3169 25D0  
                           l4321 2A64                             l5009 1A5E  
                           l4147 2C40                             l4139 2C02  
                           l4171 30D6                             l4235 2198  
                           l4227 2144                             l4219 210E  
                           l3443 2F60                             l4331 2A8C  
                           l4307 2A32                             l2723 3394  
                           l4173 30E2                             l4245 21CC  
                           l4229 2150                             l4261 2B26  
                           l3445 2F6C                             l4325 2A74  
                           l4255 2AFE                             l4407 344E  
                           l3455 2FA0                             l3447 2F70  
                           l3471 3254                             l3463 3220  
                           l4335 2A9C                             l2727 33A8  
                           l4431 16D2                             l4415 169A  
                           l4193 208C                             l4281 2B64  
                           l4601 2762                             l3465 322C  
                           l4361 1FB4                             l4353 1EF4  
                           l2921 35D0                             l4417 169E  
                           l2691 3502                             l4187 2056  
                           l4611 2790                             l3467 3230  
                           l4523 18EA                             l4515 18B6  
                           l4507 187E                             l4443 1702  
                           l4427 16C6                             l4613 27A0  
                           l4605 2776                             l2933 2ECE  
                           l4381 1468                             l4525 18F6  
                           l4461 1780                             l4437 16EA  
                           l4429 16CE                             l3751 3404  
                           l4199 209A                             l4615 27AA  
                           l4375 13C4                             l4703 0AAE  
                           l2919 35CC                             l4551 199E  
                           l4535 194A                             l4519 18BE  
                           l4543 1966                             l4471 17BC  
                           l2689 34FA                             l4625 327A  
                           l2945 2EF4                             l2961 2F26  
                           l4393 15B8                             l4385 148C  
                           l4641 08E8                             l4553 19A6  
                           l4529 1920                             l3753 28EA  
                           l3913 3336                             l2699 3514  
                           l3747 33DC                             l4619 27C6  
                           l4627 3286                             l2947 2EFC  
                           l2939 2EDE                             l4811 0F14  
                           l4803 0EE4                             l4731 0BEA  
                           l4635 08C8                             l4547 1972  
                           l4539 1958                             l4475 17CC  
                           l4467 17A4                             l3771 2930  
                           l3915 333A                             l3907 3562  
                           l2965 2F34                             l2957 2F1C  
                           l2949 2F00                             l2981 31BE  
                           l4733 0C00                             l4661 0982  
                           l4653 0956                             l4573 1A28  
                           l4557 19D0                             l4477 17D0  
                           l3917 334A                             l3909 356A  
                           l4583 26EC                             l4399 165C  
                           l4815 0F66                             l4743 0C88  
                           l4735 0C30                             l4727 0BC4  
                           l4719 0B5C                             l4655 096C  
                           l4495 185C                             l3783 298C  
                           l3863 3590                             l3919 3352  
                           l3881 330C                             l3873 32E4  
                           l2993 31EC                             l2985 31CC  
                           l2977 31B2                             l4833 1074  
                           l4825 104C                             l4761 0D72  
                           l4737 0C46                             l4673 09CC  
                           l4649 091A                             l4905 34CC  
                           l3777 293A                             l3769 292A  
                           l2987 31D4                             l4851 10EC  
                           l4827 105A                             l4763 0D78  
                           l4747 0CAE                             l4835 1082  
                           l4675 09E6                             l4667 09AC  
                           l4659 097C                             l4499 1860  
                           l3779 297E                             l4931 2D4C  
                           l3867 35A0                             l3877 32F8  
                           l3885 331E                             l2989 31D8  
                           l2997 31F6                             l4853 10F2  
                           l4845 10C6                             l4781 0DF2  
                           l4757 0D0C                             l4693 0A68  
                           l4685 0A16                             l3893 3158  
                           l4925 2D1C                             l4791 0E94  
                           l4775 0DBE                             l4679 09FE  
                           l4687 0A4E                             l4951 2454  
                           l4873 1190                             l4865 1138  
                           l3889 3132                             l4883 1248  
                           l4779 0DEA                             l3997 3624  
                           l4885 124E                             l4869 1160  
                           l4797 0EAE                             l4789 0E86  
                           l4949 242C                             l4981 2E4A  
                           l4965 2CAE                             l4879 11BE  
                           l4799 0EC2                             l4887 1264  
                           l4959 2C7E                             l4889 1282  
                           l4987 2E7A                             _ADON 007E10  
                           STR_1 088B                             STR_2 0877  
                           STR_3 0890                             STR_4 08B4  
                           STR_5 089A                             STR_6 08A6  
                           STR_7 08B4                             STR_8 0893  
                           STR_9 08A6                             _CREN 007D5C  
                           _LATB 000F8A                             u3041 2472  
                           u4100 33FC                             u3061 249E  
                           u4110 3424                             u4210 305C  
                           u4107 33F2                             u4117 341A  
                           u4240 3078                             u4234 306A  
                           u4235 3066                             u4228 305E  
                           u4264 3086                             u5400 270A  
                           u4360 337A                             u4265 3082  
                           u4258 307A                             u5405 2702  
                           u4367 3370                             u4651 2004  
                           _RCIF 007CF5                             u4661 201A  
                           u5381 26CC                             u4911 29F2  
                           u5730 0ED8                             u5570 0AF4  
                           u4931 2A1A                             u4861 2AE6  
                           u5575 0AE8                             u4881 2B0E  
                 ??_get_altitude 0045                             _TXIF 007CF4  
      convert_to_degrees@minutes 0069                             _atof 3646  
                           _atol 28EA                             _main 1A36  
                   ___ftpack@arg 0010                     ___ftpack@exp 0013  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 0050         __end_of_USART_SendString 3646  
          get_latitude@lat_index 0077                 __end_of_ADC_Init 36D6  
               __end_of_ADC_Read 30B4                   ??_get_latitude 0045  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E                  __end_of_MSdelay 3526  
                  _LCD_String_xy 32D0                     _sprintf$1188 0079  
                   ___ftmul@cntr 0031                     ___param_bank 000000  
                   ___ftmul@sign 0032                    main@Longitude 00BD  
                   ___fttol@exp1 0065                     ___fttol@lval 0061  
               __end_of_LCD_Char 36A4                      _Data_Buffer 00D8  
               __end_of_LCD_Init 34B8                            ?_atof 0042  
                          ?_atol 001C                            ?_main 0001  
                __end_of___awdiv 2F3E                  __end_of___ftadd 21F2  
                          STR_10 08B4                            STR_11 08A0  
                          STR_12 08AC                            STR_13 08B1  
                          STR_14 0882                  __end_of___awmod 320E  
                __end_of___ftdiv 2BBC                  __end_of___ftneg 3622  
                __end_of___lldiv 2FC0                  __end_of___ftmul 2AD6  
                ___awdiv@divisor 0018                  __end_of___llmod 3274  
                __end_of___ftsub 3478                  __end_of___fttol 27D8  
                          _LATC0 007C58                            _LATC1 007C59  
                          _LATC2 007C5A                            i2l161 22B2  
                          i2l165 22E4                            i2l167 22F0  
                ___awdiv@counter 001A                            _RCREG 000FAE  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TXREG 000FAD  
                          _TXSTA 000FAC              ___lmul@multiplicand 0014  
                   ___lltoft@exp 0020  convert_to_degrees@NMEA_lat_long 0066  
                  ___awtoft@sign 001B                  __end_of_dpowers 0829  
                          _scale 1290                  __end_of_isdigit 3686  
       get_longitude@Long_Buffer 0063                    ___ftpack@sign 0014  
                          atof@s 0042                            atol@a 0025  
                          atol@c 0029                            atol@s 001C  
                __end_of_isspace 35D8                            pclath 000FFA  
                          tablat 000FF5            get_altitude@alt_index 0073  
                          status 000FD8              __size_of_LCD_String 0052  
                __end_of_sprintf 1290                   ?_LCD_String_xy 0019  
                    ?_USART_Init 0066                  __initialization 3526  
                ??_get_longitude 0045                     __end_of_atof 3668  
                   __end_of_atol 29E2                     __end_of_main 1DAE  
               get_gpstime@_Time 003E                 get_gpstime@index 0042  
                         ??_atof 0045                           ??_atol 0020  
                         ??_main 0046                    ___fttol@sign1 0060  
                  __activetblptr 000002             __size_of__tdiv_to_l_ 0132  
    __size_of_convert_to_degrees 0136                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
               __end_of___altoft 312C                 ___llmod@dividend 0010  
                         ?_scale 0033                           _ADRESH 000FC4  
                         _ADRESL 000FC3                 ___awdiv@dividend 0016  
               __end_of___awtoft 34F0                 __end_of___ftpack 2C6A  
               LCD_String_xy@pos 0019                 LCD_String_xy@row 001C  
               LCD_String_xy@str 001A                 __end_of___lltoft 32D0  
                      ??_MSdelay 0012                           i2l4107 2288  
                         i2l4117 22B8                           i2l4095 2240  
                         i2l4099 2262                           _OSCCON 000FD3  
                         _TRISC6 007CA6                           _TRISC7 007CA7  
                     _Serial_ISR 0008                get_altitude@index 0074  
             get_longitude@index 0076                 __end_of__powers_ 0850  
                         ___ftge 2DA6                           ___lmul 3384  
                         ___wmul 35D8                        ??___awdiv 001A  
                      ??___ftadd 0043                        ??___awmod 0014  
                      ??___ftdiv 0028                        ??___ftneg 0036  
                      ??___lldiv 0021                        ??___ftmul 002A  
                      ??___llmod 0018                        ??___ftsub 0046  
                      ??___fttol 003E             __size_of_get_gpstime 0072  
                ADC_Read@channel 0010                           _memset 3586  
                         _fround 1DAE                  ADC_Read@digital 0016  
                         clear_0 352C                           clear_1 3538  
                         clear_2 3544                 ___awdiv@quotient 001C  
                ___awmod@divisor 0012             __end_of_get_altitude 2EBA  
                ___awmod@counter 0014             __size_of_LCD_Command 001E  
                         _strcat 332C                           _strcpy 3558  
                         _strtod 1680            ___ftmul@f3_as_product 002E  
        get_longitude@_longitude 0072                        ??_isdigit 0010  
           __end_of_get_latitude 2DA6                        ?_ADC_Init 0001  
                      ?_ADC_Read 0010                     __mediumconst 0000  
                      ??_isspace 0010                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
            __size_of_USART_Init 007A          get_latitude@lat_pointer 0075  
                      ??_sprintf 0073                        ?_LCD_Char 0001  
                     __accesstop 0060          __end_of__initialization 354A  
                     ___altoft@c 0018                        ?_LCD_Init 0001  
                ??_LCD_String_xy 001C                       ___ftadd@f1 003D  
                     ___ftadd@f2 0040                       ___ftge@ff1 0010  
                     ___ftge@ff2 0013         _convert_time_to_UTC$1184 0098  
                  ___rparam_used 000001                       ___ftdiv@f1 0022  
                     ___ftdiv@f2 0025                       ___ftdiv@f3 002C  
                     ___ftneg@f1 0033                       ___awtoft@c 0018  
                     ___ftmul@f1 0024                       ___ftmul@f2 0027  
                     ___ftsub@f1 0063                       ___ftsub@f2 0066  
                     ___fttol@f1 003A                   __pcstackCOMRAM 0001  
                     ___lltoft@c 0018                    __end_of_scale 1680  
                   ??_LCD_String 0019                       __div_to_l_ 2594  
                     ??_ADC_Init 0010                       ??_ADC_Read 0012  
                __div_to_l_@exp1 001B                  __div_to_l_@cntr 001A  
                        ??_scale 0036                  __div_to_l_@quot 0016  
                     __pbssBANK0 00C0                       __pbssBANK1 0100  
                     ??_LCD_Char 0016                       ??_LCD_Init 0017  
             __end_of_LCD_String 342C                ?_USART_SendString 0011  
                  __div_to_l_@f1 0010                    __div_to_l_@f2 0013  
                    ?_Serial_ISR 0001               ??_USART_SendString 0013  
        get_longitude@long_index 0077                          ?___ftge 0010  
   __size_of_convert_time_to_UTC 0112                          ?___lmul 0010  
                        ?___wmul 001E                        ?___altoft 0018  
                        ?_memset 0010                          ?_fround 0033  
                 ___lmul@product 0018                        ?___awtoft 0018  
                      ?___ftpack 0010                        ?___lltoft 0018  
                        ?_strcat 0010                          ?_strcpy 0010  
                        ?_strtod 0036                     _CommaCounter 004D  
                   _IsLastEndGGA 004B                          _MSdelay 34F0  
                   _GGA_Pointers 00C0                    LCD_String@str 0017  
                   ??_USART_Init 0046                __end_of__npowers_ 0877  
                        __Hparam 0000                       _scale$1187 0036  
                        __Lparam 0000            __size_of_get_altitude 0084  
                __size_of___ftge 0090                          ___awdiv 2EBA  
                __size_of___lmul 0056                          ___ftadd 1FF4  
                        ___awmod 319E                          ___ftdiv 2AD6  
                        ___ftneg 35FE                          ___lldiv 2F3E  
                __size_of___wmul 0026                          ___ftmul 29E2  
                        ___llmod 320E                          ___ftsub 342C  
                        ___fttol 26BC                     __psmallconst 0800  
                     ??___altoft 001C            __size_of_get_latitude 009E  
                    _Temperature 00E7                          __pcinit 3526  
                     ??___awtoft 001B                       ??___ftpack 0015  
                __size_of_memset 002C                  __size_of_fround 0246  
                        __ramtop 0800                          _celsius 00D4  
                     ??___lltoft 001C                          __ptext0 1A36  
                        __ptext1 3558                          __ptext2 332C  
                        __ptext3 3586                          __ptext4 2C6A  
                        __ptext5 2D08                          __ptext6 312C  
                        __ptext7 28EA                          __ptext8 2E36  
                        __ptext9 3646              USART_SendString@out 0011  
         convert_time_to_UTC@min 009E           convert_time_to_UTC@sec 00A0  
                      _GGA_Index 0049                  __size_of_strcat 0058  
                __size_of_strcpy 002E                      ?__div_to_l_ 0010  
                __size_of_strtod 03B6                   USART_Init@temp 006A  
                        _dpowers 0801                          _isdigit 3668  
               ___awmod@dividend 0010              __size_of_Serial_ISR 2324  
                        _isspace 35B2               __end_of_USART_Init 303A  
                        _sprintf 08B8                   __pintcode_body 21F2  
           end_of_initialization 354A                     _get_altitude 2E36  
                        memset@c 0012                          memset@n 0014  
                        memset@p 0016                   LCD_Command@cmd 0016  
                  __Lmediumconst 0000                          int_func 21F2  
                ___lldiv@divisor 001D                     _get_latitude 2D08  
                ___lldiv@counter 0025                        _RCSTAbits 000FAB  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE          get_altitude@alt_pointer 0072  
          __end_of_get_longitude 2D08                   __tdiv_to_l_@f1 0010  
                 __tdiv_to_l_@f2 0013                    ??__tdiv_to_l_ 0016  
                        strtod@s 0036       __end_of_convert_to_degrees 2462  
              __size_of_ADC_Init 0014                __size_of_ADC_Read 007A  
            USART_Init@baud_rate 0066                      ___ftdiv@exp 002F  
                  ?_USART_TxChar 0001                __size_of_LCD_Char 001E  
              __size_of_LCD_Init 0040              __size_of__div_to_l_ 0128  
                  ??_get_gpstime 002E                      ___ftmul@exp 002D  
                  _IsItGGAString 00D7                    ??_LCD_Command 0016  
                 __end_of___ftge 2E36                   __end_of___lmul 33DA  
              LCD_Char@char_data 0016                   __end_of___wmul 35FE  
                 __end_of_memset 35B2                   __end_of_fround 1FF4  
                 __end_of_strcat 3384                   __end_of_strcpy 3586  
                 __end_of_strtod 1A36              start_initialization 3526  
            __end_of__tdiv_to_l_ 2594              _convert_time_to_UTC 27D8  
                 ??_USART_TxChar 0010                  ___llmod@divisor 0014  
                ___llmod@counter 0018                     ??_Serial_ISR 0001  
          __end_of_LCD_String_xy 332C             ?_convert_time_to_UTC 0094  
                       ??___ftge 0016                         ??___lmul 0018  
                       ??___wmul 0022                         ??_memset 0016  
                       ??_fround 0036              __end_of_get_gpstime 319E  
                  sprintf@tmpval 0086                         ??_strcat 0014  
                       ??_strcpy 0014                         ??_strtod 003A  
      __size_of_USART_SendString 0024                __size_of___altoft 0078  
                     fround@prec 003C                __size_of___awtoft 0038  
              __size_of___ftpack 00AE              __end_of_LCD_Command 36C2  
              __size_of___lltoft 005C                      __pbssCOMRAM 0046  
                  __pcstackBANK0 0060               __end_of_Serial_ISR 232C  
                       ?_MSdelay 0010                      sprintf@flag 0082  
                    sprintf@fval 008E                      sprintf@prec 0091  
                      _main$1183 00B8            ??_convert_time_to_UTC 0046  
                      __pintcode 0008                         ?___awdiv 0016  
                       ?___ftadd 003D                         ?___awmod 0010  
                       ?___ftdiv 0022                         ?___ftneg 0033  
                       ?___lldiv 0019                         ?___ftmul 0024  
                       ?___llmod 0010                         ?___ftsub 0063  
                      __npowers_ 0850                         ?___fttol 003A  
                    __tdiv_to_l_ 2462                     ??__div_to_l_ 0016  
                    __smallconst 0800                         ?_isdigit 0001  
                       _ADC_Init 36C2                         _ADC_Read 303A  
                       ?_isspace 0001                         _GGA_CODE 0046  
                       ?_sprintf 0069                   __size_of_scale 03F0  
                       MSdelay@i 0012                         MSdelay@j 0014  
                       _LCD_Char 3686                         _LCD_Init 3478  
                 ___wmul@product 0022                         _PIE1bits 000F9D  
             __end_of__div_to_l_ 26BC                      _get_gpstime 312C  
                    strtod@flags 003C                      strtod@expon 003D  
                    _LCD_Command 36A4          Serial_ISR@received_char 000F  
                     _ADCON0bits 000FC2             __end_of_USART_TxChar 36E2  
              ___wmul@multiplier 001E                         _IsEndGGA 004C  
              ___lmul@multiplier 0010               _convert_to_degrees 232C  
               __size_of_MSdelay 0036                         __Hrparam 0000  
            ?_convert_to_degrees 0066                         __Lrparam 0000  
               __size_of___awdiv 0084                 __size_of___ftadd 01FE  
               __size_of___awmod 0070                 __size_of___ftdiv 00E6  
               __size_of___ftneg 0024                 __size_of___lldiv 0082  
                       ___altoft 30B4                 __size_of___ftmul 00F4  
               __size_of___llmod 0066                 __size_of___ftsub 004C  
               __size_of___fttol 011C                         ___awtoft 34B8  
                       ___ftpack 2BBC                      _fround$1185 0039  
                    _fround$1186 0036                         ___lltoft 3274  
                    _isdigit$833 0011                 _USART_SendString 3622  
         get_latitude@Lat_Buffer 0063                       sprintf@len 007E  
                     sprintf@exp 0084                       sprintf@val 008A  
                     strcat@from 0012             ??_convert_to_degrees 0046  
               __size_of_isdigit 001E                 __size_of_isspace 0026  
                       __ptext10 1680                         __ptext11 35B2  
                       __ptext20 35D8                         __ptext12 3384  
                       __ptext21 29E2                         __ptext13 232C  
                       __ptext30 35FE                         __ptext22 319E  
                       __ptext14 34B8                         __ptext31 2DA6  
                       __ptext23 2EBA                         __ptext15 27D8  
                       __ptext40 32D0                         __ptext32 3622  
                       __ptext24 2462                         __ptext16 08B8  
                       __ptext41 33DA                         __ptext33 36D6  
                       __ptext25 2594                         __ptext17 1290  
                       __ptext42 3686                         __ptext34 2FC0  
                       __ptext26 3274                         __ptext18 3668  
                       __ptext43 3478                         __ptext35 26BC  
                       __ptext27 320E                         __ptext19 1DAE  
                       __ptext44 36A4                         __ptext36 2AD6  
                       __ptext28 2F3E                         __ptext45 34F0  
                       __ptext37 1FF4                         __ptext29 342C  
                       __ptext46 303A                         __ptext38 30B4  
                       __ptext47 36C2                         __ptext39 2BBC  
                       __powers_ 0829                       _GGA_Buffer 0100  
        convert_time_to_UTC@hour 009C                 __size_of_sprintf 09D8  
         __size_of_get_longitude 009E                       strcpy@from 0012  
                  __size_of_atof 0022                    __size_of_atol 00F8  
                  __size_of_main 0378                       MSdelay@val 0010  
                     strtod@eexp 003B                         int$flags 0050  
                       atol@sign 0024                         main@Time 00B1  
                       _stringBT 0150                       _LCD_String 33DA  
                 main@GPS_Buffer 00A2                      _isspace$836 0011  
         get_gpstime@Time_Buffer 002F                       _INTCONbits 000FF2  
                       isdigit@c 0012                         memset@p1 0010  
                USART_TxChar@out 0010                         scale@scl 0039  
                       intlevel2 0000                        sprintf@ap 0080  
                      sprintf@cp 007C                 __tdiv_to_l_@exp1 001E  
               __tdiv_to_l_@cntr 001D                        sprintf@sp 0069  
               __tdiv_to_l_@quot 0019      convert_time_to_UTC@UTC_Time 0094  
                       isspace@c 0012                 ___lldiv@dividend 0019  
                      strtod@res 0038        get_longitude@long_pointer 0075  
          __size_of_USART_TxChar 000C                get_latitude@index 0076  
         get_altitude@Alt_Buffer 0063                    _get_longitude 2C6A  
                   ?__tdiv_to_l_ 0010                         sprintf@c 0093  
                       sprintf@f 006B                         strcat@cp 0014  
                       strcat@to 0010                 ___lldiv@quotient 0021  
                       strcpy@cp 0014                         strcpy@to 0010  
         __size_of_LCD_String_xy 005C                         strtod@_u 003E  
                  ?_get_altitude 0060      __end_of_convert_time_to_UTC 28EA  
                   _USART_TxChar 36D6                    ?_get_latitude 0060  
                     _USART_Init 2FC0                     ?_get_gpstime 002A  
